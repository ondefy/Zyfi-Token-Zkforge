{
  "_format": "ethers-rs-sol-build-info-1",
  "solcVersion": "0.8.25",
  "solcLongVersion": "0.8.25+commit.b61c2a91.Linux.gcc",
  "input": {
    "language": "Solidity",
    "sources": {
      "lib/forge-std/src/Base.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2 <0.9.0;\n\nimport {StdStorage} from \"./StdStorage.sol\";\nimport {Vm, VmSafe} from \"./Vm.sol\";\n\nabstract contract CommonBase {\n    // Cheat code address, 0x7109709ECfa91a80626fF3989D68f67F5b1DD12D.\n    address internal constant VM_ADDRESS = address(uint160(uint256(keccak256(\"hevm cheat code\"))));\n    // console.sol and console2.sol work by executing a staticcall to this address.\n    address internal constant CONSOLE = 0x000000000000000000636F6e736F6c652e6c6f67;\n    // Used when deploying with create2, https://github.com/Arachnid/deterministic-deployment-proxy.\n    address internal constant CREATE2_FACTORY = 0x4e59b44847b379578588920cA78FbF26c0B4956C;\n    // Default address for tx.origin and msg.sender, 0x1804c8AB1F12E6bbf3894d4083f33e07309d1f38.\n    address internal constant DEFAULT_SENDER = address(uint160(uint256(keccak256(\"foundry default caller\"))));\n    // Address of the test contract, deployed by the DEFAULT_SENDER.\n    address internal constant DEFAULT_TEST_CONTRACT = 0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f;\n    // Deterministic deployment address of the Multicall3 contract.\n    address internal constant MULTICALL3_ADDRESS = 0xcA11bde05977b3631167028862bE2a173976CA11;\n    // The order of the secp256k1 curve.\n    uint256 internal constant SECP256K1_ORDER =\n        115792089237316195423570985008687907852837564279074904382605163141518161494337;\n\n    uint256 internal constant UINT256_MAX =\n        115792089237316195423570985008687907853269984665640564039457584007913129639935;\n\n    Vm internal constant vm = Vm(VM_ADDRESS);\n    StdStorage internal stdstore;\n}\n\nabstract contract TestBase is CommonBase {}\n\nabstract contract ScriptBase is CommonBase {\n    VmSafe internal constant vmSafe = VmSafe(VM_ADDRESS);\n}\n"
      },
      "lib/forge-std/src/Script.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2 <0.9.0;\n\n// 💬 ABOUT\n// Forge Std's default Script.\n\n// 🧩 MODULES\nimport {console} from \"./console.sol\";\nimport {console2} from \"./console2.sol\";\nimport {safeconsole} from \"./safeconsole.sol\";\nimport {StdChains} from \"./StdChains.sol\";\nimport {StdCheatsSafe} from \"./StdCheats.sol\";\nimport {stdJson} from \"./StdJson.sol\";\nimport {stdMath} from \"./StdMath.sol\";\nimport {StdStorage, stdStorageSafe} from \"./StdStorage.sol\";\nimport {StdStyle} from \"./StdStyle.sol\";\nimport {StdUtils} from \"./StdUtils.sol\";\nimport {VmSafe} from \"./Vm.sol\";\n\n// 📦 BOILERPLATE\nimport {ScriptBase} from \"./Base.sol\";\n\n// ⭐️ SCRIPT\nabstract contract Script is ScriptBase, StdChains, StdCheatsSafe, StdUtils {\n    // Note: IS_SCRIPT() must return true.\n    bool public IS_SCRIPT = true;\n}\n"
      },
      "lib/forge-std/src/StdChains.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2 <0.9.0;\n\nimport {VmSafe} from \"./Vm.sol\";\n\n/**\n * StdChains provides information about EVM compatible chains that can be used in scripts/tests.\n * For each chain, the chain's name, chain ID, and a default RPC URL are provided. Chains are\n * identified by their alias, which is the same as the alias in the `[rpc_endpoints]` section of\n * the `foundry.toml` file. For best UX, ensure the alias in the `foundry.toml` file match the\n * alias used in this contract, which can be found as the first argument to the\n * `setChainWithDefaultRpcUrl` call in the `initializeStdChains` function.\n *\n * There are two main ways to use this contract:\n *   1. Set a chain with `setChain(string memory chainAlias, ChainData memory chain)` or\n *      `setChain(string memory chainAlias, Chain memory chain)`\n *   2. Get a chain with `getChain(string memory chainAlias)` or `getChain(uint256 chainId)`.\n *\n * The first time either of those are used, chains are initialized with the default set of RPC URLs.\n * This is done in `initializeStdChains`, which uses `setChainWithDefaultRpcUrl`. Defaults are recorded in\n * `defaultRpcUrls`.\n *\n * The `setChain` function is straightforward, and it simply saves off the given chain data.\n *\n * The `getChain` methods use `getChainWithUpdatedRpcUrl` to return a chain. For example, let's say\n * we want to retrieve the RPC URL for `mainnet`:\n *   - If you have specified data with `setChain`, it will return that.\n *   - If you have configured a mainnet RPC URL in `foundry.toml`, it will return the URL, provided it\n *     is valid (e.g. a URL is specified, or an environment variable is given and exists).\n *   - If neither of the above conditions is met, the default data is returned.\n *\n * Summarizing the above, the prioritization hierarchy is `setChain` -> `foundry.toml` -> environment variable -> defaults.\n */\nabstract contract StdChains {\n    VmSafe private constant vm = VmSafe(address(uint160(uint256(keccak256(\"hevm cheat code\")))));\n\n    bool private stdChainsInitialized;\n\n    struct ChainData {\n        string name;\n        uint256 chainId;\n        string rpcUrl;\n    }\n\n    struct Chain {\n        // The chain name.\n        string name;\n        // The chain's Chain ID.\n        uint256 chainId;\n        // The chain's alias. (i.e. what gets specified in `foundry.toml`).\n        string chainAlias;\n        // A default RPC endpoint for this chain.\n        // NOTE: This default RPC URL is included for convenience to facilitate quick tests and\n        // experimentation. Do not use this RPC URL for production test suites, CI, or other heavy\n        // usage as you will be throttled and this is a disservice to others who need this endpoint.\n        string rpcUrl;\n    }\n\n    // Maps from the chain's alias (matching the alias in the `foundry.toml` file) to chain data.\n    mapping(string => Chain) private chains;\n    // Maps from the chain's alias to it's default RPC URL.\n    mapping(string => string) private defaultRpcUrls;\n    // Maps from a chain ID to it's alias.\n    mapping(uint256 => string) private idToAlias;\n\n    bool private fallbackToDefaultRpcUrls = true;\n\n    // The RPC URL will be fetched from config or defaultRpcUrls if possible.\n    function getChain(string memory chainAlias) internal virtual returns (Chain memory chain) {\n        require(bytes(chainAlias).length != 0, \"StdChains getChain(string): Chain alias cannot be the empty string.\");\n\n        initializeStdChains();\n        chain = chains[chainAlias];\n        require(\n            chain.chainId != 0,\n            string(abi.encodePacked(\"StdChains getChain(string): Chain with alias \\\"\", chainAlias, \"\\\" not found.\"))\n        );\n\n        chain = getChainWithUpdatedRpcUrl(chainAlias, chain);\n    }\n\n    function getChain(uint256 chainId) internal virtual returns (Chain memory chain) {\n        require(chainId != 0, \"StdChains getChain(uint256): Chain ID cannot be 0.\");\n        initializeStdChains();\n        string memory chainAlias = idToAlias[chainId];\n\n        chain = chains[chainAlias];\n\n        require(\n            chain.chainId != 0,\n            string(abi.encodePacked(\"StdChains getChain(uint256): Chain with ID \", vm.toString(chainId), \" not found.\"))\n        );\n\n        chain = getChainWithUpdatedRpcUrl(chainAlias, chain);\n    }\n\n    // set chain info, with priority to argument's rpcUrl field.\n    function setChain(string memory chainAlias, ChainData memory chain) internal virtual {\n        require(\n            bytes(chainAlias).length != 0,\n            \"StdChains setChain(string,ChainData): Chain alias cannot be the empty string.\"\n        );\n\n        require(chain.chainId != 0, \"StdChains setChain(string,ChainData): Chain ID cannot be 0.\");\n\n        initializeStdChains();\n        string memory foundAlias = idToAlias[chain.chainId];\n\n        require(\n            bytes(foundAlias).length == 0 || keccak256(bytes(foundAlias)) == keccak256(bytes(chainAlias)),\n            string(\n                abi.encodePacked(\n                    \"StdChains setChain(string,ChainData): Chain ID \",\n                    vm.toString(chain.chainId),\n                    \" already used by \\\"\",\n                    foundAlias,\n                    \"\\\".\"\n                )\n            )\n        );\n\n        uint256 oldChainId = chains[chainAlias].chainId;\n        delete idToAlias[oldChainId];\n\n        chains[chainAlias] =\n            Chain({name: chain.name, chainId: chain.chainId, chainAlias: chainAlias, rpcUrl: chain.rpcUrl});\n        idToAlias[chain.chainId] = chainAlias;\n    }\n\n    // set chain info, with priority to argument's rpcUrl field.\n    function setChain(string memory chainAlias, Chain memory chain) internal virtual {\n        setChain(chainAlias, ChainData({name: chain.name, chainId: chain.chainId, rpcUrl: chain.rpcUrl}));\n    }\n\n    function _toUpper(string memory str) private pure returns (string memory) {\n        bytes memory strb = bytes(str);\n        bytes memory copy = new bytes(strb.length);\n        for (uint256 i = 0; i < strb.length; i++) {\n            bytes1 b = strb[i];\n            if (b >= 0x61 && b <= 0x7A) {\n                copy[i] = bytes1(uint8(b) - 32);\n            } else {\n                copy[i] = b;\n            }\n        }\n        return string(copy);\n    }\n\n    // lookup rpcUrl, in descending order of priority:\n    // current -> config (foundry.toml) -> environment variable -> default\n    function getChainWithUpdatedRpcUrl(string memory chainAlias, Chain memory chain)\n        private\n        view\n        returns (Chain memory)\n    {\n        if (bytes(chain.rpcUrl).length == 0) {\n            try vm.rpcUrl(chainAlias) returns (string memory configRpcUrl) {\n                chain.rpcUrl = configRpcUrl;\n            } catch (bytes memory err) {\n                string memory envName = string(abi.encodePacked(_toUpper(chainAlias), \"_RPC_URL\"));\n                if (fallbackToDefaultRpcUrls) {\n                    chain.rpcUrl = vm.envOr(envName, defaultRpcUrls[chainAlias]);\n                } else {\n                    chain.rpcUrl = vm.envString(envName);\n                }\n                // Distinguish 'not found' from 'cannot read'\n                // The upstream error thrown by forge for failing cheats changed so we check both the old and new versions\n                bytes memory oldNotFoundError =\n                    abi.encodeWithSignature(\"CheatCodeError\", string(abi.encodePacked(\"invalid rpc url \", chainAlias)));\n                bytes memory newNotFoundError = abi.encodeWithSignature(\n                    \"CheatcodeError(string)\", string(abi.encodePacked(\"invalid rpc url: \", chainAlias))\n                );\n                bytes32 errHash = keccak256(err);\n                if (\n                    (errHash != keccak256(oldNotFoundError) && errHash != keccak256(newNotFoundError))\n                        || bytes(chain.rpcUrl).length == 0\n                ) {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, err), mload(err))\n                    }\n                }\n            }\n        }\n        return chain;\n    }\n\n    function setFallbackToDefaultRpcUrls(bool useDefault) internal {\n        fallbackToDefaultRpcUrls = useDefault;\n    }\n\n    function initializeStdChains() private {\n        if (stdChainsInitialized) return;\n\n        stdChainsInitialized = true;\n\n        // If adding an RPC here, make sure to test the default RPC URL in `testRpcs`\n        setChainWithDefaultRpcUrl(\"anvil\", ChainData(\"Anvil\", 31337, \"http://127.0.0.1:8545\"));\n        setChainWithDefaultRpcUrl(\n            \"mainnet\", ChainData(\"Mainnet\", 1, \"https://eth-mainnet.alchemyapi.io/v2/pwc5rmJhrdoaSEfimoKEmsvOjKSmPDrP\")\n        );\n        setChainWithDefaultRpcUrl(\n            \"goerli\", ChainData(\"Goerli\", 5, \"https://goerli.infura.io/v3/b9794ad1ddf84dfb8c34d6bb5dca2001\")\n        );\n        setChainWithDefaultRpcUrl(\n            \"sepolia\", ChainData(\"Sepolia\", 11155111, \"https://sepolia.infura.io/v3/b9794ad1ddf84dfb8c34d6bb5dca2001\")\n        );\n        setChainWithDefaultRpcUrl(\"optimism\", ChainData(\"Optimism\", 10, \"https://mainnet.optimism.io\"));\n        setChainWithDefaultRpcUrl(\"optimism_goerli\", ChainData(\"Optimism Goerli\", 420, \"https://goerli.optimism.io\"));\n        setChainWithDefaultRpcUrl(\"arbitrum_one\", ChainData(\"Arbitrum One\", 42161, \"https://arb1.arbitrum.io/rpc\"));\n        setChainWithDefaultRpcUrl(\n            \"arbitrum_one_goerli\", ChainData(\"Arbitrum One Goerli\", 421613, \"https://goerli-rollup.arbitrum.io/rpc\")\n        );\n        setChainWithDefaultRpcUrl(\"arbitrum_nova\", ChainData(\"Arbitrum Nova\", 42170, \"https://nova.arbitrum.io/rpc\"));\n        setChainWithDefaultRpcUrl(\"polygon\", ChainData(\"Polygon\", 137, \"https://polygon-rpc.com\"));\n        setChainWithDefaultRpcUrl(\n            \"polygon_mumbai\", ChainData(\"Polygon Mumbai\", 80001, \"https://rpc-mumbai.maticvigil.com\")\n        );\n        setChainWithDefaultRpcUrl(\"avalanche\", ChainData(\"Avalanche\", 43114, \"https://api.avax.network/ext/bc/C/rpc\"));\n        setChainWithDefaultRpcUrl(\n            \"avalanche_fuji\", ChainData(\"Avalanche Fuji\", 43113, \"https://api.avax-test.network/ext/bc/C/rpc\")\n        );\n        setChainWithDefaultRpcUrl(\n            \"bnb_smart_chain\", ChainData(\"BNB Smart Chain\", 56, \"https://bsc-dataseed1.binance.org\")\n        );\n        setChainWithDefaultRpcUrl(\n            \"bnb_smart_chain_testnet\",\n            ChainData(\"BNB Smart Chain Testnet\", 97, \"https://rpc.ankr.com/bsc_testnet_chapel\")\n        );\n        setChainWithDefaultRpcUrl(\"gnosis_chain\", ChainData(\"Gnosis Chain\", 100, \"https://rpc.gnosischain.com\"));\n        setChainWithDefaultRpcUrl(\"moonbeam\", ChainData(\"Moonbeam\", 1284, \"https://rpc.api.moonbeam.network\"));\n        setChainWithDefaultRpcUrl(\n            \"moonriver\", ChainData(\"Moonriver\", 1285, \"https://rpc.api.moonriver.moonbeam.network\")\n        );\n        setChainWithDefaultRpcUrl(\"moonbase\", ChainData(\"Moonbase\", 1287, \"https://rpc.testnet.moonbeam.network\"));\n        setChainWithDefaultRpcUrl(\"base_goerli\", ChainData(\"Base Goerli\", 84531, \"https://goerli.base.org\"));\n        setChainWithDefaultRpcUrl(\"base\", ChainData(\"Base\", 8453, \"https://mainnet.base.org\"));\n        setChainWithDefaultRpcUrl(\"fraxtal\", ChainData(\"Fraxtal\", 252, \"https://rpc.frax.com\"));\n        setChainWithDefaultRpcUrl(\"fraxtal_testnet\", ChainData(\"Fraxtal Testnet\", 2522, \"https://rpc.testnet.frax.com\"));\n    }\n\n    // set chain info, with priority to chainAlias' rpc url in foundry.toml\n    function setChainWithDefaultRpcUrl(string memory chainAlias, ChainData memory chain) private {\n        string memory rpcUrl = chain.rpcUrl;\n        defaultRpcUrls[chainAlias] = rpcUrl;\n        chain.rpcUrl = \"\";\n        setChain(chainAlias, chain);\n        chain.rpcUrl = rpcUrl; // restore argument\n    }\n}\n"
      },
      "lib/forge-std/src/StdCheats.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2 <0.9.0;\n\npragma experimental ABIEncoderV2;\n\nimport {StdStorage, stdStorage} from \"./StdStorage.sol\";\nimport {console2} from \"./console2.sol\";\nimport {Vm} from \"./Vm.sol\";\n\nabstract contract StdCheatsSafe {\n    Vm private constant vm = Vm(address(uint160(uint256(keccak256(\"hevm cheat code\")))));\n\n    uint256 private constant UINT256_MAX =\n        115792089237316195423570985008687907853269984665640564039457584007913129639935;\n\n    bool private gasMeteringOff;\n\n    // Data structures to parse Transaction objects from the broadcast artifact\n    // that conform to EIP1559. The Raw structs is what is parsed from the JSON\n    // and then converted to the one that is used by the user for better UX.\n\n    struct RawTx1559 {\n        string[] arguments;\n        address contractAddress;\n        string contractName;\n        // json value name = function\n        string functionSig;\n        bytes32 hash;\n        // json value name = tx\n        RawTx1559Detail txDetail;\n        // json value name = type\n        string opcode;\n    }\n\n    struct RawTx1559Detail {\n        AccessList[] accessList;\n        bytes data;\n        address from;\n        bytes gas;\n        bytes nonce;\n        address to;\n        bytes txType;\n        bytes value;\n    }\n\n    struct Tx1559 {\n        string[] arguments;\n        address contractAddress;\n        string contractName;\n        string functionSig;\n        bytes32 hash;\n        Tx1559Detail txDetail;\n        string opcode;\n    }\n\n    struct Tx1559Detail {\n        AccessList[] accessList;\n        bytes data;\n        address from;\n        uint256 gas;\n        uint256 nonce;\n        address to;\n        uint256 txType;\n        uint256 value;\n    }\n\n    // Data structures to parse Transaction objects from the broadcast artifact\n    // that DO NOT conform to EIP1559. The Raw structs is what is parsed from the JSON\n    // and then converted to the one that is used by the user for better UX.\n\n    struct TxLegacy {\n        string[] arguments;\n        address contractAddress;\n        string contractName;\n        string functionSig;\n        string hash;\n        string opcode;\n        TxDetailLegacy transaction;\n    }\n\n    struct TxDetailLegacy {\n        AccessList[] accessList;\n        uint256 chainId;\n        bytes data;\n        address from;\n        uint256 gas;\n        uint256 gasPrice;\n        bytes32 hash;\n        uint256 nonce;\n        bytes1 opcode;\n        bytes32 r;\n        bytes32 s;\n        uint256 txType;\n        address to;\n        uint8 v;\n        uint256 value;\n    }\n\n    struct AccessList {\n        address accessAddress;\n        bytes32[] storageKeys;\n    }\n\n    // Data structures to parse Receipt objects from the broadcast artifact.\n    // The Raw structs is what is parsed from the JSON\n    // and then converted to the one that is used by the user for better UX.\n\n    struct RawReceipt {\n        bytes32 blockHash;\n        bytes blockNumber;\n        address contractAddress;\n        bytes cumulativeGasUsed;\n        bytes effectiveGasPrice;\n        address from;\n        bytes gasUsed;\n        RawReceiptLog[] logs;\n        bytes logsBloom;\n        bytes status;\n        address to;\n        bytes32 transactionHash;\n        bytes transactionIndex;\n    }\n\n    struct Receipt {\n        bytes32 blockHash;\n        uint256 blockNumber;\n        address contractAddress;\n        uint256 cumulativeGasUsed;\n        uint256 effectiveGasPrice;\n        address from;\n        uint256 gasUsed;\n        ReceiptLog[] logs;\n        bytes logsBloom;\n        uint256 status;\n        address to;\n        bytes32 transactionHash;\n        uint256 transactionIndex;\n    }\n\n    // Data structures to parse the entire broadcast artifact, assuming the\n    // transactions conform to EIP1559.\n\n    struct EIP1559ScriptArtifact {\n        string[] libraries;\n        string path;\n        string[] pending;\n        Receipt[] receipts;\n        uint256 timestamp;\n        Tx1559[] transactions;\n        TxReturn[] txReturns;\n    }\n\n    struct RawEIP1559ScriptArtifact {\n        string[] libraries;\n        string path;\n        string[] pending;\n        RawReceipt[] receipts;\n        TxReturn[] txReturns;\n        uint256 timestamp;\n        RawTx1559[] transactions;\n    }\n\n    struct RawReceiptLog {\n        // json value = address\n        address logAddress;\n        bytes32 blockHash;\n        bytes blockNumber;\n        bytes data;\n        bytes logIndex;\n        bool removed;\n        bytes32[] topics;\n        bytes32 transactionHash;\n        bytes transactionIndex;\n        bytes transactionLogIndex;\n    }\n\n    struct ReceiptLog {\n        // json value = address\n        address logAddress;\n        bytes32 blockHash;\n        uint256 blockNumber;\n        bytes data;\n        uint256 logIndex;\n        bytes32[] topics;\n        uint256 transactionIndex;\n        uint256 transactionLogIndex;\n        bool removed;\n    }\n\n    struct TxReturn {\n        string internalType;\n        string value;\n    }\n\n    struct Account {\n        address addr;\n        uint256 key;\n    }\n\n    enum AddressType {\n        Payable,\n        NonPayable,\n        ZeroAddress,\n        Precompile,\n        ForgeAddress\n    }\n\n    // Checks that `addr` is not blacklisted by token contracts that have a blacklist.\n    function assumeNotBlacklisted(address token, address addr) internal view virtual {\n        // Nothing to check if `token` is not a contract.\n        uint256 tokenCodeSize;\n        assembly {\n            tokenCodeSize := extcodesize(token)\n        }\n        require(tokenCodeSize > 0, \"StdCheats assumeNotBlacklisted(address,address): Token address is not a contract.\");\n\n        bool success;\n        bytes memory returnData;\n\n        // 4-byte selector for `isBlacklisted(address)`, used by USDC.\n        (success, returnData) = token.staticcall(abi.encodeWithSelector(0xfe575a87, addr));\n        vm.assume(!success || abi.decode(returnData, (bool)) == false);\n\n        // 4-byte selector for `isBlackListed(address)`, used by USDT.\n        (success, returnData) = token.staticcall(abi.encodeWithSelector(0xe47d6060, addr));\n        vm.assume(!success || abi.decode(returnData, (bool)) == false);\n    }\n\n    // Checks that `addr` is not blacklisted by token contracts that have a blacklist.\n    // This is identical to `assumeNotBlacklisted(address,address)` but with a different name, for\n    // backwards compatibility, since this name was used in the original PR which has already has\n    // a release. This function can be removed in a future release once we want a breaking change.\n    function assumeNoBlacklisted(address token, address addr) internal view virtual {\n        assumeNotBlacklisted(token, addr);\n    }\n\n    function assumeAddressIsNot(address addr, AddressType addressType) internal virtual {\n        if (addressType == AddressType.Payable) {\n            assumeNotPayable(addr);\n        } else if (addressType == AddressType.NonPayable) {\n            assumePayable(addr);\n        } else if (addressType == AddressType.ZeroAddress) {\n            assumeNotZeroAddress(addr);\n        } else if (addressType == AddressType.Precompile) {\n            assumeNotPrecompile(addr);\n        } else if (addressType == AddressType.ForgeAddress) {\n            assumeNotForgeAddress(addr);\n        }\n    }\n\n    function assumeAddressIsNot(address addr, AddressType addressType1, AddressType addressType2) internal virtual {\n        assumeAddressIsNot(addr, addressType1);\n        assumeAddressIsNot(addr, addressType2);\n    }\n\n    function assumeAddressIsNot(\n        address addr,\n        AddressType addressType1,\n        AddressType addressType2,\n        AddressType addressType3\n    ) internal virtual {\n        assumeAddressIsNot(addr, addressType1);\n        assumeAddressIsNot(addr, addressType2);\n        assumeAddressIsNot(addr, addressType3);\n    }\n\n    function assumeAddressIsNot(\n        address addr,\n        AddressType addressType1,\n        AddressType addressType2,\n        AddressType addressType3,\n        AddressType addressType4\n    ) internal virtual {\n        assumeAddressIsNot(addr, addressType1);\n        assumeAddressIsNot(addr, addressType2);\n        assumeAddressIsNot(addr, addressType3);\n        assumeAddressIsNot(addr, addressType4);\n    }\n\n    // This function checks whether an address, `addr`, is payable. It works by sending 1 wei to\n    // `addr` and checking the `success` return value.\n    // NOTE: This function may result in state changes depending on the fallback/receive logic\n    // implemented by `addr`, which should be taken into account when this function is used.\n    function _isPayable(address addr) private returns (bool) {\n        require(\n            addr.balance < UINT256_MAX,\n            \"StdCheats _isPayable(address): Balance equals max uint256, so it cannot receive any more funds\"\n        );\n        uint256 origBalanceTest = address(this).balance;\n        uint256 origBalanceAddr = address(addr).balance;\n\n        vm.deal(address(this), 1);\n        (bool success,) = payable(addr).call{value: 1}(\"\");\n\n        // reset balances\n        vm.deal(address(this), origBalanceTest);\n        vm.deal(addr, origBalanceAddr);\n\n        return success;\n    }\n\n    // NOTE: This function may result in state changes depending on the fallback/receive logic\n    // implemented by `addr`, which should be taken into account when this function is used. See the\n    // `_isPayable` method for more information.\n    function assumePayable(address addr) internal virtual {\n        vm.assume(_isPayable(addr));\n    }\n\n    function assumeNotPayable(address addr) internal virtual {\n        vm.assume(!_isPayable(addr));\n    }\n\n    function assumeNotZeroAddress(address addr) internal pure virtual {\n        vm.assume(addr != address(0));\n    }\n\n    function assumeNotPrecompile(address addr) internal pure virtual {\n        assumeNotPrecompile(addr, _pureChainId());\n    }\n\n    function assumeNotPrecompile(address addr, uint256 chainId) internal pure virtual {\n        // Note: For some chains like Optimism these are technically predeploys (i.e. bytecode placed at a specific\n        // address), but the same rationale for excluding them applies so we include those too.\n\n        // These should be present on all EVM-compatible chains.\n        vm.assume(addr < address(0x1) || addr > address(0x9));\n\n        // forgefmt: disable-start\n        if (chainId == 10 || chainId == 420) {\n            // https://github.com/ethereum-optimism/optimism/blob/eaa371a0184b56b7ca6d9eb9cb0a2b78b2ccd864/op-bindings/predeploys/addresses.go#L6-L21\n            vm.assume(addr < address(0x4200000000000000000000000000000000000000) || addr > address(0x4200000000000000000000000000000000000800));\n        } else if (chainId == 42161 || chainId == 421613) {\n            // https://developer.arbitrum.io/useful-addresses#arbitrum-precompiles-l2-same-on-all-arb-chains\n            vm.assume(addr < address(0x0000000000000000000000000000000000000064) || addr > address(0x0000000000000000000000000000000000000068));\n        } else if (chainId == 43114 || chainId == 43113) {\n            // https://github.com/ava-labs/subnet-evm/blob/47c03fd007ecaa6de2c52ea081596e0a88401f58/precompile/params.go#L18-L59\n            vm.assume(addr < address(0x0100000000000000000000000000000000000000) || addr > address(0x01000000000000000000000000000000000000ff));\n            vm.assume(addr < address(0x0200000000000000000000000000000000000000) || addr > address(0x02000000000000000000000000000000000000FF));\n            vm.assume(addr < address(0x0300000000000000000000000000000000000000) || addr > address(0x03000000000000000000000000000000000000Ff));\n        }\n        // forgefmt: disable-end\n    }\n\n    function assumeNotForgeAddress(address addr) internal pure virtual {\n        // vm, console, and Create2Deployer addresses\n        vm.assume(\n            addr != address(vm) && addr != 0x000000000000000000636F6e736F6c652e6c6f67\n                && addr != 0x4e59b44847b379578588920cA78FbF26c0B4956C\n        );\n    }\n\n    function readEIP1559ScriptArtifact(string memory path)\n        internal\n        view\n        virtual\n        returns (EIP1559ScriptArtifact memory)\n    {\n        string memory data = vm.readFile(path);\n        bytes memory parsedData = vm.parseJson(data);\n        RawEIP1559ScriptArtifact memory rawArtifact = abi.decode(parsedData, (RawEIP1559ScriptArtifact));\n        EIP1559ScriptArtifact memory artifact;\n        artifact.libraries = rawArtifact.libraries;\n        artifact.path = rawArtifact.path;\n        artifact.timestamp = rawArtifact.timestamp;\n        artifact.pending = rawArtifact.pending;\n        artifact.txReturns = rawArtifact.txReturns;\n        artifact.receipts = rawToConvertedReceipts(rawArtifact.receipts);\n        artifact.transactions = rawToConvertedEIPTx1559s(rawArtifact.transactions);\n        return artifact;\n    }\n\n    function rawToConvertedEIPTx1559s(RawTx1559[] memory rawTxs) internal pure virtual returns (Tx1559[] memory) {\n        Tx1559[] memory txs = new Tx1559[](rawTxs.length);\n        for (uint256 i; i < rawTxs.length; i++) {\n            txs[i] = rawToConvertedEIPTx1559(rawTxs[i]);\n        }\n        return txs;\n    }\n\n    function rawToConvertedEIPTx1559(RawTx1559 memory rawTx) internal pure virtual returns (Tx1559 memory) {\n        Tx1559 memory transaction;\n        transaction.arguments = rawTx.arguments;\n        transaction.contractName = rawTx.contractName;\n        transaction.functionSig = rawTx.functionSig;\n        transaction.hash = rawTx.hash;\n        transaction.txDetail = rawToConvertedEIP1559Detail(rawTx.txDetail);\n        transaction.opcode = rawTx.opcode;\n        return transaction;\n    }\n\n    function rawToConvertedEIP1559Detail(RawTx1559Detail memory rawDetail)\n        internal\n        pure\n        virtual\n        returns (Tx1559Detail memory)\n    {\n        Tx1559Detail memory txDetail;\n        txDetail.data = rawDetail.data;\n        txDetail.from = rawDetail.from;\n        txDetail.to = rawDetail.to;\n        txDetail.nonce = _bytesToUint(rawDetail.nonce);\n        txDetail.txType = _bytesToUint(rawDetail.txType);\n        txDetail.value = _bytesToUint(rawDetail.value);\n        txDetail.gas = _bytesToUint(rawDetail.gas);\n        txDetail.accessList = rawDetail.accessList;\n        return txDetail;\n    }\n\n    function readTx1559s(string memory path) internal view virtual returns (Tx1559[] memory) {\n        string memory deployData = vm.readFile(path);\n        bytes memory parsedDeployData = vm.parseJson(deployData, \".transactions\");\n        RawTx1559[] memory rawTxs = abi.decode(parsedDeployData, (RawTx1559[]));\n        return rawToConvertedEIPTx1559s(rawTxs);\n    }\n\n    function readTx1559(string memory path, uint256 index) internal view virtual returns (Tx1559 memory) {\n        string memory deployData = vm.readFile(path);\n        string memory key = string(abi.encodePacked(\".transactions[\", vm.toString(index), \"]\"));\n        bytes memory parsedDeployData = vm.parseJson(deployData, key);\n        RawTx1559 memory rawTx = abi.decode(parsedDeployData, (RawTx1559));\n        return rawToConvertedEIPTx1559(rawTx);\n    }\n\n    // Analogous to readTransactions, but for receipts.\n    function readReceipts(string memory path) internal view virtual returns (Receipt[] memory) {\n        string memory deployData = vm.readFile(path);\n        bytes memory parsedDeployData = vm.parseJson(deployData, \".receipts\");\n        RawReceipt[] memory rawReceipts = abi.decode(parsedDeployData, (RawReceipt[]));\n        return rawToConvertedReceipts(rawReceipts);\n    }\n\n    function readReceipt(string memory path, uint256 index) internal view virtual returns (Receipt memory) {\n        string memory deployData = vm.readFile(path);\n        string memory key = string(abi.encodePacked(\".receipts[\", vm.toString(index), \"]\"));\n        bytes memory parsedDeployData = vm.parseJson(deployData, key);\n        RawReceipt memory rawReceipt = abi.decode(parsedDeployData, (RawReceipt));\n        return rawToConvertedReceipt(rawReceipt);\n    }\n\n    function rawToConvertedReceipts(RawReceipt[] memory rawReceipts) internal pure virtual returns (Receipt[] memory) {\n        Receipt[] memory receipts = new Receipt[](rawReceipts.length);\n        for (uint256 i; i < rawReceipts.length; i++) {\n            receipts[i] = rawToConvertedReceipt(rawReceipts[i]);\n        }\n        return receipts;\n    }\n\n    function rawToConvertedReceipt(RawReceipt memory rawReceipt) internal pure virtual returns (Receipt memory) {\n        Receipt memory receipt;\n        receipt.blockHash = rawReceipt.blockHash;\n        receipt.to = rawReceipt.to;\n        receipt.from = rawReceipt.from;\n        receipt.contractAddress = rawReceipt.contractAddress;\n        receipt.effectiveGasPrice = _bytesToUint(rawReceipt.effectiveGasPrice);\n        receipt.cumulativeGasUsed = _bytesToUint(rawReceipt.cumulativeGasUsed);\n        receipt.gasUsed = _bytesToUint(rawReceipt.gasUsed);\n        receipt.status = _bytesToUint(rawReceipt.status);\n        receipt.transactionIndex = _bytesToUint(rawReceipt.transactionIndex);\n        receipt.blockNumber = _bytesToUint(rawReceipt.blockNumber);\n        receipt.logs = rawToConvertedReceiptLogs(rawReceipt.logs);\n        receipt.logsBloom = rawReceipt.logsBloom;\n        receipt.transactionHash = rawReceipt.transactionHash;\n        return receipt;\n    }\n\n    function rawToConvertedReceiptLogs(RawReceiptLog[] memory rawLogs)\n        internal\n        pure\n        virtual\n        returns (ReceiptLog[] memory)\n    {\n        ReceiptLog[] memory logs = new ReceiptLog[](rawLogs.length);\n        for (uint256 i; i < rawLogs.length; i++) {\n            logs[i].logAddress = rawLogs[i].logAddress;\n            logs[i].blockHash = rawLogs[i].blockHash;\n            logs[i].blockNumber = _bytesToUint(rawLogs[i].blockNumber);\n            logs[i].data = rawLogs[i].data;\n            logs[i].logIndex = _bytesToUint(rawLogs[i].logIndex);\n            logs[i].topics = rawLogs[i].topics;\n            logs[i].transactionIndex = _bytesToUint(rawLogs[i].transactionIndex);\n            logs[i].transactionLogIndex = _bytesToUint(rawLogs[i].transactionLogIndex);\n            logs[i].removed = rawLogs[i].removed;\n        }\n        return logs;\n    }\n\n    // Deploy a contract by fetching the contract bytecode from\n    // the artifacts directory\n    // e.g. `deployCode(code, abi.encode(arg1,arg2,arg3))`\n    function deployCode(string memory what, bytes memory args) internal virtual returns (address addr) {\n        bytes memory bytecode = abi.encodePacked(vm.getCode(what), args);\n        /// @solidity memory-safe-assembly\n        assembly {\n            addr := create(0, add(bytecode, 0x20), mload(bytecode))\n        }\n\n        require(addr != address(0), \"StdCheats deployCode(string,bytes): Deployment failed.\");\n    }\n\n    function deployCode(string memory what) internal virtual returns (address addr) {\n        bytes memory bytecode = vm.getCode(what);\n        /// @solidity memory-safe-assembly\n        assembly {\n            addr := create(0, add(bytecode, 0x20), mload(bytecode))\n        }\n\n        require(addr != address(0), \"StdCheats deployCode(string): Deployment failed.\");\n    }\n\n    /// @dev deploy contract with value on construction\n    function deployCode(string memory what, bytes memory args, uint256 val) internal virtual returns (address addr) {\n        bytes memory bytecode = abi.encodePacked(vm.getCode(what), args);\n        /// @solidity memory-safe-assembly\n        assembly {\n            addr := create(val, add(bytecode, 0x20), mload(bytecode))\n        }\n\n        require(addr != address(0), \"StdCheats deployCode(string,bytes,uint256): Deployment failed.\");\n    }\n\n    function deployCode(string memory what, uint256 val) internal virtual returns (address addr) {\n        bytes memory bytecode = vm.getCode(what);\n        /// @solidity memory-safe-assembly\n        assembly {\n            addr := create(val, add(bytecode, 0x20), mload(bytecode))\n        }\n\n        require(addr != address(0), \"StdCheats deployCode(string,uint256): Deployment failed.\");\n    }\n\n    // creates a labeled address and the corresponding private key\n    function makeAddrAndKey(string memory name) internal virtual returns (address addr, uint256 privateKey) {\n        privateKey = uint256(keccak256(abi.encodePacked(name)));\n        addr = vm.addr(privateKey);\n        vm.label(addr, name);\n    }\n\n    // creates a labeled address\n    function makeAddr(string memory name) internal virtual returns (address addr) {\n        (addr,) = makeAddrAndKey(name);\n    }\n\n    // Destroys an account immediately, sending the balance to beneficiary.\n    // Destroying means: balance will be zero, code will be empty, and nonce will be 0\n    // This is similar to selfdestruct but not identical: selfdestruct destroys code and nonce\n    // only after tx ends, this will run immediately.\n    function destroyAccount(address who, address beneficiary) internal virtual {\n        uint256 currBalance = who.balance;\n        vm.etch(who, abi.encode());\n        vm.deal(who, 0);\n        vm.resetNonce(who);\n\n        uint256 beneficiaryBalance = beneficiary.balance;\n        vm.deal(beneficiary, currBalance + beneficiaryBalance);\n    }\n\n    // creates a struct containing both a labeled address and the corresponding private key\n    function makeAccount(string memory name) internal virtual returns (Account memory account) {\n        (account.addr, account.key) = makeAddrAndKey(name);\n    }\n\n    function deriveRememberKey(string memory mnemonic, uint32 index)\n        internal\n        virtual\n        returns (address who, uint256 privateKey)\n    {\n        privateKey = vm.deriveKey(mnemonic, index);\n        who = vm.rememberKey(privateKey);\n    }\n\n    function _bytesToUint(bytes memory b) private pure returns (uint256) {\n        require(b.length <= 32, \"StdCheats _bytesToUint(bytes): Bytes length exceeds 32.\");\n        return abi.decode(abi.encodePacked(new bytes(32 - b.length), b), (uint256));\n    }\n\n    function isFork() internal view virtual returns (bool status) {\n        try vm.activeFork() {\n            status = true;\n        } catch (bytes memory) {}\n    }\n\n    modifier skipWhenForking() {\n        if (!isFork()) {\n            _;\n        }\n    }\n\n    modifier skipWhenNotForking() {\n        if (isFork()) {\n            _;\n        }\n    }\n\n    modifier noGasMetering() {\n        vm.pauseGasMetering();\n        // To prevent turning gas monitoring back on with nested functions that use this modifier,\n        // we check if gasMetering started in the off position. If it did, we don't want to turn\n        // it back on until we exit the top level function that used the modifier\n        //\n        // i.e. funcA() noGasMetering { funcB() }, where funcB has noGasMetering as well.\n        // funcA will have `gasStartedOff` as false, funcB will have it as true,\n        // so we only turn metering back on at the end of the funcA\n        bool gasStartedOff = gasMeteringOff;\n        gasMeteringOff = true;\n\n        _;\n\n        // if gas metering was on when this modifier was called, turn it back on at the end\n        if (!gasStartedOff) {\n            gasMeteringOff = false;\n            vm.resumeGasMetering();\n        }\n    }\n\n    // We use this complex approach of `_viewChainId` and `_pureChainId` to ensure there are no\n    // compiler warnings when accessing chain ID in any solidity version supported by forge-std. We\n    // can't simply access the chain ID in a normal view or pure function because the solc View Pure\n    // Checker changed `chainid` from pure to view in 0.8.0.\n    function _viewChainId() private view returns (uint256 chainId) {\n        // Assembly required since `block.chainid` was introduced in 0.8.0.\n        assembly {\n            chainId := chainid()\n        }\n\n        address(this); // Silence warnings in older Solc versions.\n    }\n\n    function _pureChainId() private pure returns (uint256 chainId) {\n        function() internal view returns (uint256) fnIn = _viewChainId;\n        function() internal pure returns (uint256) pureChainId;\n        assembly {\n            pureChainId := fnIn\n        }\n        chainId = pureChainId();\n    }\n}\n\n// Wrappers around cheatcodes to avoid footguns\nabstract contract StdCheats is StdCheatsSafe {\n    using stdStorage for StdStorage;\n\n    StdStorage private stdstore;\n    Vm private constant vm = Vm(address(uint160(uint256(keccak256(\"hevm cheat code\")))));\n    address private constant CONSOLE2_ADDRESS = 0x000000000000000000636F6e736F6c652e6c6f67;\n\n    // Skip forward or rewind time by the specified number of seconds\n    function skip(uint256 time) internal virtual {\n        vm.warp(block.timestamp + time);\n    }\n\n    function rewind(uint256 time) internal virtual {\n        vm.warp(block.timestamp - time);\n    }\n\n    // Setup a prank from an address that has some ether\n    function hoax(address msgSender) internal virtual {\n        vm.deal(msgSender, 1 << 128);\n        vm.prank(msgSender);\n    }\n\n    function hoax(address msgSender, uint256 give) internal virtual {\n        vm.deal(msgSender, give);\n        vm.prank(msgSender);\n    }\n\n    function hoax(address msgSender, address origin) internal virtual {\n        vm.deal(msgSender, 1 << 128);\n        vm.prank(msgSender, origin);\n    }\n\n    function hoax(address msgSender, address origin, uint256 give) internal virtual {\n        vm.deal(msgSender, give);\n        vm.prank(msgSender, origin);\n    }\n\n    // Start perpetual prank from an address that has some ether\n    function startHoax(address msgSender) internal virtual {\n        vm.deal(msgSender, 1 << 128);\n        vm.startPrank(msgSender);\n    }\n\n    function startHoax(address msgSender, uint256 give) internal virtual {\n        vm.deal(msgSender, give);\n        vm.startPrank(msgSender);\n    }\n\n    // Start perpetual prank from an address that has some ether\n    // tx.origin is set to the origin parameter\n    function startHoax(address msgSender, address origin) internal virtual {\n        vm.deal(msgSender, 1 << 128);\n        vm.startPrank(msgSender, origin);\n    }\n\n    function startHoax(address msgSender, address origin, uint256 give) internal virtual {\n        vm.deal(msgSender, give);\n        vm.startPrank(msgSender, origin);\n    }\n\n    function changePrank(address msgSender) internal virtual {\n        console2_log_StdCheats(\"changePrank is deprecated. Please use vm.startPrank instead.\");\n        vm.stopPrank();\n        vm.startPrank(msgSender);\n    }\n\n    function changePrank(address msgSender, address txOrigin) internal virtual {\n        vm.stopPrank();\n        vm.startPrank(msgSender, txOrigin);\n    }\n\n    // The same as Vm's `deal`\n    // Use the alternative signature for ERC20 tokens\n    function deal(address to, uint256 give) internal virtual {\n        vm.deal(to, give);\n    }\n\n    // Set the balance of an account for any ERC20 token\n    // Use the alternative signature to update `totalSupply`\n    function deal(address token, address to, uint256 give) internal virtual {\n        deal(token, to, give, false);\n    }\n\n    // Set the balance of an account for any ERC1155 token\n    // Use the alternative signature to update `totalSupply`\n    function dealERC1155(address token, address to, uint256 id, uint256 give) internal virtual {\n        dealERC1155(token, to, id, give, false);\n    }\n\n    function deal(address token, address to, uint256 give, bool adjust) internal virtual {\n        // get current balance\n        (, bytes memory balData) = token.staticcall(abi.encodeWithSelector(0x70a08231, to));\n        uint256 prevBal = abi.decode(balData, (uint256));\n\n        // update balance\n        stdstore.target(token).sig(0x70a08231).with_key(to).checked_write(give);\n\n        // update total supply\n        if (adjust) {\n            (, bytes memory totSupData) = token.staticcall(abi.encodeWithSelector(0x18160ddd));\n            uint256 totSup = abi.decode(totSupData, (uint256));\n            if (give < prevBal) {\n                totSup -= (prevBal - give);\n            } else {\n                totSup += (give - prevBal);\n            }\n            stdstore.target(token).sig(0x18160ddd).checked_write(totSup);\n        }\n    }\n\n    function dealERC1155(address token, address to, uint256 id, uint256 give, bool adjust) internal virtual {\n        // get current balance\n        (, bytes memory balData) = token.staticcall(abi.encodeWithSelector(0x00fdd58e, to, id));\n        uint256 prevBal = abi.decode(balData, (uint256));\n\n        // update balance\n        stdstore.target(token).sig(0x00fdd58e).with_key(to).with_key(id).checked_write(give);\n\n        // update total supply\n        if (adjust) {\n            (, bytes memory totSupData) = token.staticcall(abi.encodeWithSelector(0xbd85b039, id));\n            require(\n                totSupData.length != 0,\n                \"StdCheats deal(address,address,uint,uint,bool): target contract is not ERC1155Supply.\"\n            );\n            uint256 totSup = abi.decode(totSupData, (uint256));\n            if (give < prevBal) {\n                totSup -= (prevBal - give);\n            } else {\n                totSup += (give - prevBal);\n            }\n            stdstore.target(token).sig(0xbd85b039).with_key(id).checked_write(totSup);\n        }\n    }\n\n    function dealERC721(address token, address to, uint256 id) internal virtual {\n        // check if token id is already minted and the actual owner.\n        (bool successMinted, bytes memory ownerData) = token.staticcall(abi.encodeWithSelector(0x6352211e, id));\n        require(successMinted, \"StdCheats deal(address,address,uint,bool): id not minted.\");\n\n        // get owner current balance\n        (, bytes memory fromBalData) =\n            token.staticcall(abi.encodeWithSelector(0x70a08231, abi.decode(ownerData, (address))));\n        uint256 fromPrevBal = abi.decode(fromBalData, (uint256));\n\n        // get new user current balance\n        (, bytes memory toBalData) = token.staticcall(abi.encodeWithSelector(0x70a08231, to));\n        uint256 toPrevBal = abi.decode(toBalData, (uint256));\n\n        // update balances\n        stdstore.target(token).sig(0x70a08231).with_key(abi.decode(ownerData, (address))).checked_write(--fromPrevBal);\n        stdstore.target(token).sig(0x70a08231).with_key(to).checked_write(++toPrevBal);\n\n        // update owner\n        stdstore.target(token).sig(0x6352211e).with_key(id).checked_write(to);\n    }\n\n    function deployCodeTo(string memory what, address where) internal virtual {\n        deployCodeTo(what, \"\", 0, where);\n    }\n\n    function deployCodeTo(string memory what, bytes memory args, address where) internal virtual {\n        deployCodeTo(what, args, 0, where);\n    }\n\n    function deployCodeTo(string memory what, bytes memory args, uint256 value, address where) internal virtual {\n        bytes memory creationCode = vm.getCode(what);\n        vm.etch(where, abi.encodePacked(creationCode, args));\n        (bool success, bytes memory runtimeBytecode) = where.call{value: value}(\"\");\n        require(success, \"StdCheats deployCodeTo(string,bytes,uint256,address): Failed to create runtime bytecode.\");\n        vm.etch(where, runtimeBytecode);\n    }\n\n    // Used to prevent the compilation of console, which shortens the compilation time when console is not used elsewhere.\n    function console2_log_StdCheats(string memory p0) private view {\n        (bool status,) = address(CONSOLE2_ADDRESS).staticcall(abi.encodeWithSignature(\"log(string)\", p0));\n        status;\n    }\n}\n"
      },
      "lib/forge-std/src/StdJson.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.0 <0.9.0;\n\npragma experimental ABIEncoderV2;\n\nimport {VmSafe} from \"./Vm.sol\";\n\n// Helpers for parsing and writing JSON files\n// To parse:\n// ```\n// using stdJson for string;\n// string memory json = vm.readFile(\"<some_path>\");\n// json.readUint(\"<json_path>\");\n// ```\n// To write:\n// ```\n// using stdJson for string;\n// string memory json = \"json\";\n// json.serialize(\"a\", uint256(123));\n// string memory semiFinal = json.serialize(\"b\", string(\"test\"));\n// string memory finalJson = json.serialize(\"c\", semiFinal);\n// finalJson.write(\"<some_path>\");\n// ```\n\nlibrary stdJson {\n    VmSafe private constant vm = VmSafe(address(uint160(uint256(keccak256(\"hevm cheat code\")))));\n\n    function parseRaw(string memory json, string memory key) internal pure returns (bytes memory) {\n        return vm.parseJson(json, key);\n    }\n\n    function readUint(string memory json, string memory key) internal pure returns (uint256) {\n        return vm.parseJsonUint(json, key);\n    }\n\n    function readUintArray(string memory json, string memory key) internal pure returns (uint256[] memory) {\n        return vm.parseJsonUintArray(json, key);\n    }\n\n    function readInt(string memory json, string memory key) internal pure returns (int256) {\n        return vm.parseJsonInt(json, key);\n    }\n\n    function readIntArray(string memory json, string memory key) internal pure returns (int256[] memory) {\n        return vm.parseJsonIntArray(json, key);\n    }\n\n    function readBytes32(string memory json, string memory key) internal pure returns (bytes32) {\n        return vm.parseJsonBytes32(json, key);\n    }\n\n    function readBytes32Array(string memory json, string memory key) internal pure returns (bytes32[] memory) {\n        return vm.parseJsonBytes32Array(json, key);\n    }\n\n    function readString(string memory json, string memory key) internal pure returns (string memory) {\n        return vm.parseJsonString(json, key);\n    }\n\n    function readStringArray(string memory json, string memory key) internal pure returns (string[] memory) {\n        return vm.parseJsonStringArray(json, key);\n    }\n\n    function readAddress(string memory json, string memory key) internal pure returns (address) {\n        return vm.parseJsonAddress(json, key);\n    }\n\n    function readAddressArray(string memory json, string memory key) internal pure returns (address[] memory) {\n        return vm.parseJsonAddressArray(json, key);\n    }\n\n    function readBool(string memory json, string memory key) internal pure returns (bool) {\n        return vm.parseJsonBool(json, key);\n    }\n\n    function readBoolArray(string memory json, string memory key) internal pure returns (bool[] memory) {\n        return vm.parseJsonBoolArray(json, key);\n    }\n\n    function readBytes(string memory json, string memory key) internal pure returns (bytes memory) {\n        return vm.parseJsonBytes(json, key);\n    }\n\n    function readBytesArray(string memory json, string memory key) internal pure returns (bytes[] memory) {\n        return vm.parseJsonBytesArray(json, key);\n    }\n\n    function serialize(string memory jsonKey, string memory rootObject) internal returns (string memory) {\n        return vm.serializeJson(jsonKey, rootObject);\n    }\n\n    function serialize(string memory jsonKey, string memory key, bool value) internal returns (string memory) {\n        return vm.serializeBool(jsonKey, key, value);\n    }\n\n    function serialize(string memory jsonKey, string memory key, bool[] memory value)\n        internal\n        returns (string memory)\n    {\n        return vm.serializeBool(jsonKey, key, value);\n    }\n\n    function serialize(string memory jsonKey, string memory key, uint256 value) internal returns (string memory) {\n        return vm.serializeUint(jsonKey, key, value);\n    }\n\n    function serialize(string memory jsonKey, string memory key, uint256[] memory value)\n        internal\n        returns (string memory)\n    {\n        return vm.serializeUint(jsonKey, key, value);\n    }\n\n    function serialize(string memory jsonKey, string memory key, int256 value) internal returns (string memory) {\n        return vm.serializeInt(jsonKey, key, value);\n    }\n\n    function serialize(string memory jsonKey, string memory key, int256[] memory value)\n        internal\n        returns (string memory)\n    {\n        return vm.serializeInt(jsonKey, key, value);\n    }\n\n    function serialize(string memory jsonKey, string memory key, address value) internal returns (string memory) {\n        return vm.serializeAddress(jsonKey, key, value);\n    }\n\n    function serialize(string memory jsonKey, string memory key, address[] memory value)\n        internal\n        returns (string memory)\n    {\n        return vm.serializeAddress(jsonKey, key, value);\n    }\n\n    function serialize(string memory jsonKey, string memory key, bytes32 value) internal returns (string memory) {\n        return vm.serializeBytes32(jsonKey, key, value);\n    }\n\n    function serialize(string memory jsonKey, string memory key, bytes32[] memory value)\n        internal\n        returns (string memory)\n    {\n        return vm.serializeBytes32(jsonKey, key, value);\n    }\n\n    function serialize(string memory jsonKey, string memory key, bytes memory value) internal returns (string memory) {\n        return vm.serializeBytes(jsonKey, key, value);\n    }\n\n    function serialize(string memory jsonKey, string memory key, bytes[] memory value)\n        internal\n        returns (string memory)\n    {\n        return vm.serializeBytes(jsonKey, key, value);\n    }\n\n    function serialize(string memory jsonKey, string memory key, string memory value)\n        internal\n        returns (string memory)\n    {\n        return vm.serializeString(jsonKey, key, value);\n    }\n\n    function serialize(string memory jsonKey, string memory key, string[] memory value)\n        internal\n        returns (string memory)\n    {\n        return vm.serializeString(jsonKey, key, value);\n    }\n\n    function write(string memory jsonKey, string memory path) internal {\n        vm.writeJson(jsonKey, path);\n    }\n\n    function write(string memory jsonKey, string memory path, string memory valueKey) internal {\n        vm.writeJson(jsonKey, path, valueKey);\n    }\n}\n"
      },
      "lib/forge-std/src/StdMath.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2 <0.9.0;\n\nlibrary stdMath {\n    int256 private constant INT256_MIN = -57896044618658097711785492504343953926634992332820282019728792003956564819968;\n\n    function abs(int256 a) internal pure returns (uint256) {\n        // Required or it will fail when `a = type(int256).min`\n        if (a == INT256_MIN) {\n            return 57896044618658097711785492504343953926634992332820282019728792003956564819968;\n        }\n\n        return uint256(a > 0 ? a : -a);\n    }\n\n    function delta(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a - b : b - a;\n    }\n\n    function delta(int256 a, int256 b) internal pure returns (uint256) {\n        // a and b are of the same sign\n        // this works thanks to two's complement, the left-most bit is the sign bit\n        if ((a ^ b) > -1) {\n            return delta(abs(a), abs(b));\n        }\n\n        // a and b are of opposite signs\n        return abs(a) + abs(b);\n    }\n\n    function percentDelta(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 absDelta = delta(a, b);\n\n        return absDelta * 1e18 / b;\n    }\n\n    function percentDelta(int256 a, int256 b) internal pure returns (uint256) {\n        uint256 absDelta = delta(a, b);\n        uint256 absB = abs(b);\n\n        return absDelta * 1e18 / absB;\n    }\n}\n"
      },
      "lib/forge-std/src/StdStorage.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2 <0.9.0;\n\nimport {Vm} from \"./Vm.sol\";\n\nstruct FindData {\n    uint256 slot;\n    uint256 offsetLeft;\n    uint256 offsetRight;\n    bool found;\n}\n\nstruct StdStorage {\n    mapping(address => mapping(bytes4 => mapping(bytes32 => FindData))) finds;\n    bytes32[] _keys;\n    bytes4 _sig;\n    uint256 _depth;\n    address _target;\n    bytes32 _set;\n    bool _enable_packed_slots;\n    bytes _calldata;\n}\n\nlibrary stdStorageSafe {\n    event SlotFound(address who, bytes4 fsig, bytes32 keysHash, uint256 slot);\n    event WARNING_UninitedSlot(address who, uint256 slot);\n\n    Vm private constant vm = Vm(address(uint160(uint256(keccak256(\"hevm cheat code\")))));\n    uint256 constant UINT256_MAX = 115792089237316195423570985008687907853269984665640564039457584007913129639935;\n\n    function sigs(string memory sigStr) internal pure returns (bytes4) {\n        return bytes4(keccak256(bytes(sigStr)));\n    }\n\n    function getCallParams(StdStorage storage self) internal view returns (bytes memory) {\n        if (self._calldata.length == 0) {\n            return flatten(self._keys);\n        } else {\n            return self._calldata;\n        }\n    }\n\n    // Calls target contract with configured parameters\n    function callTarget(StdStorage storage self) internal view returns (bool, bytes32) {\n        bytes memory cald = abi.encodePacked(self._sig, getCallParams(self));\n        (bool success, bytes memory rdat) = self._target.staticcall(cald);\n        bytes32 result = bytesToBytes32(rdat, 32 * self._depth);\n\n        return (success, result);\n    }\n\n    // Tries mutating slot value to determine if the targeted value is stored in it.\n    // If current value is 0, then we are setting slot value to type(uint256).max\n    // Otherwise, we set it to 0. That way, return value should always be affected.\n    function checkSlotMutatesCall(StdStorage storage self, bytes32 slot) internal returns (bool) {\n        bytes32 prevSlotValue = vm.load(self._target, slot);\n        (bool success, bytes32 prevReturnValue) = callTarget(self);\n\n        bytes32 testVal = prevReturnValue == bytes32(0) ? bytes32(UINT256_MAX) : bytes32(0);\n        vm.store(self._target, slot, testVal);\n\n        (, bytes32 newReturnValue) = callTarget(self);\n\n        vm.store(self._target, slot, prevSlotValue);\n\n        return (success && (prevReturnValue != newReturnValue));\n    }\n\n    // Tries setting one of the bits in slot to 1 until return value changes.\n    // Index of resulted bit is an offset packed slot has from left/right side\n    function findOffset(StdStorage storage self, bytes32 slot, bool left) internal returns (bool, uint256) {\n        for (uint256 offset = 0; offset < 256; offset++) {\n            uint256 valueToPut = left ? (1 << (255 - offset)) : (1 << offset);\n            vm.store(self._target, slot, bytes32(valueToPut));\n\n            (bool success, bytes32 data) = callTarget(self);\n\n            if (success && (uint256(data) > 0)) {\n                return (true, offset);\n            }\n        }\n        return (false, 0);\n    }\n\n    function findOffsets(StdStorage storage self, bytes32 slot) internal returns (bool, uint256, uint256) {\n        bytes32 prevSlotValue = vm.load(self._target, slot);\n\n        (bool foundLeft, uint256 offsetLeft) = findOffset(self, slot, true);\n        (bool foundRight, uint256 offsetRight) = findOffset(self, slot, false);\n\n        // `findOffset` may mutate slot value, so we are setting it to initial value\n        vm.store(self._target, slot, prevSlotValue);\n        return (foundLeft && foundRight, offsetLeft, offsetRight);\n    }\n\n    function find(StdStorage storage self) internal returns (FindData storage) {\n        return find(self, true);\n    }\n\n    /// @notice find an arbitrary storage slot given a function sig, input data, address of the contract and a value to check against\n    // slot complexity:\n    //  if flat, will be bytes32(uint256(uint));\n    //  if map, will be keccak256(abi.encode(key, uint(slot)));\n    //  if deep map, will be keccak256(abi.encode(key1, keccak256(abi.encode(key0, uint(slot)))));\n    //  if map struct, will be bytes32(uint256(keccak256(abi.encode(key1, keccak256(abi.encode(key0, uint(slot)))))) + structFieldDepth);\n    function find(StdStorage storage self, bool _clear) internal returns (FindData storage) {\n        address who = self._target;\n        bytes4 fsig = self._sig;\n        uint256 field_depth = self._depth;\n        bytes memory params = getCallParams(self);\n\n        // calldata to test against\n        if (self.finds[who][fsig][keccak256(abi.encodePacked(params, field_depth))].found) {\n            if (_clear) {\n                clear(self);\n            }\n            return self.finds[who][fsig][keccak256(abi.encodePacked(params, field_depth))];\n        }\n        vm.record();\n        (, bytes32 callResult) = callTarget(self);\n        (bytes32[] memory reads,) = vm.accesses(address(who));\n\n        if (reads.length == 0) {\n            revert(\"stdStorage find(StdStorage): No storage use detected for target.\");\n        } else {\n            for (uint256 i = 0; i < reads.length; i++) {\n                bytes32 prev = vm.load(who, reads[i]);\n                if (prev == bytes32(0)) {\n                    emit WARNING_UninitedSlot(who, uint256(reads[i]));\n                }\n\n                if (!checkSlotMutatesCall(self, reads[i])) {\n                    continue;\n                }\n\n                (uint256 offsetLeft, uint256 offsetRight) = (0, 0);\n\n                if (self._enable_packed_slots) {\n                    bool found;\n                    (found, offsetLeft, offsetRight) = findOffsets(self, reads[i]);\n                    if (!found) {\n                        continue;\n                    }\n                }\n\n                // Check that value between found offsets is equal to the current call result\n                uint256 curVal = (uint256(prev) & getMaskByOffsets(offsetLeft, offsetRight)) >> offsetRight;\n\n                if (uint256(callResult) != curVal) {\n                    continue;\n                }\n\n                emit SlotFound(who, fsig, keccak256(abi.encodePacked(params, field_depth)), uint256(reads[i]));\n                self.finds[who][fsig][keccak256(abi.encodePacked(params, field_depth))] =\n                    FindData(uint256(reads[i]), offsetLeft, offsetRight, true);\n                break;\n            }\n        }\n\n        require(\n            self.finds[who][fsig][keccak256(abi.encodePacked(params, field_depth))].found,\n            \"stdStorage find(StdStorage): Slot(s) not found.\"\n        );\n\n        if (_clear) {\n            clear(self);\n        }\n        return self.finds[who][fsig][keccak256(abi.encodePacked(params, field_depth))];\n    }\n\n    function target(StdStorage storage self, address _target) internal returns (StdStorage storage) {\n        self._target = _target;\n        return self;\n    }\n\n    function sig(StdStorage storage self, bytes4 _sig) internal returns (StdStorage storage) {\n        self._sig = _sig;\n        return self;\n    }\n\n    function sig(StdStorage storage self, string memory _sig) internal returns (StdStorage storage) {\n        self._sig = sigs(_sig);\n        return self;\n    }\n\n    function with_calldata(StdStorage storage self, bytes memory _calldata) internal returns (StdStorage storage) {\n        self._calldata = _calldata;\n        return self;\n    }\n\n    function with_key(StdStorage storage self, address who) internal returns (StdStorage storage) {\n        self._keys.push(bytes32(uint256(uint160(who))));\n        return self;\n    }\n\n    function with_key(StdStorage storage self, uint256 amt) internal returns (StdStorage storage) {\n        self._keys.push(bytes32(amt));\n        return self;\n    }\n\n    function with_key(StdStorage storage self, bytes32 key) internal returns (StdStorage storage) {\n        self._keys.push(key);\n        return self;\n    }\n\n    function enable_packed_slots(StdStorage storage self) internal returns (StdStorage storage) {\n        self._enable_packed_slots = true;\n        return self;\n    }\n\n    function depth(StdStorage storage self, uint256 _depth) internal returns (StdStorage storage) {\n        self._depth = _depth;\n        return self;\n    }\n\n    function read(StdStorage storage self) private returns (bytes memory) {\n        FindData storage data = find(self, false);\n        uint256 mask = getMaskByOffsets(data.offsetLeft, data.offsetRight);\n        uint256 value = (uint256(vm.load(self._target, bytes32(data.slot))) & mask) >> data.offsetRight;\n        clear(self);\n        return abi.encode(value);\n    }\n\n    function read_bytes32(StdStorage storage self) internal returns (bytes32) {\n        return abi.decode(read(self), (bytes32));\n    }\n\n    function read_bool(StdStorage storage self) internal returns (bool) {\n        int256 v = read_int(self);\n        if (v == 0) return false;\n        if (v == 1) return true;\n        revert(\"stdStorage read_bool(StdStorage): Cannot decode. Make sure you are reading a bool.\");\n    }\n\n    function read_address(StdStorage storage self) internal returns (address) {\n        return abi.decode(read(self), (address));\n    }\n\n    function read_uint(StdStorage storage self) internal returns (uint256) {\n        return abi.decode(read(self), (uint256));\n    }\n\n    function read_int(StdStorage storage self) internal returns (int256) {\n        return abi.decode(read(self), (int256));\n    }\n\n    function parent(StdStorage storage self) internal returns (uint256, bytes32) {\n        address who = self._target;\n        uint256 field_depth = self._depth;\n        vm.startMappingRecording();\n        uint256 child = find(self, true).slot - field_depth;\n        (bool found, bytes32 key, bytes32 parent_slot) = vm.getMappingKeyAndParentOf(who, bytes32(child));\n        if (!found) {\n            revert(\n                \"stdStorage read_bool(StdStorage): Cannot find parent. Make sure you give a slot and startMappingRecording() has been called.\"\n            );\n        }\n        return (uint256(parent_slot), key);\n    }\n\n    function root(StdStorage storage self) internal returns (uint256) {\n        address who = self._target;\n        uint256 field_depth = self._depth;\n        vm.startMappingRecording();\n        uint256 child = find(self, true).slot - field_depth;\n        bool found;\n        bytes32 root_slot;\n        bytes32 parent_slot;\n        (found,, parent_slot) = vm.getMappingKeyAndParentOf(who, bytes32(child));\n        if (!found) {\n            revert(\n                \"stdStorage read_bool(StdStorage): Cannot find parent. Make sure you give a slot and startMappingRecording() has been called.\"\n            );\n        }\n        while (found) {\n            root_slot = parent_slot;\n            (found,, parent_slot) = vm.getMappingKeyAndParentOf(who, bytes32(root_slot));\n        }\n        return uint256(root_slot);\n    }\n\n    function bytesToBytes32(bytes memory b, uint256 offset) private pure returns (bytes32) {\n        bytes32 out;\n\n        uint256 max = b.length > 32 ? 32 : b.length;\n        for (uint256 i = 0; i < max; i++) {\n            out |= bytes32(b[offset + i] & 0xFF) >> (i * 8);\n        }\n        return out;\n    }\n\n    function flatten(bytes32[] memory b) private pure returns (bytes memory) {\n        bytes memory result = new bytes(b.length * 32);\n        for (uint256 i = 0; i < b.length; i++) {\n            bytes32 k = b[i];\n            /// @solidity memory-safe-assembly\n            assembly {\n                mstore(add(result, add(32, mul(32, i))), k)\n            }\n        }\n\n        return result;\n    }\n\n    function clear(StdStorage storage self) internal {\n        delete self._target;\n        delete self._sig;\n        delete self._keys;\n        delete self._depth;\n        delete self._enable_packed_slots;\n        delete self._calldata;\n    }\n\n    // Returns mask which contains non-zero bits for values between `offsetLeft` and `offsetRight`\n    // (slotValue & mask) >> offsetRight will be the value of the given packed variable\n    function getMaskByOffsets(uint256 offsetLeft, uint256 offsetRight) internal pure returns (uint256 mask) {\n        // mask = ((1 << (256 - (offsetRight + offsetLeft))) - 1) << offsetRight;\n        // using assembly because (1 << 256) causes overflow\n        assembly {\n            mask := shl(offsetRight, sub(shl(sub(256, add(offsetRight, offsetLeft)), 1), 1))\n        }\n    }\n\n    // Returns slot value with updated packed variable.\n    function getUpdatedSlotValue(bytes32 curValue, uint256 varValue, uint256 offsetLeft, uint256 offsetRight)\n        internal\n        pure\n        returns (bytes32 newValue)\n    {\n        return bytes32((uint256(curValue) & ~getMaskByOffsets(offsetLeft, offsetRight)) | (varValue << offsetRight));\n    }\n}\n\nlibrary stdStorage {\n    Vm private constant vm = Vm(address(uint160(uint256(keccak256(\"hevm cheat code\")))));\n\n    function sigs(string memory sigStr) internal pure returns (bytes4) {\n        return stdStorageSafe.sigs(sigStr);\n    }\n\n    function find(StdStorage storage self) internal returns (uint256) {\n        return find(self, true);\n    }\n\n    function find(StdStorage storage self, bool _clear) internal returns (uint256) {\n        return stdStorageSafe.find(self, _clear).slot;\n    }\n\n    function target(StdStorage storage self, address _target) internal returns (StdStorage storage) {\n        return stdStorageSafe.target(self, _target);\n    }\n\n    function sig(StdStorage storage self, bytes4 _sig) internal returns (StdStorage storage) {\n        return stdStorageSafe.sig(self, _sig);\n    }\n\n    function sig(StdStorage storage self, string memory _sig) internal returns (StdStorage storage) {\n        return stdStorageSafe.sig(self, _sig);\n    }\n\n    function with_key(StdStorage storage self, address who) internal returns (StdStorage storage) {\n        return stdStorageSafe.with_key(self, who);\n    }\n\n    function with_key(StdStorage storage self, uint256 amt) internal returns (StdStorage storage) {\n        return stdStorageSafe.with_key(self, amt);\n    }\n\n    function with_key(StdStorage storage self, bytes32 key) internal returns (StdStorage storage) {\n        return stdStorageSafe.with_key(self, key);\n    }\n\n    function with_calldata(StdStorage storage self, bytes memory _calldata) internal returns (StdStorage storage) {\n        return stdStorageSafe.with_calldata(self, _calldata);\n    }\n\n    function enable_packed_slots(StdStorage storage self) internal returns (StdStorage storage) {\n        return stdStorageSafe.enable_packed_slots(self);\n    }\n\n    function depth(StdStorage storage self, uint256 _depth) internal returns (StdStorage storage) {\n        return stdStorageSafe.depth(self, _depth);\n    }\n\n    function clear(StdStorage storage self) internal {\n        stdStorageSafe.clear(self);\n    }\n\n    function checked_write(StdStorage storage self, address who) internal {\n        checked_write(self, bytes32(uint256(uint160(who))));\n    }\n\n    function checked_write(StdStorage storage self, uint256 amt) internal {\n        checked_write(self, bytes32(amt));\n    }\n\n    function checked_write_int(StdStorage storage self, int256 val) internal {\n        checked_write(self, bytes32(uint256(val)));\n    }\n\n    function checked_write(StdStorage storage self, bool write) internal {\n        bytes32 t;\n        /// @solidity memory-safe-assembly\n        assembly {\n            t := write\n        }\n        checked_write(self, t);\n    }\n\n    function checked_write(StdStorage storage self, bytes32 set) internal {\n        address who = self._target;\n        bytes4 fsig = self._sig;\n        uint256 field_depth = self._depth;\n        bytes memory params = stdStorageSafe.getCallParams(self);\n\n        if (!self.finds[who][fsig][keccak256(abi.encodePacked(params, field_depth))].found) {\n            find(self, false);\n        }\n        FindData storage data = self.finds[who][fsig][keccak256(abi.encodePacked(params, field_depth))];\n        if ((data.offsetLeft + data.offsetRight) > 0) {\n            uint256 maxVal = 2 ** (256 - (data.offsetLeft + data.offsetRight));\n            require(\n                uint256(set) < maxVal,\n                string(\n                    abi.encodePacked(\n                        \"stdStorage find(StdStorage): Packed slot. We can't fit value greater than \",\n                        vm.toString(maxVal)\n                    )\n                )\n            );\n        }\n        bytes32 curVal = vm.load(who, bytes32(data.slot));\n        bytes32 valToSet = stdStorageSafe.getUpdatedSlotValue(curVal, uint256(set), data.offsetLeft, data.offsetRight);\n\n        vm.store(who, bytes32(data.slot), valToSet);\n\n        (bool success, bytes32 callResult) = stdStorageSafe.callTarget(self);\n\n        if (!success || callResult != set) {\n            vm.store(who, bytes32(data.slot), curVal);\n            revert(\"stdStorage find(StdStorage): Failed to write value.\");\n        }\n        clear(self);\n    }\n\n    function read_bytes32(StdStorage storage self) internal returns (bytes32) {\n        return stdStorageSafe.read_bytes32(self);\n    }\n\n    function read_bool(StdStorage storage self) internal returns (bool) {\n        return stdStorageSafe.read_bool(self);\n    }\n\n    function read_address(StdStorage storage self) internal returns (address) {\n        return stdStorageSafe.read_address(self);\n    }\n\n    function read_uint(StdStorage storage self) internal returns (uint256) {\n        return stdStorageSafe.read_uint(self);\n    }\n\n    function read_int(StdStorage storage self) internal returns (int256) {\n        return stdStorageSafe.read_int(self);\n    }\n\n    function parent(StdStorage storage self) internal returns (uint256, bytes32) {\n        return stdStorageSafe.parent(self);\n    }\n\n    function root(StdStorage storage self) internal returns (uint256) {\n        return stdStorageSafe.root(self);\n    }\n}\n"
      },
      "lib/forge-std/src/StdStyle.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.4.22 <0.9.0;\n\nimport {VmSafe} from \"./Vm.sol\";\n\nlibrary StdStyle {\n    VmSafe private constant vm = VmSafe(address(uint160(uint256(keccak256(\"hevm cheat code\")))));\n\n    string constant RED = \"\\u001b[91m\";\n    string constant GREEN = \"\\u001b[92m\";\n    string constant YELLOW = \"\\u001b[93m\";\n    string constant BLUE = \"\\u001b[94m\";\n    string constant MAGENTA = \"\\u001b[95m\";\n    string constant CYAN = \"\\u001b[96m\";\n    string constant BOLD = \"\\u001b[1m\";\n    string constant DIM = \"\\u001b[2m\";\n    string constant ITALIC = \"\\u001b[3m\";\n    string constant UNDERLINE = \"\\u001b[4m\";\n    string constant INVERSE = \"\\u001b[7m\";\n    string constant RESET = \"\\u001b[0m\";\n\n    function styleConcat(string memory style, string memory self) private pure returns (string memory) {\n        return string(abi.encodePacked(style, self, RESET));\n    }\n\n    function red(string memory self) internal pure returns (string memory) {\n        return styleConcat(RED, self);\n    }\n\n    function red(uint256 self) internal pure returns (string memory) {\n        return red(vm.toString(self));\n    }\n\n    function red(int256 self) internal pure returns (string memory) {\n        return red(vm.toString(self));\n    }\n\n    function red(address self) internal pure returns (string memory) {\n        return red(vm.toString(self));\n    }\n\n    function red(bool self) internal pure returns (string memory) {\n        return red(vm.toString(self));\n    }\n\n    function redBytes(bytes memory self) internal pure returns (string memory) {\n        return red(vm.toString(self));\n    }\n\n    function redBytes32(bytes32 self) internal pure returns (string memory) {\n        return red(vm.toString(self));\n    }\n\n    function green(string memory self) internal pure returns (string memory) {\n        return styleConcat(GREEN, self);\n    }\n\n    function green(uint256 self) internal pure returns (string memory) {\n        return green(vm.toString(self));\n    }\n\n    function green(int256 self) internal pure returns (string memory) {\n        return green(vm.toString(self));\n    }\n\n    function green(address self) internal pure returns (string memory) {\n        return green(vm.toString(self));\n    }\n\n    function green(bool self) internal pure returns (string memory) {\n        return green(vm.toString(self));\n    }\n\n    function greenBytes(bytes memory self) internal pure returns (string memory) {\n        return green(vm.toString(self));\n    }\n\n    function greenBytes32(bytes32 self) internal pure returns (string memory) {\n        return green(vm.toString(self));\n    }\n\n    function yellow(string memory self) internal pure returns (string memory) {\n        return styleConcat(YELLOW, self);\n    }\n\n    function yellow(uint256 self) internal pure returns (string memory) {\n        return yellow(vm.toString(self));\n    }\n\n    function yellow(int256 self) internal pure returns (string memory) {\n        return yellow(vm.toString(self));\n    }\n\n    function yellow(address self) internal pure returns (string memory) {\n        return yellow(vm.toString(self));\n    }\n\n    function yellow(bool self) internal pure returns (string memory) {\n        return yellow(vm.toString(self));\n    }\n\n    function yellowBytes(bytes memory self) internal pure returns (string memory) {\n        return yellow(vm.toString(self));\n    }\n\n    function yellowBytes32(bytes32 self) internal pure returns (string memory) {\n        return yellow(vm.toString(self));\n    }\n\n    function blue(string memory self) internal pure returns (string memory) {\n        return styleConcat(BLUE, self);\n    }\n\n    function blue(uint256 self) internal pure returns (string memory) {\n        return blue(vm.toString(self));\n    }\n\n    function blue(int256 self) internal pure returns (string memory) {\n        return blue(vm.toString(self));\n    }\n\n    function blue(address self) internal pure returns (string memory) {\n        return blue(vm.toString(self));\n    }\n\n    function blue(bool self) internal pure returns (string memory) {\n        return blue(vm.toString(self));\n    }\n\n    function blueBytes(bytes memory self) internal pure returns (string memory) {\n        return blue(vm.toString(self));\n    }\n\n    function blueBytes32(bytes32 self) internal pure returns (string memory) {\n        return blue(vm.toString(self));\n    }\n\n    function magenta(string memory self) internal pure returns (string memory) {\n        return styleConcat(MAGENTA, self);\n    }\n\n    function magenta(uint256 self) internal pure returns (string memory) {\n        return magenta(vm.toString(self));\n    }\n\n    function magenta(int256 self) internal pure returns (string memory) {\n        return magenta(vm.toString(self));\n    }\n\n    function magenta(address self) internal pure returns (string memory) {\n        return magenta(vm.toString(self));\n    }\n\n    function magenta(bool self) internal pure returns (string memory) {\n        return magenta(vm.toString(self));\n    }\n\n    function magentaBytes(bytes memory self) internal pure returns (string memory) {\n        return magenta(vm.toString(self));\n    }\n\n    function magentaBytes32(bytes32 self) internal pure returns (string memory) {\n        return magenta(vm.toString(self));\n    }\n\n    function cyan(string memory self) internal pure returns (string memory) {\n        return styleConcat(CYAN, self);\n    }\n\n    function cyan(uint256 self) internal pure returns (string memory) {\n        return cyan(vm.toString(self));\n    }\n\n    function cyan(int256 self) internal pure returns (string memory) {\n        return cyan(vm.toString(self));\n    }\n\n    function cyan(address self) internal pure returns (string memory) {\n        return cyan(vm.toString(self));\n    }\n\n    function cyan(bool self) internal pure returns (string memory) {\n        return cyan(vm.toString(self));\n    }\n\n    function cyanBytes(bytes memory self) internal pure returns (string memory) {\n        return cyan(vm.toString(self));\n    }\n\n    function cyanBytes32(bytes32 self) internal pure returns (string memory) {\n        return cyan(vm.toString(self));\n    }\n\n    function bold(string memory self) internal pure returns (string memory) {\n        return styleConcat(BOLD, self);\n    }\n\n    function bold(uint256 self) internal pure returns (string memory) {\n        return bold(vm.toString(self));\n    }\n\n    function bold(int256 self) internal pure returns (string memory) {\n        return bold(vm.toString(self));\n    }\n\n    function bold(address self) internal pure returns (string memory) {\n        return bold(vm.toString(self));\n    }\n\n    function bold(bool self) internal pure returns (string memory) {\n        return bold(vm.toString(self));\n    }\n\n    function boldBytes(bytes memory self) internal pure returns (string memory) {\n        return bold(vm.toString(self));\n    }\n\n    function boldBytes32(bytes32 self) internal pure returns (string memory) {\n        return bold(vm.toString(self));\n    }\n\n    function dim(string memory self) internal pure returns (string memory) {\n        return styleConcat(DIM, self);\n    }\n\n    function dim(uint256 self) internal pure returns (string memory) {\n        return dim(vm.toString(self));\n    }\n\n    function dim(int256 self) internal pure returns (string memory) {\n        return dim(vm.toString(self));\n    }\n\n    function dim(address self) internal pure returns (string memory) {\n        return dim(vm.toString(self));\n    }\n\n    function dim(bool self) internal pure returns (string memory) {\n        return dim(vm.toString(self));\n    }\n\n    function dimBytes(bytes memory self) internal pure returns (string memory) {\n        return dim(vm.toString(self));\n    }\n\n    function dimBytes32(bytes32 self) internal pure returns (string memory) {\n        return dim(vm.toString(self));\n    }\n\n    function italic(string memory self) internal pure returns (string memory) {\n        return styleConcat(ITALIC, self);\n    }\n\n    function italic(uint256 self) internal pure returns (string memory) {\n        return italic(vm.toString(self));\n    }\n\n    function italic(int256 self) internal pure returns (string memory) {\n        return italic(vm.toString(self));\n    }\n\n    function italic(address self) internal pure returns (string memory) {\n        return italic(vm.toString(self));\n    }\n\n    function italic(bool self) internal pure returns (string memory) {\n        return italic(vm.toString(self));\n    }\n\n    function italicBytes(bytes memory self) internal pure returns (string memory) {\n        return italic(vm.toString(self));\n    }\n\n    function italicBytes32(bytes32 self) internal pure returns (string memory) {\n        return italic(vm.toString(self));\n    }\n\n    function underline(string memory self) internal pure returns (string memory) {\n        return styleConcat(UNDERLINE, self);\n    }\n\n    function underline(uint256 self) internal pure returns (string memory) {\n        return underline(vm.toString(self));\n    }\n\n    function underline(int256 self) internal pure returns (string memory) {\n        return underline(vm.toString(self));\n    }\n\n    function underline(address self) internal pure returns (string memory) {\n        return underline(vm.toString(self));\n    }\n\n    function underline(bool self) internal pure returns (string memory) {\n        return underline(vm.toString(self));\n    }\n\n    function underlineBytes(bytes memory self) internal pure returns (string memory) {\n        return underline(vm.toString(self));\n    }\n\n    function underlineBytes32(bytes32 self) internal pure returns (string memory) {\n        return underline(vm.toString(self));\n    }\n\n    function inverse(string memory self) internal pure returns (string memory) {\n        return styleConcat(INVERSE, self);\n    }\n\n    function inverse(uint256 self) internal pure returns (string memory) {\n        return inverse(vm.toString(self));\n    }\n\n    function inverse(int256 self) internal pure returns (string memory) {\n        return inverse(vm.toString(self));\n    }\n\n    function inverse(address self) internal pure returns (string memory) {\n        return inverse(vm.toString(self));\n    }\n\n    function inverse(bool self) internal pure returns (string memory) {\n        return inverse(vm.toString(self));\n    }\n\n    function inverseBytes(bytes memory self) internal pure returns (string memory) {\n        return inverse(vm.toString(self));\n    }\n\n    function inverseBytes32(bytes32 self) internal pure returns (string memory) {\n        return inverse(vm.toString(self));\n    }\n}\n"
      },
      "lib/forge-std/src/StdUtils.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2 <0.9.0;\n\npragma experimental ABIEncoderV2;\n\nimport {IMulticall3} from \"./interfaces/IMulticall3.sol\";\nimport {MockERC20} from \"./mocks/MockERC20.sol\";\nimport {MockERC721} from \"./mocks/MockERC721.sol\";\nimport {VmSafe} from \"./Vm.sol\";\n\nabstract contract StdUtils {\n    /*//////////////////////////////////////////////////////////////////////////\n                                     CONSTANTS\n    //////////////////////////////////////////////////////////////////////////*/\n\n    IMulticall3 private constant multicall = IMulticall3(0xcA11bde05977b3631167028862bE2a173976CA11);\n    VmSafe private constant vm = VmSafe(address(uint160(uint256(keccak256(\"hevm cheat code\")))));\n    address private constant CONSOLE2_ADDRESS = 0x000000000000000000636F6e736F6c652e6c6f67;\n    uint256 private constant INT256_MIN_ABS =\n        57896044618658097711785492504343953926634992332820282019728792003956564819968;\n    uint256 private constant SECP256K1_ORDER =\n        115792089237316195423570985008687907852837564279074904382605163141518161494337;\n    uint256 private constant UINT256_MAX =\n        115792089237316195423570985008687907853269984665640564039457584007913129639935;\n\n    // Used by default when deploying with create2, https://github.com/Arachnid/deterministic-deployment-proxy.\n    address private constant CREATE2_FACTORY = 0x4e59b44847b379578588920cA78FbF26c0B4956C;\n\n    /*//////////////////////////////////////////////////////////////////////////\n                                 INTERNAL FUNCTIONS\n    //////////////////////////////////////////////////////////////////////////*/\n\n    function _bound(uint256 x, uint256 min, uint256 max) internal pure virtual returns (uint256 result) {\n        require(min <= max, \"StdUtils bound(uint256,uint256,uint256): Max is less than min.\");\n        // If x is between min and max, return x directly. This is to ensure that dictionary values\n        // do not get shifted if the min is nonzero. More info: https://github.com/foundry-rs/forge-std/issues/188\n        if (x >= min && x <= max) return x;\n\n        uint256 size = max - min + 1;\n\n        // If the value is 0, 1, 2, 3, wrap that to min, min+1, min+2, min+3. Similarly for the UINT256_MAX side.\n        // This helps ensure coverage of the min/max values.\n        if (x <= 3 && size > x) return min + x;\n        if (x >= UINT256_MAX - 3 && size > UINT256_MAX - x) return max - (UINT256_MAX - x);\n\n        // Otherwise, wrap x into the range [min, max], i.e. the range is inclusive.\n        if (x > max) {\n            uint256 diff = x - max;\n            uint256 rem = diff % size;\n            if (rem == 0) return max;\n            result = min + rem - 1;\n        } else if (x < min) {\n            uint256 diff = min - x;\n            uint256 rem = diff % size;\n            if (rem == 0) return min;\n            result = max - rem + 1;\n        }\n    }\n\n    function bound(uint256 x, uint256 min, uint256 max) internal pure virtual returns (uint256 result) {\n        result = _bound(x, min, max);\n        console2_log_StdUtils(\"Bound Result\", result);\n    }\n\n    function _bound(int256 x, int256 min, int256 max) internal pure virtual returns (int256 result) {\n        require(min <= max, \"StdUtils bound(int256,int256,int256): Max is less than min.\");\n\n        // Shifting all int256 values to uint256 to use _bound function. The range of two types are:\n        // int256 : -(2**255) ~ (2**255 - 1)\n        // uint256:     0     ~ (2**256 - 1)\n        // So, add 2**255, INT256_MIN_ABS to the integer values.\n        //\n        // If the given integer value is -2**255, we cannot use `-uint256(-x)` because of the overflow.\n        // So, use `~uint256(x) + 1` instead.\n        uint256 _x = x < 0 ? (INT256_MIN_ABS - ~uint256(x) - 1) : (uint256(x) + INT256_MIN_ABS);\n        uint256 _min = min < 0 ? (INT256_MIN_ABS - ~uint256(min) - 1) : (uint256(min) + INT256_MIN_ABS);\n        uint256 _max = max < 0 ? (INT256_MIN_ABS - ~uint256(max) - 1) : (uint256(max) + INT256_MIN_ABS);\n\n        uint256 y = _bound(_x, _min, _max);\n\n        // To move it back to int256 value, subtract INT256_MIN_ABS at here.\n        result = y < INT256_MIN_ABS ? int256(~(INT256_MIN_ABS - y) + 1) : int256(y - INT256_MIN_ABS);\n    }\n\n    function bound(int256 x, int256 min, int256 max) internal pure virtual returns (int256 result) {\n        result = _bound(x, min, max);\n        console2_log_StdUtils(\"Bound result\", vm.toString(result));\n    }\n\n    function boundPrivateKey(uint256 privateKey) internal pure virtual returns (uint256 result) {\n        result = _bound(privateKey, 1, SECP256K1_ORDER - 1);\n    }\n\n    function bytesToUint(bytes memory b) internal pure virtual returns (uint256) {\n        require(b.length <= 32, \"StdUtils bytesToUint(bytes): Bytes length exceeds 32.\");\n        return abi.decode(abi.encodePacked(new bytes(32 - b.length), b), (uint256));\n    }\n\n    /// @dev Compute the address a contract will be deployed at for a given deployer address and nonce\n    /// @notice adapted from Solmate implementation (https://github.com/Rari-Capital/solmate/blob/main/src/utils/LibRLP.sol)\n    function computeCreateAddress(address deployer, uint256 nonce) internal pure virtual returns (address) {\n        console2_log_StdUtils(\"computeCreateAddress is deprecated. Please use vm.computeCreateAddress instead.\");\n        return vm.computeCreateAddress(deployer, nonce);\n    }\n\n    function computeCreate2Address(bytes32 salt, bytes32 initcodeHash, address deployer)\n        internal\n        pure\n        virtual\n        returns (address)\n    {\n        console2_log_StdUtils(\"computeCreate2Address is deprecated. Please use vm.computeCreate2Address instead.\");\n        return vm.computeCreate2Address(salt, initcodeHash, deployer);\n    }\n\n    /// @dev returns the address of a contract created with CREATE2 using the default CREATE2 deployer\n    function computeCreate2Address(bytes32 salt, bytes32 initCodeHash) internal pure returns (address) {\n        console2_log_StdUtils(\"computeCreate2Address is deprecated. Please use vm.computeCreate2Address instead.\");\n        return vm.computeCreate2Address(salt, initCodeHash);\n    }\n\n    /// @dev returns an initialized mock ERC20 contract\n    function deployMockERC20(string memory name, string memory symbol, uint8 decimals)\n        internal\n        returns (MockERC20 mock)\n    {\n        mock = new MockERC20();\n        mock.initialize(name, symbol, decimals);\n    }\n\n    /// @dev returns an initialized mock ERC721 contract\n    function deployMockERC721(string memory name, string memory symbol) internal returns (MockERC721 mock) {\n        mock = new MockERC721();\n        mock.initialize(name, symbol);\n    }\n\n    /// @dev returns the hash of the init code (creation code + no args) used in CREATE2 with no constructor arguments\n    /// @param creationCode the creation code of a contract C, as returned by type(C).creationCode\n    function hashInitCode(bytes memory creationCode) internal pure returns (bytes32) {\n        return hashInitCode(creationCode, \"\");\n    }\n\n    /// @dev returns the hash of the init code (creation code + ABI-encoded args) used in CREATE2\n    /// @param creationCode the creation code of a contract C, as returned by type(C).creationCode\n    /// @param args the ABI-encoded arguments to the constructor of C\n    function hashInitCode(bytes memory creationCode, bytes memory args) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(creationCode, args));\n    }\n\n    // Performs a single call with Multicall3 to query the ERC-20 token balances of the given addresses.\n    function getTokenBalances(address token, address[] memory addresses)\n        internal\n        virtual\n        returns (uint256[] memory balances)\n    {\n        uint256 tokenCodeSize;\n        assembly {\n            tokenCodeSize := extcodesize(token)\n        }\n        require(tokenCodeSize > 0, \"StdUtils getTokenBalances(address,address[]): Token address is not a contract.\");\n\n        // ABI encode the aggregate call to Multicall3.\n        uint256 length = addresses.length;\n        IMulticall3.Call[] memory calls = new IMulticall3.Call[](length);\n        for (uint256 i = 0; i < length; ++i) {\n            // 0x70a08231 = bytes4(\"balanceOf(address)\"))\n            calls[i] = IMulticall3.Call({target: token, callData: abi.encodeWithSelector(0x70a08231, (addresses[i]))});\n        }\n\n        // Make the aggregate call.\n        (, bytes[] memory returnData) = multicall.aggregate(calls);\n\n        // ABI decode the return data and return the balances.\n        balances = new uint256[](length);\n        for (uint256 i = 0; i < length; ++i) {\n            balances[i] = abi.decode(returnData[i], (uint256));\n        }\n    }\n\n    /*//////////////////////////////////////////////////////////////////////////\n                                 PRIVATE FUNCTIONS\n    //////////////////////////////////////////////////////////////////////////*/\n\n    function addressFromLast20Bytes(bytes32 bytesValue) private pure returns (address) {\n        return address(uint160(uint256(bytesValue)));\n    }\n\n    // This section is used to prevent the compilation of console, which shortens the compilation time when console is\n    // not used elsewhere. We also trick the compiler into letting us make the console log methods as `pure` to avoid\n    // any breaking changes to function signatures.\n    function _castLogPayloadViewToPure(function(bytes memory) internal view fnIn)\n        internal\n        pure\n        returns (function(bytes memory) internal pure fnOut)\n    {\n        assembly {\n            fnOut := fnIn\n        }\n    }\n\n    function _sendLogPayload(bytes memory payload) internal pure {\n        _castLogPayloadViewToPure(_sendLogPayloadView)(payload);\n    }\n\n    function _sendLogPayloadView(bytes memory payload) private view {\n        uint256 payloadLength = payload.length;\n        address consoleAddress = CONSOLE2_ADDRESS;\n        /// @solidity memory-safe-assembly\n        assembly {\n            let payloadStart := add(payload, 32)\n            let r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\n        }\n    }\n\n    function console2_log_StdUtils(string memory p0) private pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n    }\n\n    function console2_log_StdUtils(string memory p0, uint256 p1) private pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256)\", p0, p1));\n    }\n\n    function console2_log_StdUtils(string memory p0, string memory p1) private pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string)\", p0, p1));\n    }\n}\n"
      },
      "lib/forge-std/src/Vm.sol": {
        "content": "// Automatically @generated by scripts/vm.py. Do not modify manually.\n\n// SPDX-License-Identifier: MIT OR Apache-2.0\npragma solidity >=0.6.2 <0.9.0;\npragma experimental ABIEncoderV2;\n\n/// The `VmSafe` interface does not allow manipulation of the EVM state or other actions that may\n/// result in Script simulations differing from on-chain execution. It is recommended to only use\n/// these cheats in scripts.\ninterface VmSafe {\n    /// A modification applied to either `msg.sender` or `tx.origin`. Returned by `readCallers`.\n    enum CallerMode {\n        // No caller modification is currently active.\n        None,\n        // A one time broadcast triggered by a `vm.broadcast()` call is currently active.\n        Broadcast,\n        // A recurrent broadcast triggered by a `vm.startBroadcast()` call is currently active.\n        RecurrentBroadcast,\n        // A one time prank triggered by a `vm.prank()` call is currently active.\n        Prank,\n        // A recurrent prank triggered by a `vm.startPrank()` call is currently active.\n        RecurrentPrank\n    }\n\n    /// The kind of account access that occurred.\n    enum AccountAccessKind {\n        // The account was called.\n        Call,\n        // The account was called via delegatecall.\n        DelegateCall,\n        // The account was called via callcode.\n        CallCode,\n        // The account was called via staticcall.\n        StaticCall,\n        // The account was created.\n        Create,\n        // The account was selfdestructed.\n        SelfDestruct,\n        // Synthetic access indicating the current context has resumed after a previous sub-context (AccountAccess).\n        Resume,\n        // The account's balance was read.\n        Balance,\n        // The account's codesize was read.\n        Extcodesize,\n        // The account's codehash was read.\n        Extcodehash,\n        // The account's code was copied.\n        Extcodecopy\n    }\n\n    /// An Ethereum log. Returned by `getRecordedLogs`.\n    struct Log {\n        // The topics of the log, including the signature, if any.\n        bytes32[] topics;\n        // The raw data of the log.\n        bytes data;\n        // The address of the log's emitter.\n        address emitter;\n    }\n\n    /// An RPC URL and its alias. Returned by `rpcUrlStructs`.\n    struct Rpc {\n        // The alias of the RPC URL.\n        string key;\n        // The RPC URL.\n        string url;\n    }\n\n    /// An RPC log object. Returned by `eth_getLogs`.\n    struct EthGetLogs {\n        // The address of the log's emitter.\n        address emitter;\n        // The topics of the log, including the signature, if any.\n        bytes32[] topics;\n        // The raw data of the log.\n        bytes data;\n        // The block hash.\n        bytes32 blockHash;\n        // The block number.\n        uint64 blockNumber;\n        // The transaction hash.\n        bytes32 transactionHash;\n        // The transaction index in the block.\n        uint64 transactionIndex;\n        // The log index.\n        uint256 logIndex;\n        // Whether the log was removed.\n        bool removed;\n    }\n\n    /// A single entry in a directory listing. Returned by `readDir`.\n    struct DirEntry {\n        // The error message, if any.\n        string errorMessage;\n        // The path of the entry.\n        string path;\n        // The depth of the entry.\n        uint64 depth;\n        // Whether the entry is a directory.\n        bool isDir;\n        // Whether the entry is a symlink.\n        bool isSymlink;\n    }\n\n    /// Metadata information about a file.\n    /// This structure is returned from the `fsMetadata` function and represents known\n    /// metadata about a file such as its permissions, size, modification\n    /// times, etc.\n    struct FsMetadata {\n        // True if this metadata is for a directory.\n        bool isDir;\n        // True if this metadata is for a symlink.\n        bool isSymlink;\n        // The size of the file, in bytes, this metadata is for.\n        uint256 length;\n        // True if this metadata is for a readonly (unwritable) file.\n        bool readOnly;\n        // The last modification time listed in this metadata.\n        uint256 modified;\n        // The last access time of this metadata.\n        uint256 accessed;\n        // The creation time listed in this metadata.\n        uint256 created;\n    }\n\n    /// A wallet with a public and private key.\n    struct Wallet {\n        // The wallet's address.\n        address addr;\n        // The wallet's public key `X`.\n        uint256 publicKeyX;\n        // The wallet's public key `Y`.\n        uint256 publicKeyY;\n        // The wallet's private key.\n        uint256 privateKey;\n    }\n\n    /// The result of a `tryFfi` call.\n    struct FfiResult {\n        // The exit code of the call.\n        int32 exitCode;\n        // The optionally hex-decoded `stdout` data.\n        bytes stdout;\n        // The `stderr` data.\n        bytes stderr;\n    }\n\n    /// Information on the chain and fork.\n    struct ChainInfo {\n        // The fork identifier. Set to zero if no fork is active.\n        uint256 forkId;\n        // The chain ID of the current fork.\n        uint256 chainId;\n    }\n\n    /// The result of a `stopAndReturnStateDiff` call.\n    struct AccountAccess {\n        // The chain and fork the access occurred.\n        ChainInfo chainInfo;\n        // The kind of account access that determines what the account is.\n        // If kind is Call, DelegateCall, StaticCall or CallCode, then the account is the callee.\n        // If kind is Create, then the account is the newly created account.\n        // If kind is SelfDestruct, then the account is the selfdestruct recipient.\n        // If kind is a Resume, then account represents a account context that has resumed.\n        AccountAccessKind kind;\n        // The account that was accessed.\n        // It's either the account created, callee or a selfdestruct recipient for CREATE, CALL or SELFDESTRUCT.\n        address account;\n        // What accessed the account.\n        address accessor;\n        // If the account was initialized or empty prior to the access.\n        // An account is considered initialized if it has code, a\n        // non-zero nonce, or a non-zero balance.\n        bool initialized;\n        // The previous balance of the accessed account.\n        uint256 oldBalance;\n        // The potential new balance of the accessed account.\n        // That is, all balance changes are recorded here, even if reverts occurred.\n        uint256 newBalance;\n        // Code of the account deployed by CREATE.\n        bytes deployedCode;\n        // Value passed along with the account access\n        uint256 value;\n        // Input data provided to the CREATE or CALL\n        bytes data;\n        // If this access reverted in either the current or parent context.\n        bool reverted;\n        // An ordered list of storage accesses made during an account access operation.\n        StorageAccess[] storageAccesses;\n        // Call depth traversed during the recording of state differences\n        uint64 depth;\n    }\n\n    /// The storage accessed during an `AccountAccess`.\n    struct StorageAccess {\n        // The account whose storage was accessed.\n        address account;\n        // The slot that was accessed.\n        bytes32 slot;\n        // If the access was a write.\n        bool isWrite;\n        // The previous value of the slot.\n        bytes32 previousValue;\n        // The new value of the slot.\n        bytes32 newValue;\n        // If the access was reverted.\n        bool reverted;\n    }\n\n    // ======== Environment ========\n\n    /// Gets the environment variable `name` and parses it as `address`.\n    /// Reverts if the variable was not found or could not be parsed.\n    function envAddress(string calldata name) external view returns (address value);\n\n    /// Gets the environment variable `name` and parses it as an array of `address`, delimited by `delim`.\n    /// Reverts if the variable was not found or could not be parsed.\n    function envAddress(string calldata name, string calldata delim) external view returns (address[] memory value);\n\n    /// Gets the environment variable `name` and parses it as `bool`.\n    /// Reverts if the variable was not found or could not be parsed.\n    function envBool(string calldata name) external view returns (bool value);\n\n    /// Gets the environment variable `name` and parses it as an array of `bool`, delimited by `delim`.\n    /// Reverts if the variable was not found or could not be parsed.\n    function envBool(string calldata name, string calldata delim) external view returns (bool[] memory value);\n\n    /// Gets the environment variable `name` and parses it as `bytes32`.\n    /// Reverts if the variable was not found or could not be parsed.\n    function envBytes32(string calldata name) external view returns (bytes32 value);\n\n    /// Gets the environment variable `name` and parses it as an array of `bytes32`, delimited by `delim`.\n    /// Reverts if the variable was not found or could not be parsed.\n    function envBytes32(string calldata name, string calldata delim) external view returns (bytes32[] memory value);\n\n    /// Gets the environment variable `name` and parses it as `bytes`.\n    /// Reverts if the variable was not found or could not be parsed.\n    function envBytes(string calldata name) external view returns (bytes memory value);\n\n    /// Gets the environment variable `name` and parses it as an array of `bytes`, delimited by `delim`.\n    /// Reverts if the variable was not found or could not be parsed.\n    function envBytes(string calldata name, string calldata delim) external view returns (bytes[] memory value);\n\n    /// Gets the environment variable `name` and parses it as `int256`.\n    /// Reverts if the variable was not found or could not be parsed.\n    function envInt(string calldata name) external view returns (int256 value);\n\n    /// Gets the environment variable `name` and parses it as an array of `int256`, delimited by `delim`.\n    /// Reverts if the variable was not found or could not be parsed.\n    function envInt(string calldata name, string calldata delim) external view returns (int256[] memory value);\n\n    /// Gets the environment variable `name` and parses it as `bool`.\n    /// Reverts if the variable could not be parsed.\n    /// Returns `defaultValue` if the variable was not found.\n    function envOr(string calldata name, bool defaultValue) external view returns (bool value);\n\n    /// Gets the environment variable `name` and parses it as `uint256`.\n    /// Reverts if the variable could not be parsed.\n    /// Returns `defaultValue` if the variable was not found.\n    function envOr(string calldata name, uint256 defaultValue) external view returns (uint256 value);\n\n    /// Gets the environment variable `name` and parses it as an array of `address`, delimited by `delim`.\n    /// Reverts if the variable could not be parsed.\n    /// Returns `defaultValue` if the variable was not found.\n    function envOr(string calldata name, string calldata delim, address[] calldata defaultValue)\n        external\n        view\n        returns (address[] memory value);\n\n    /// Gets the environment variable `name` and parses it as an array of `bytes32`, delimited by `delim`.\n    /// Reverts if the variable could not be parsed.\n    /// Returns `defaultValue` if the variable was not found.\n    function envOr(string calldata name, string calldata delim, bytes32[] calldata defaultValue)\n        external\n        view\n        returns (bytes32[] memory value);\n\n    /// Gets the environment variable `name` and parses it as an array of `string`, delimited by `delim`.\n    /// Reverts if the variable could not be parsed.\n    /// Returns `defaultValue` if the variable was not found.\n    function envOr(string calldata name, string calldata delim, string[] calldata defaultValue)\n        external\n        view\n        returns (string[] memory value);\n\n    /// Gets the environment variable `name` and parses it as an array of `bytes`, delimited by `delim`.\n    /// Reverts if the variable could not be parsed.\n    /// Returns `defaultValue` if the variable was not found.\n    function envOr(string calldata name, string calldata delim, bytes[] calldata defaultValue)\n        external\n        view\n        returns (bytes[] memory value);\n\n    /// Gets the environment variable `name` and parses it as `int256`.\n    /// Reverts if the variable could not be parsed.\n    /// Returns `defaultValue` if the variable was not found.\n    function envOr(string calldata name, int256 defaultValue) external view returns (int256 value);\n\n    /// Gets the environment variable `name` and parses it as `address`.\n    /// Reverts if the variable could not be parsed.\n    /// Returns `defaultValue` if the variable was not found.\n    function envOr(string calldata name, address defaultValue) external view returns (address value);\n\n    /// Gets the environment variable `name` and parses it as `bytes32`.\n    /// Reverts if the variable could not be parsed.\n    /// Returns `defaultValue` if the variable was not found.\n    function envOr(string calldata name, bytes32 defaultValue) external view returns (bytes32 value);\n\n    /// Gets the environment variable `name` and parses it as `string`.\n    /// Reverts if the variable could not be parsed.\n    /// Returns `defaultValue` if the variable was not found.\n    function envOr(string calldata name, string calldata defaultValue) external view returns (string memory value);\n\n    /// Gets the environment variable `name` and parses it as `bytes`.\n    /// Reverts if the variable could not be parsed.\n    /// Returns `defaultValue` if the variable was not found.\n    function envOr(string calldata name, bytes calldata defaultValue) external view returns (bytes memory value);\n\n    /// Gets the environment variable `name` and parses it as an array of `bool`, delimited by `delim`.\n    /// Reverts if the variable could not be parsed.\n    /// Returns `defaultValue` if the variable was not found.\n    function envOr(string calldata name, string calldata delim, bool[] calldata defaultValue)\n        external\n        view\n        returns (bool[] memory value);\n\n    /// Gets the environment variable `name` and parses it as an array of `uint256`, delimited by `delim`.\n    /// Reverts if the variable could not be parsed.\n    /// Returns `defaultValue` if the variable was not found.\n    function envOr(string calldata name, string calldata delim, uint256[] calldata defaultValue)\n        external\n        view\n        returns (uint256[] memory value);\n\n    /// Gets the environment variable `name` and parses it as an array of `int256`, delimited by `delim`.\n    /// Reverts if the variable could not be parsed.\n    /// Returns `defaultValue` if the variable was not found.\n    function envOr(string calldata name, string calldata delim, int256[] calldata defaultValue)\n        external\n        view\n        returns (int256[] memory value);\n\n    /// Gets the environment variable `name` and parses it as `string`.\n    /// Reverts if the variable was not found or could not be parsed.\n    function envString(string calldata name) external view returns (string memory value);\n\n    /// Gets the environment variable `name` and parses it as an array of `string`, delimited by `delim`.\n    /// Reverts if the variable was not found or could not be parsed.\n    function envString(string calldata name, string calldata delim) external view returns (string[] memory value);\n\n    /// Gets the environment variable `name` and parses it as `uint256`.\n    /// Reverts if the variable was not found or could not be parsed.\n    function envUint(string calldata name) external view returns (uint256 value);\n\n    /// Gets the environment variable `name` and parses it as an array of `uint256`, delimited by `delim`.\n    /// Reverts if the variable was not found or could not be parsed.\n    function envUint(string calldata name, string calldata delim) external view returns (uint256[] memory value);\n\n    /// Sets environment variables.\n    function setEnv(string calldata name, string calldata value) external;\n\n    // ======== EVM ========\n\n    /// Gets all accessed reads and write slot from a `vm.record` session, for a given address.\n    function accesses(address target) external returns (bytes32[] memory readSlots, bytes32[] memory writeSlots);\n\n    /// Gets the address for a given private key.\n    function addr(uint256 privateKey) external pure returns (address keyAddr);\n\n    /// Gets all the logs according to specified filter.\n    function eth_getLogs(uint256 fromBlock, uint256 toBlock, address target, bytes32[] calldata topics)\n        external\n        returns (EthGetLogs[] memory logs);\n\n    /// Gets the current `block.number`.\n    /// You should use this instead of `block.number` if you use `vm.roll`, as `block.number` is assumed to be constant across a transaction,\n    /// and as a result will get optimized out by the compiler.\n    /// See https://github.com/foundry-rs/foundry/issues/6180\n    function getBlockNumber() external view returns (uint256 height);\n\n    /// Gets the current `block.timestamp`.\n    /// You should use this instead of `block.timestamp` if you use `vm.warp`, as `block.timestamp` is assumed to be constant across a transaction,\n    /// and as a result will get optimized out by the compiler.\n    /// See https://github.com/foundry-rs/foundry/issues/6180\n    function getBlockTimestamp() external view returns (uint256 timestamp);\n\n    /// Gets the map key and parent of a mapping at a given slot, for a given address.\n    function getMappingKeyAndParentOf(address target, bytes32 elementSlot)\n        external\n        returns (bool found, bytes32 key, bytes32 parent);\n\n    /// Gets the number of elements in the mapping at the given slot, for a given address.\n    function getMappingLength(address target, bytes32 mappingSlot) external returns (uint256 length);\n\n    /// Gets the elements at index idx of the mapping at the given slot, for a given address. The\n    /// index must be less than the length of the mapping (i.e. the number of keys in the mapping).\n    function getMappingSlotAt(address target, bytes32 mappingSlot, uint256 idx) external returns (bytes32 value);\n\n    /// Gets the nonce of an account.\n    function getNonce(address account) external view returns (uint64 nonce);\n\n    /// Gets all the recorded logs.\n    function getRecordedLogs() external returns (Log[] memory logs);\n\n    /// Loads a storage slot from an address.\n    function load(address target, bytes32 slot) external view returns (bytes32 data);\n\n    /// Pauses gas metering (i.e. gas usage is not counted). Noop if already paused.\n    function pauseGasMetering() external;\n\n    /// Records all storage reads and writes.\n    function record() external;\n\n    /// Record all the transaction logs.\n    function recordLogs() external;\n\n    /// Resumes gas metering (i.e. gas usage is counted again). Noop if already on.\n    function resumeGasMetering() external;\n\n    /// Performs an Ethereum JSON-RPC request to the current fork URL.\n    function rpc(string calldata method, string calldata params) external returns (bytes memory data);\n\n    /// Signs `digest` with `privateKey` using the secp256r1 curve.\n    function signP256(uint256 privateKey, bytes32 digest) external pure returns (bytes32 r, bytes32 s);\n\n    /// Signs `digest` with `privateKey` using the secp256k1 curve.\n    function sign(uint256 privateKey, bytes32 digest) external pure returns (uint8 v, bytes32 r, bytes32 s);\n\n    /// Starts recording all map SSTOREs for later retrieval.\n    function startMappingRecording() external;\n\n    /// Record all account accesses as part of CREATE, CALL or SELFDESTRUCT opcodes in order,\n    /// along with the context of the calls\n    function startStateDiffRecording() external;\n\n    /// Returns an ordered array of all account accesses from a `vm.startStateDiffRecording` session.\n    function stopAndReturnStateDiff() external returns (AccountAccess[] memory accountAccesses);\n\n    /// Stops recording all map SSTOREs for later retrieval and clears the recorded data.\n    function stopMappingRecording() external;\n\n    // ======== Filesystem ========\n\n    /// Closes file for reading, resetting the offset and allowing to read it from beginning with readLine.\n    /// `path` is relative to the project root.\n    function closeFile(string calldata path) external;\n\n    /// Copies the contents of one file to another. This function will **overwrite** the contents of `to`.\n    /// On success, the total number of bytes copied is returned and it is equal to the length of the `to` file as reported by `metadata`.\n    /// Both `from` and `to` are relative to the project root.\n    function copyFile(string calldata from, string calldata to) external returns (uint64 copied);\n\n    /// Creates a new, empty directory at the provided path.\n    /// This cheatcode will revert in the following situations, but is not limited to just these cases:\n    /// - User lacks permissions to modify `path`.\n    /// - A parent of the given path doesn't exist and `recursive` is false.\n    /// - `path` already exists and `recursive` is false.\n    /// `path` is relative to the project root.\n    function createDir(string calldata path, bool recursive) external;\n\n    /// Returns true if the given path points to an existing entity, else returns false.\n    function exists(string calldata path) external returns (bool result);\n\n    /// Performs a foreign function call via the terminal.\n    function ffi(string[] calldata commandInput) external returns (bytes memory result);\n\n    /// Given a path, query the file system to get information about a file, directory, etc.\n    function fsMetadata(string calldata path) external view returns (FsMetadata memory metadata);\n\n    /// Gets the creation bytecode from an artifact file. Takes in the relative path to the json file.\n    function getCode(string calldata artifactPath) external view returns (bytes memory creationBytecode);\n\n    /// Gets the deployed bytecode from an artifact file. Takes in the relative path to the json file.\n    function getDeployedCode(string calldata artifactPath) external view returns (bytes memory runtimeBytecode);\n\n    /// Returns true if the path exists on disk and is pointing at a directory, else returns false.\n    function isDir(string calldata path) external returns (bool result);\n\n    /// Returns true if the path exists on disk and is pointing at a regular file, else returns false.\n    function isFile(string calldata path) external returns (bool result);\n\n    /// Get the path of the current project root.\n    function projectRoot() external view returns (string memory path);\n\n    /// Reads the directory at the given path recursively, up to `maxDepth`.\n    /// `maxDepth` defaults to 1, meaning only the direct children of the given directory will be returned.\n    /// Follows symbolic links if `followLinks` is true.\n    function readDir(string calldata path) external view returns (DirEntry[] memory entries);\n\n    /// See `readDir(string)`.\n    function readDir(string calldata path, uint64 maxDepth) external view returns (DirEntry[] memory entries);\n\n    /// See `readDir(string)`.\n    function readDir(string calldata path, uint64 maxDepth, bool followLinks)\n        external\n        view\n        returns (DirEntry[] memory entries);\n\n    /// Reads the entire content of file to string. `path` is relative to the project root.\n    function readFile(string calldata path) external view returns (string memory data);\n\n    /// Reads the entire content of file as binary. `path` is relative to the project root.\n    function readFileBinary(string calldata path) external view returns (bytes memory data);\n\n    /// Reads next line of file to string.\n    function readLine(string calldata path) external view returns (string memory line);\n\n    /// Reads a symbolic link, returning the path that the link points to.\n    /// This cheatcode will revert in the following situations, but is not limited to just these cases:\n    /// - `path` is not a symbolic link.\n    /// - `path` does not exist.\n    function readLink(string calldata linkPath) external view returns (string memory targetPath);\n\n    /// Removes a directory at the provided path.\n    /// This cheatcode will revert in the following situations, but is not limited to just these cases:\n    /// - `path` doesn't exist.\n    /// - `path` isn't a directory.\n    /// - User lacks permissions to modify `path`.\n    /// - The directory is not empty and `recursive` is false.\n    /// `path` is relative to the project root.\n    function removeDir(string calldata path, bool recursive) external;\n\n    /// Removes a file from the filesystem.\n    /// This cheatcode will revert in the following situations, but is not limited to just these cases:\n    /// - `path` points to a directory.\n    /// - The file doesn't exist.\n    /// - The user lacks permissions to remove the file.\n    /// `path` is relative to the project root.\n    function removeFile(string calldata path) external;\n\n    /// Performs a foreign function call via terminal and returns the exit code, stdout, and stderr.\n    function tryFfi(string[] calldata commandInput) external returns (FfiResult memory result);\n\n    /// Returns the time since unix epoch in milliseconds.\n    function unixTime() external returns (uint256 milliseconds);\n\n    /// Writes data to file, creating a file if it does not exist, and entirely replacing its contents if it does.\n    /// `path` is relative to the project root.\n    function writeFile(string calldata path, string calldata data) external;\n\n    /// Writes binary data to a file, creating a file if it does not exist, and entirely replacing its contents if it does.\n    /// `path` is relative to the project root.\n    function writeFileBinary(string calldata path, bytes calldata data) external;\n\n    /// Writes line to file, creating a file if it does not exist.\n    /// `path` is relative to the project root.\n    function writeLine(string calldata path, string calldata data) external;\n\n    // ======== JSON ========\n\n    /// Checks if `key` exists in a JSON object\n    /// `keyExists` is being deprecated in favor of `keyExistsJson`. It will be removed in future versions.\n    function keyExists(string calldata json, string calldata key) external view returns (bool);\n\n    /// Checks if `key` exists in a JSON object.\n    function keyExistsJson(string calldata json, string calldata key) external view returns (bool);\n\n    /// Parses a string of JSON data at `key` and coerces it to `address`.\n    function parseJsonAddress(string calldata json, string calldata key) external pure returns (address);\n\n    /// Parses a string of JSON data at `key` and coerces it to `address[]`.\n    function parseJsonAddressArray(string calldata json, string calldata key)\n        external\n        pure\n        returns (address[] memory);\n\n    /// Parses a string of JSON data at `key` and coerces it to `bool`.\n    function parseJsonBool(string calldata json, string calldata key) external pure returns (bool);\n\n    /// Parses a string of JSON data at `key` and coerces it to `bool[]`.\n    function parseJsonBoolArray(string calldata json, string calldata key) external pure returns (bool[] memory);\n\n    /// Parses a string of JSON data at `key` and coerces it to `bytes`.\n    function parseJsonBytes(string calldata json, string calldata key) external pure returns (bytes memory);\n\n    /// Parses a string of JSON data at `key` and coerces it to `bytes32`.\n    function parseJsonBytes32(string calldata json, string calldata key) external pure returns (bytes32);\n\n    /// Parses a string of JSON data at `key` and coerces it to `bytes32[]`.\n    function parseJsonBytes32Array(string calldata json, string calldata key)\n        external\n        pure\n        returns (bytes32[] memory);\n\n    /// Parses a string of JSON data at `key` and coerces it to `bytes[]`.\n    function parseJsonBytesArray(string calldata json, string calldata key) external pure returns (bytes[] memory);\n\n    /// Parses a string of JSON data at `key` and coerces it to `int256`.\n    function parseJsonInt(string calldata json, string calldata key) external pure returns (int256);\n\n    /// Parses a string of JSON data at `key` and coerces it to `int256[]`.\n    function parseJsonIntArray(string calldata json, string calldata key) external pure returns (int256[] memory);\n\n    /// Returns an array of all the keys in a JSON object.\n    function parseJsonKeys(string calldata json, string calldata key) external pure returns (string[] memory keys);\n\n    /// Parses a string of JSON data at `key` and coerces it to `string`.\n    function parseJsonString(string calldata json, string calldata key) external pure returns (string memory);\n\n    /// Parses a string of JSON data at `key` and coerces it to `string[]`.\n    function parseJsonStringArray(string calldata json, string calldata key) external pure returns (string[] memory);\n\n    /// Parses a string of JSON data at `key` and coerces it to `uint256`.\n    function parseJsonUint(string calldata json, string calldata key) external pure returns (uint256);\n\n    /// Parses a string of JSON data at `key` and coerces it to `uint256[]`.\n    function parseJsonUintArray(string calldata json, string calldata key) external pure returns (uint256[] memory);\n\n    /// ABI-encodes a JSON object.\n    function parseJson(string calldata json) external pure returns (bytes memory abiEncodedData);\n\n    /// ABI-encodes a JSON object at `key`.\n    function parseJson(string calldata json, string calldata key) external pure returns (bytes memory abiEncodedData);\n\n    /// See `serializeJson`.\n    function serializeAddress(string calldata objectKey, string calldata valueKey, address value)\n        external\n        returns (string memory json);\n\n    /// See `serializeJson`.\n    function serializeAddress(string calldata objectKey, string calldata valueKey, address[] calldata values)\n        external\n        returns (string memory json);\n\n    /// See `serializeJson`.\n    function serializeBool(string calldata objectKey, string calldata valueKey, bool value)\n        external\n        returns (string memory json);\n\n    /// See `serializeJson`.\n    function serializeBool(string calldata objectKey, string calldata valueKey, bool[] calldata values)\n        external\n        returns (string memory json);\n\n    /// See `serializeJson`.\n    function serializeBytes32(string calldata objectKey, string calldata valueKey, bytes32 value)\n        external\n        returns (string memory json);\n\n    /// See `serializeJson`.\n    function serializeBytes32(string calldata objectKey, string calldata valueKey, bytes32[] calldata values)\n        external\n        returns (string memory json);\n\n    /// See `serializeJson`.\n    function serializeBytes(string calldata objectKey, string calldata valueKey, bytes calldata value)\n        external\n        returns (string memory json);\n\n    /// See `serializeJson`.\n    function serializeBytes(string calldata objectKey, string calldata valueKey, bytes[] calldata values)\n        external\n        returns (string memory json);\n\n    /// See `serializeJson`.\n    function serializeInt(string calldata objectKey, string calldata valueKey, int256 value)\n        external\n        returns (string memory json);\n\n    /// See `serializeJson`.\n    function serializeInt(string calldata objectKey, string calldata valueKey, int256[] calldata values)\n        external\n        returns (string memory json);\n\n    /// Serializes a key and value to a JSON object stored in-memory that can be later written to a file.\n    /// Returns the stringified version of the specific JSON file up to that moment.\n    function serializeJson(string calldata objectKey, string calldata value) external returns (string memory json);\n\n    /// See `serializeJson`.\n    function serializeString(string calldata objectKey, string calldata valueKey, string calldata value)\n        external\n        returns (string memory json);\n\n    /// See `serializeJson`.\n    function serializeString(string calldata objectKey, string calldata valueKey, string[] calldata values)\n        external\n        returns (string memory json);\n\n    /// See `serializeJson`.\n    function serializeUint(string calldata objectKey, string calldata valueKey, uint256 value)\n        external\n        returns (string memory json);\n\n    /// See `serializeJson`.\n    function serializeUint(string calldata objectKey, string calldata valueKey, uint256[] calldata values)\n        external\n        returns (string memory json);\n\n    /// Write a serialized JSON object to a file. If the file exists, it will be overwritten.\n    function writeJson(string calldata json, string calldata path) external;\n\n    /// Write a serialized JSON object to an **existing** JSON file, replacing a value with key = <value_key.>\n    /// This is useful to replace a specific value of a JSON file, without having to parse the entire thing.\n    function writeJson(string calldata json, string calldata path, string calldata valueKey) external;\n\n    // ======== Scripting ========\n\n    /// Using the address that calls the test contract, has the next call (at this call depth only)\n    /// create a transaction that can later be signed and sent onchain.\n    function broadcast() external;\n\n    /// Has the next call (at this call depth only) create a transaction with the address provided\n    /// as the sender that can later be signed and sent onchain.\n    function broadcast(address signer) external;\n\n    /// Has the next call (at this call depth only) create a transaction with the private key\n    /// provided as the sender that can later be signed and sent onchain.\n    function broadcast(uint256 privateKey) external;\n\n    /// Using the address that calls the test contract, has all subsequent calls\n    /// (at this call depth only) create transactions that can later be signed and sent onchain.\n    function startBroadcast() external;\n\n    /// Has all subsequent calls (at this call depth only) create transactions with the address\n    /// provided that can later be signed and sent onchain.\n    function startBroadcast(address signer) external;\n\n    /// Has all subsequent calls (at this call depth only) create transactions with the private key\n    /// provided that can later be signed and sent onchain.\n    function startBroadcast(uint256 privateKey) external;\n\n    /// Stops collecting onchain transactions.\n    function stopBroadcast() external;\n\n    // ======== String ========\n\n    /// Parses the given `string` into an `address`.\n    function parseAddress(string calldata stringifiedValue) external pure returns (address parsedValue);\n\n    /// Parses the given `string` into a `bool`.\n    function parseBool(string calldata stringifiedValue) external pure returns (bool parsedValue);\n\n    /// Parses the given `string` into `bytes`.\n    function parseBytes(string calldata stringifiedValue) external pure returns (bytes memory parsedValue);\n\n    /// Parses the given `string` into a `bytes32`.\n    function parseBytes32(string calldata stringifiedValue) external pure returns (bytes32 parsedValue);\n\n    /// Parses the given `string` into a `int256`.\n    function parseInt(string calldata stringifiedValue) external pure returns (int256 parsedValue);\n\n    /// Parses the given `string` into a `uint256`.\n    function parseUint(string calldata stringifiedValue) external pure returns (uint256 parsedValue);\n\n    /// Replaces occurrences of `from` in the given `string` with `to`.\n    function replace(string calldata input, string calldata from, string calldata to)\n        external\n        pure\n        returns (string memory output);\n\n    /// Splits the given `string` into an array of strings divided by the `delimiter`.\n    function split(string calldata input, string calldata delimiter) external pure returns (string[] memory outputs);\n\n    /// Converts the given `string` value to Lowercase.\n    function toLowercase(string calldata input) external pure returns (string memory output);\n\n    /// Converts the given value to a `string`.\n    function toString(address value) external pure returns (string memory stringifiedValue);\n\n    /// Converts the given value to a `string`.\n    function toString(bytes calldata value) external pure returns (string memory stringifiedValue);\n\n    /// Converts the given value to a `string`.\n    function toString(bytes32 value) external pure returns (string memory stringifiedValue);\n\n    /// Converts the given value to a `string`.\n    function toString(bool value) external pure returns (string memory stringifiedValue);\n\n    /// Converts the given value to a `string`.\n    function toString(uint256 value) external pure returns (string memory stringifiedValue);\n\n    /// Converts the given value to a `string`.\n    function toString(int256 value) external pure returns (string memory stringifiedValue);\n\n    /// Converts the given `string` value to Uppercase.\n    function toUppercase(string calldata input) external pure returns (string memory output);\n\n    /// Trims leading and trailing whitespace from the given `string` value.\n    function trim(string calldata input) external pure returns (string memory output);\n\n    // ======== Testing ========\n\n    /// Compares two `uint256` values. Expects difference to be less than or equal to `maxDelta`.\n    /// Formats values with decimals in failure message.\n    function assertApproxEqAbsDecimal(uint256 left, uint256 right, uint256 maxDelta, uint256 decimals) external pure;\n\n    /// Compares two `uint256` values. Expects difference to be less than or equal to `maxDelta`.\n    /// Formats values with decimals in failure message. Includes error message into revert string on failure.\n    function assertApproxEqAbsDecimal(\n        uint256 left,\n        uint256 right,\n        uint256 maxDelta,\n        uint256 decimals,\n        string calldata error\n    ) external pure;\n\n    /// Compares two `int256` values. Expects difference to be less than or equal to `maxDelta`.\n    /// Formats values with decimals in failure message.\n    function assertApproxEqAbsDecimal(int256 left, int256 right, uint256 maxDelta, uint256 decimals) external pure;\n\n    /// Compares two `int256` values. Expects difference to be less than or equal to `maxDelta`.\n    /// Formats values with decimals in failure message. Includes error message into revert string on failure.\n    function assertApproxEqAbsDecimal(\n        int256 left,\n        int256 right,\n        uint256 maxDelta,\n        uint256 decimals,\n        string calldata error\n    ) external pure;\n\n    /// Compares two `uint256` values. Expects difference to be less than or equal to `maxDelta`.\n    function assertApproxEqAbs(uint256 left, uint256 right, uint256 maxDelta) external pure;\n\n    /// Compares two `uint256` values. Expects difference to be less than or equal to `maxDelta`.\n    /// Includes error message into revert string on failure.\n    function assertApproxEqAbs(uint256 left, uint256 right, uint256 maxDelta, string calldata error) external pure;\n\n    /// Compares two `int256` values. Expects difference to be less than or equal to `maxDelta`.\n    function assertApproxEqAbs(int256 left, int256 right, uint256 maxDelta) external pure;\n\n    /// Compares two `int256` values. Expects difference to be less than or equal to `maxDelta`.\n    /// Includes error message into revert string on failure.\n    function assertApproxEqAbs(int256 left, int256 right, uint256 maxDelta, string calldata error) external pure;\n\n    /// Compares two `uint256` values. Expects relative difference in percents to be less than or equal to `maxPercentDelta`.\n    /// `maxPercentDelta` is an 18 decimal fixed point number, where 1e18 == 100%\n    /// Formats values with decimals in failure message.\n    function assertApproxEqRelDecimal(uint256 left, uint256 right, uint256 maxPercentDelta, uint256 decimals)\n        external\n        pure;\n\n    /// Compares two `uint256` values. Expects relative difference in percents to be less than or equal to `maxPercentDelta`.\n    /// `maxPercentDelta` is an 18 decimal fixed point number, where 1e18 == 100%\n    /// Formats values with decimals in failure message. Includes error message into revert string on failure.\n    function assertApproxEqRelDecimal(\n        uint256 left,\n        uint256 right,\n        uint256 maxPercentDelta,\n        uint256 decimals,\n        string calldata error\n    ) external pure;\n\n    /// Compares two `int256` values. Expects relative difference in percents to be less than or equal to `maxPercentDelta`.\n    /// `maxPercentDelta` is an 18 decimal fixed point number, where 1e18 == 100%\n    /// Formats values with decimals in failure message.\n    function assertApproxEqRelDecimal(int256 left, int256 right, uint256 maxPercentDelta, uint256 decimals)\n        external\n        pure;\n\n    /// Compares two `int256` values. Expects relative difference in percents to be less than or equal to `maxPercentDelta`.\n    /// `maxPercentDelta` is an 18 decimal fixed point number, where 1e18 == 100%\n    /// Formats values with decimals in failure message. Includes error message into revert string on failure.\n    function assertApproxEqRelDecimal(\n        int256 left,\n        int256 right,\n        uint256 maxPercentDelta,\n        uint256 decimals,\n        string calldata error\n    ) external pure;\n\n    /// Compares two `uint256` values. Expects relative difference in percents to be less than or equal to `maxPercentDelta`.\n    /// `maxPercentDelta` is an 18 decimal fixed point number, where 1e18 == 100%\n    function assertApproxEqRel(uint256 left, uint256 right, uint256 maxPercentDelta) external pure;\n\n    /// Compares two `uint256` values. Expects relative difference in percents to be less than or equal to `maxPercentDelta`.\n    /// `maxPercentDelta` is an 18 decimal fixed point number, where 1e18 == 100%\n    /// Includes error message into revert string on failure.\n    function assertApproxEqRel(uint256 left, uint256 right, uint256 maxPercentDelta, string calldata error)\n        external\n        pure;\n\n    /// Compares two `int256` values. Expects relative difference in percents to be less than or equal to `maxPercentDelta`.\n    /// `maxPercentDelta` is an 18 decimal fixed point number, where 1e18 == 100%\n    function assertApproxEqRel(int256 left, int256 right, uint256 maxPercentDelta) external pure;\n\n    /// Compares two `int256` values. Expects relative difference in percents to be less than or equal to `maxPercentDelta`.\n    /// `maxPercentDelta` is an 18 decimal fixed point number, where 1e18 == 100%\n    /// Includes error message into revert string on failure.\n    function assertApproxEqRel(int256 left, int256 right, uint256 maxPercentDelta, string calldata error)\n        external\n        pure;\n\n    /// Asserts that two `uint256` values are equal, formatting them with decimals in failure message.\n    function assertEqDecimal(uint256 left, uint256 right, uint256 decimals) external pure;\n\n    /// Asserts that two `uint256` values are equal, formatting them with decimals in failure message.\n    /// Includes error message into revert string on failure.\n    function assertEqDecimal(uint256 left, uint256 right, uint256 decimals, string calldata error) external pure;\n\n    /// Asserts that two `int256` values are equal, formatting them with decimals in failure message.\n    function assertEqDecimal(int256 left, int256 right, uint256 decimals) external pure;\n\n    /// Asserts that two `int256` values are equal, formatting them with decimals in failure message.\n    /// Includes error message into revert string on failure.\n    function assertEqDecimal(int256 left, int256 right, uint256 decimals, string calldata error) external pure;\n\n    /// Asserts that two `bool` values are equal.\n    function assertEq(bool left, bool right) external pure;\n\n    /// Asserts that two `bool` values are equal and includes error message into revert string on failure.\n    function assertEq(bool left, bool right, string calldata error) external pure;\n\n    /// Asserts that two `string` values are equal.\n    function assertEq(string calldata left, string calldata right) external pure;\n\n    /// Asserts that two `string` values are equal and includes error message into revert string on failure.\n    function assertEq(string calldata left, string calldata right, string calldata error) external pure;\n\n    /// Asserts that two `bytes` values are equal.\n    function assertEq(bytes calldata left, bytes calldata right) external pure;\n\n    /// Asserts that two `bytes` values are equal and includes error message into revert string on failure.\n    function assertEq(bytes calldata left, bytes calldata right, string calldata error) external pure;\n\n    /// Asserts that two arrays of `bool` values are equal.\n    function assertEq(bool[] calldata left, bool[] calldata right) external pure;\n\n    /// Asserts that two arrays of `bool` values are equal and includes error message into revert string on failure.\n    function assertEq(bool[] calldata left, bool[] calldata right, string calldata error) external pure;\n\n    /// Asserts that two arrays of `uint256 values are equal.\n    function assertEq(uint256[] calldata left, uint256[] calldata right) external pure;\n\n    /// Asserts that two arrays of `uint256` values are equal and includes error message into revert string on failure.\n    function assertEq(uint256[] calldata left, uint256[] calldata right, string calldata error) external pure;\n\n    /// Asserts that two arrays of `int256` values are equal.\n    function assertEq(int256[] calldata left, int256[] calldata right) external pure;\n\n    /// Asserts that two arrays of `int256` values are equal and includes error message into revert string on failure.\n    function assertEq(int256[] calldata left, int256[] calldata right, string calldata error) external pure;\n\n    /// Asserts that two `uint256` values are equal.\n    function assertEq(uint256 left, uint256 right) external pure;\n\n    /// Asserts that two arrays of `address` values are equal.\n    function assertEq(address[] calldata left, address[] calldata right) external pure;\n\n    /// Asserts that two arrays of `address` values are equal and includes error message into revert string on failure.\n    function assertEq(address[] calldata left, address[] calldata right, string calldata error) external pure;\n\n    /// Asserts that two arrays of `bytes32` values are equal.\n    function assertEq(bytes32[] calldata left, bytes32[] calldata right) external pure;\n\n    /// Asserts that two arrays of `bytes32` values are equal and includes error message into revert string on failure.\n    function assertEq(bytes32[] calldata left, bytes32[] calldata right, string calldata error) external pure;\n\n    /// Asserts that two arrays of `string` values are equal.\n    function assertEq(string[] calldata left, string[] calldata right) external pure;\n\n    /// Asserts that two arrays of `string` values are equal and includes error message into revert string on failure.\n    function assertEq(string[] calldata left, string[] calldata right, string calldata error) external pure;\n\n    /// Asserts that two arrays of `bytes` values are equal.\n    function assertEq(bytes[] calldata left, bytes[] calldata right) external pure;\n\n    /// Asserts that two arrays of `bytes` values are equal and includes error message into revert string on failure.\n    function assertEq(bytes[] calldata left, bytes[] calldata right, string calldata error) external pure;\n\n    /// Asserts that two `uint256` values are equal and includes error message into revert string on failure.\n    function assertEq(uint256 left, uint256 right, string calldata error) external pure;\n\n    /// Asserts that two `int256` values are equal.\n    function assertEq(int256 left, int256 right) external pure;\n\n    /// Asserts that two `int256` values are equal and includes error message into revert string on failure.\n    function assertEq(int256 left, int256 right, string calldata error) external pure;\n\n    /// Asserts that two `address` values are equal.\n    function assertEq(address left, address right) external pure;\n\n    /// Asserts that two `address` values are equal and includes error message into revert string on failure.\n    function assertEq(address left, address right, string calldata error) external pure;\n\n    /// Asserts that two `bytes32` values are equal.\n    function assertEq(bytes32 left, bytes32 right) external pure;\n\n    /// Asserts that two `bytes32` values are equal and includes error message into revert string on failure.\n    function assertEq(bytes32 left, bytes32 right, string calldata error) external pure;\n\n    /// Asserts that the given condition is false.\n    function assertFalse(bool condition) external pure;\n\n    /// Asserts that the given condition is false and includes error message into revert string on failure.\n    function assertFalse(bool condition, string calldata error) external pure;\n\n    /// Compares two `uint256` values. Expects first value to be greater than or equal to second.\n    /// Formats values with decimals in failure message.\n    function assertGeDecimal(uint256 left, uint256 right, uint256 decimals) external pure;\n\n    /// Compares two `uint256` values. Expects first value to be greater than or equal to second.\n    /// Formats values with decimals in failure message. Includes error message into revert string on failure.\n    function assertGeDecimal(uint256 left, uint256 right, uint256 decimals, string calldata error) external pure;\n\n    /// Compares two `int256` values. Expects first value to be greater than or equal to second.\n    /// Formats values with decimals in failure message.\n    function assertGeDecimal(int256 left, int256 right, uint256 decimals) external pure;\n\n    /// Compares two `int256` values. Expects first value to be greater than or equal to second.\n    /// Formats values with decimals in failure message. Includes error message into revert string on failure.\n    function assertGeDecimal(int256 left, int256 right, uint256 decimals, string calldata error) external pure;\n\n    /// Compares two `uint256` values. Expects first value to be greater than or equal to second.\n    function assertGe(uint256 left, uint256 right) external pure;\n\n    /// Compares two `uint256` values. Expects first value to be greater than or equal to second.\n    /// Includes error message into revert string on failure.\n    function assertGe(uint256 left, uint256 right, string calldata error) external pure;\n\n    /// Compares two `int256` values. Expects first value to be greater than or equal to second.\n    function assertGe(int256 left, int256 right) external pure;\n\n    /// Compares two `int256` values. Expects first value to be greater than or equal to second.\n    /// Includes error message into revert string on failure.\n    function assertGe(int256 left, int256 right, string calldata error) external pure;\n\n    /// Compares two `uint256` values. Expects first value to be greater than second.\n    /// Formats values with decimals in failure message.\n    function assertGtDecimal(uint256 left, uint256 right, uint256 decimals) external pure;\n\n    /// Compares two `uint256` values. Expects first value to be greater than second.\n    /// Formats values with decimals in failure message. Includes error message into revert string on failure.\n    function assertGtDecimal(uint256 left, uint256 right, uint256 decimals, string calldata error) external pure;\n\n    /// Compares two `int256` values. Expects first value to be greater than second.\n    /// Formats values with decimals in failure message.\n    function assertGtDecimal(int256 left, int256 right, uint256 decimals) external pure;\n\n    /// Compares two `int256` values. Expects first value to be greater than second.\n    /// Formats values with decimals in failure message. Includes error message into revert string on failure.\n    function assertGtDecimal(int256 left, int256 right, uint256 decimals, string calldata error) external pure;\n\n    /// Compares two `uint256` values. Expects first value to be greater than second.\n    function assertGt(uint256 left, uint256 right) external pure;\n\n    /// Compares two `uint256` values. Expects first value to be greater than second.\n    /// Includes error message into revert string on failure.\n    function assertGt(uint256 left, uint256 right, string calldata error) external pure;\n\n    /// Compares two `int256` values. Expects first value to be greater than second.\n    function assertGt(int256 left, int256 right) external pure;\n\n    /// Compares two `int256` values. Expects first value to be greater than second.\n    /// Includes error message into revert string on failure.\n    function assertGt(int256 left, int256 right, string calldata error) external pure;\n\n    /// Compares two `uint256` values. Expects first value to be less than or equal to second.\n    /// Formats values with decimals in failure message.\n    function assertLeDecimal(uint256 left, uint256 right, uint256 decimals) external pure;\n\n    /// Compares two `uint256` values. Expects first value to be less than or equal to second.\n    /// Formats values with decimals in failure message. Includes error message into revert string on failure.\n    function assertLeDecimal(uint256 left, uint256 right, uint256 decimals, string calldata error) external pure;\n\n    /// Compares two `int256` values. Expects first value to be less than or equal to second.\n    /// Formats values with decimals in failure message.\n    function assertLeDecimal(int256 left, int256 right, uint256 decimals) external pure;\n\n    /// Compares two `int256` values. Expects first value to be less than or equal to second.\n    /// Formats values with decimals in failure message. Includes error message into revert string on failure.\n    function assertLeDecimal(int256 left, int256 right, uint256 decimals, string calldata error) external pure;\n\n    /// Compares two `uint256` values. Expects first value to be less than or equal to second.\n    function assertLe(uint256 left, uint256 right) external pure;\n\n    /// Compares two `uint256` values. Expects first value to be less than or equal to second.\n    /// Includes error message into revert string on failure.\n    function assertLe(uint256 left, uint256 right, string calldata error) external pure;\n\n    /// Compares two `int256` values. Expects first value to be less than or equal to second.\n    function assertLe(int256 left, int256 right) external pure;\n\n    /// Compares two `int256` values. Expects first value to be less than or equal to second.\n    /// Includes error message into revert string on failure.\n    function assertLe(int256 left, int256 right, string calldata error) external pure;\n\n    /// Compares two `uint256` values. Expects first value to be less than second.\n    /// Formats values with decimals in failure message.\n    function assertLtDecimal(uint256 left, uint256 right, uint256 decimals) external pure;\n\n    /// Compares two `uint256` values. Expects first value to be less than second.\n    /// Formats values with decimals in failure message. Includes error message into revert string on failure.\n    function assertLtDecimal(uint256 left, uint256 right, uint256 decimals, string calldata error) external pure;\n\n    /// Compares two `int256` values. Expects first value to be less than second.\n    /// Formats values with decimals in failure message.\n    function assertLtDecimal(int256 left, int256 right, uint256 decimals) external pure;\n\n    /// Compares two `int256` values. Expects first value to be less than second.\n    /// Formats values with decimals in failure message. Includes error message into revert string on failure.\n    function assertLtDecimal(int256 left, int256 right, uint256 decimals, string calldata error) external pure;\n\n    /// Compares two `uint256` values. Expects first value to be less than second.\n    function assertLt(uint256 left, uint256 right) external pure;\n\n    /// Compares two `uint256` values. Expects first value to be less than second.\n    /// Includes error message into revert string on failure.\n    function assertLt(uint256 left, uint256 right, string calldata error) external pure;\n\n    /// Compares two `int256` values. Expects first value to be less than second.\n    function assertLt(int256 left, int256 right) external pure;\n\n    /// Compares two `int256` values. Expects first value to be less than second.\n    /// Includes error message into revert string on failure.\n    function assertLt(int256 left, int256 right, string calldata error) external pure;\n\n    /// Asserts that two `uint256` values are not equal, formatting them with decimals in failure message.\n    function assertNotEqDecimal(uint256 left, uint256 right, uint256 decimals) external pure;\n\n    /// Asserts that two `uint256` values are not equal, formatting them with decimals in failure message.\n    /// Includes error message into revert string on failure.\n    function assertNotEqDecimal(uint256 left, uint256 right, uint256 decimals, string calldata error) external pure;\n\n    /// Asserts that two `int256` values are not equal, formatting them with decimals in failure message.\n    function assertNotEqDecimal(int256 left, int256 right, uint256 decimals) external pure;\n\n    /// Asserts that two `int256` values are not equal, formatting them with decimals in failure message.\n    /// Includes error message into revert string on failure.\n    function assertNotEqDecimal(int256 left, int256 right, uint256 decimals, string calldata error) external pure;\n\n    /// Asserts that two `bool` values are not equal.\n    function assertNotEq(bool left, bool right) external pure;\n\n    /// Asserts that two `bool` values are not equal and includes error message into revert string on failure.\n    function assertNotEq(bool left, bool right, string calldata error) external pure;\n\n    /// Asserts that two `string` values are not equal.\n    function assertNotEq(string calldata left, string calldata right) external pure;\n\n    /// Asserts that two `string` values are not equal and includes error message into revert string on failure.\n    function assertNotEq(string calldata left, string calldata right, string calldata error) external pure;\n\n    /// Asserts that two `bytes` values are not equal.\n    function assertNotEq(bytes calldata left, bytes calldata right) external pure;\n\n    /// Asserts that two `bytes` values are not equal and includes error message into revert string on failure.\n    function assertNotEq(bytes calldata left, bytes calldata right, string calldata error) external pure;\n\n    /// Asserts that two arrays of `bool` values are not equal.\n    function assertNotEq(bool[] calldata left, bool[] calldata right) external pure;\n\n    /// Asserts that two arrays of `bool` values are not equal and includes error message into revert string on failure.\n    function assertNotEq(bool[] calldata left, bool[] calldata right, string calldata error) external pure;\n\n    /// Asserts that two arrays of `uint256` values are not equal.\n    function assertNotEq(uint256[] calldata left, uint256[] calldata right) external pure;\n\n    /// Asserts that two arrays of `uint256` values are not equal and includes error message into revert string on failure.\n    function assertNotEq(uint256[] calldata left, uint256[] calldata right, string calldata error) external pure;\n\n    /// Asserts that two arrays of `int256` values are not equal.\n    function assertNotEq(int256[] calldata left, int256[] calldata right) external pure;\n\n    /// Asserts that two arrays of `int256` values are not equal and includes error message into revert string on failure.\n    function assertNotEq(int256[] calldata left, int256[] calldata right, string calldata error) external pure;\n\n    /// Asserts that two `uint256` values are not equal.\n    function assertNotEq(uint256 left, uint256 right) external pure;\n\n    /// Asserts that two arrays of `address` values are not equal.\n    function assertNotEq(address[] calldata left, address[] calldata right) external pure;\n\n    /// Asserts that two arrays of `address` values are not equal and includes error message into revert string on failure.\n    function assertNotEq(address[] calldata left, address[] calldata right, string calldata error) external pure;\n\n    /// Asserts that two arrays of `bytes32` values are not equal.\n    function assertNotEq(bytes32[] calldata left, bytes32[] calldata right) external pure;\n\n    /// Asserts that two arrays of `bytes32` values are not equal and includes error message into revert string on failure.\n    function assertNotEq(bytes32[] calldata left, bytes32[] calldata right, string calldata error) external pure;\n\n    /// Asserts that two arrays of `string` values are not equal.\n    function assertNotEq(string[] calldata left, string[] calldata right) external pure;\n\n    /// Asserts that two arrays of `string` values are not equal and includes error message into revert string on failure.\n    function assertNotEq(string[] calldata left, string[] calldata right, string calldata error) external pure;\n\n    /// Asserts that two arrays of `bytes` values are not equal.\n    function assertNotEq(bytes[] calldata left, bytes[] calldata right) external pure;\n\n    /// Asserts that two arrays of `bytes` values are not equal and includes error message into revert string on failure.\n    function assertNotEq(bytes[] calldata left, bytes[] calldata right, string calldata error) external pure;\n\n    /// Asserts that two `uint256` values are not equal and includes error message into revert string on failure.\n    function assertNotEq(uint256 left, uint256 right, string calldata error) external pure;\n\n    /// Asserts that two `int256` values are not equal.\n    function assertNotEq(int256 left, int256 right) external pure;\n\n    /// Asserts that two `int256` values are not equal and includes error message into revert string on failure.\n    function assertNotEq(int256 left, int256 right, string calldata error) external pure;\n\n    /// Asserts that two `address` values are not equal.\n    function assertNotEq(address left, address right) external pure;\n\n    /// Asserts that two `address` values are not equal and includes error message into revert string on failure.\n    function assertNotEq(address left, address right, string calldata error) external pure;\n\n    /// Asserts that two `bytes32` values are not equal.\n    function assertNotEq(bytes32 left, bytes32 right) external pure;\n\n    /// Asserts that two `bytes32` values are not equal and includes error message into revert string on failure.\n    function assertNotEq(bytes32 left, bytes32 right, string calldata error) external pure;\n\n    /// Asserts that the given condition is true.\n    function assertTrue(bool condition) external pure;\n\n    /// Asserts that the given condition is true and includes error message into revert string on failure.\n    function assertTrue(bool condition, string calldata error) external pure;\n\n    /// If the condition is false, discard this run's fuzz inputs and generate new ones.\n    function assume(bool condition) external pure;\n\n    /// Writes a breakpoint to jump to in the debugger.\n    function breakpoint(string calldata char) external;\n\n    /// Writes a conditional breakpoint to jump to in the debugger.\n    function breakpoint(string calldata char, bool value) external;\n\n    /// Returns the RPC url for the given alias.\n    function rpcUrl(string calldata rpcAlias) external view returns (string memory json);\n\n    /// Returns all rpc urls and their aliases as structs.\n    function rpcUrlStructs() external view returns (Rpc[] memory urls);\n\n    /// Returns all rpc urls and their aliases `[alias, url][]`.\n    function rpcUrls() external view returns (string[2][] memory urls);\n\n    /// Suspends execution of the main thread for `duration` milliseconds.\n    function sleep(uint256 duration) external;\n\n    // ======== Toml ========\n\n    /// Checks if `key` exists in a TOML table.\n    function keyExistsToml(string calldata toml, string calldata key) external view returns (bool);\n\n    /// Parses a string of TOML data at `key` and coerces it to `address`.\n    function parseTomlAddress(string calldata toml, string calldata key) external pure returns (address);\n\n    /// Parses a string of TOML data at `key` and coerces it to `address[]`.\n    function parseTomlAddressArray(string calldata toml, string calldata key)\n        external\n        pure\n        returns (address[] memory);\n\n    /// Parses a string of TOML data at `key` and coerces it to `bool`.\n    function parseTomlBool(string calldata toml, string calldata key) external pure returns (bool);\n\n    /// Parses a string of TOML data at `key` and coerces it to `bool[]`.\n    function parseTomlBoolArray(string calldata toml, string calldata key) external pure returns (bool[] memory);\n\n    /// Parses a string of TOML data at `key` and coerces it to `bytes`.\n    function parseTomlBytes(string calldata toml, string calldata key) external pure returns (bytes memory);\n\n    /// Parses a string of TOML data at `key` and coerces it to `bytes32`.\n    function parseTomlBytes32(string calldata toml, string calldata key) external pure returns (bytes32);\n\n    /// Parses a string of TOML data at `key` and coerces it to `bytes32[]`.\n    function parseTomlBytes32Array(string calldata toml, string calldata key)\n        external\n        pure\n        returns (bytes32[] memory);\n\n    /// Parses a string of TOML data at `key` and coerces it to `bytes[]`.\n    function parseTomlBytesArray(string calldata toml, string calldata key) external pure returns (bytes[] memory);\n\n    /// Parses a string of TOML data at `key` and coerces it to `int256`.\n    function parseTomlInt(string calldata toml, string calldata key) external pure returns (int256);\n\n    /// Parses a string of TOML data at `key` and coerces it to `int256[]`.\n    function parseTomlIntArray(string calldata toml, string calldata key) external pure returns (int256[] memory);\n\n    /// Returns an array of all the keys in a TOML table.\n    function parseTomlKeys(string calldata toml, string calldata key) external pure returns (string[] memory keys);\n\n    /// Parses a string of TOML data at `key` and coerces it to `string`.\n    function parseTomlString(string calldata toml, string calldata key) external pure returns (string memory);\n\n    /// Parses a string of TOML data at `key` and coerces it to `string[]`.\n    function parseTomlStringArray(string calldata toml, string calldata key) external pure returns (string[] memory);\n\n    /// Parses a string of TOML data at `key` and coerces it to `uint256`.\n    function parseTomlUint(string calldata toml, string calldata key) external pure returns (uint256);\n\n    /// Parses a string of TOML data at `key` and coerces it to `uint256[]`.\n    function parseTomlUintArray(string calldata toml, string calldata key) external pure returns (uint256[] memory);\n\n    /// ABI-encodes a TOML table.\n    function parseToml(string calldata toml) external pure returns (bytes memory abiEncodedData);\n\n    /// ABI-encodes a TOML table at `key`.\n    function parseToml(string calldata toml, string calldata key) external pure returns (bytes memory abiEncodedData);\n\n    /// Takes serialized JSON, converts to TOML and write a serialized TOML to a file.\n    function writeToml(string calldata json, string calldata path) external;\n\n    /// Takes serialized JSON, converts to TOML and write a serialized TOML table to an **existing** TOML file, replacing a value with key = <value_key.>\n    /// This is useful to replace a specific value of a TOML file, without having to parse the entire thing.\n    function writeToml(string calldata json, string calldata path, string calldata valueKey) external;\n\n    // ======== Utilities ========\n\n    /// Compute the address of a contract created with CREATE2 using the given CREATE2 deployer.\n    function computeCreate2Address(bytes32 salt, bytes32 initCodeHash, address deployer)\n        external\n        pure\n        returns (address);\n\n    /// Compute the address of a contract created with CREATE2 using the default CREATE2 deployer.\n    function computeCreate2Address(bytes32 salt, bytes32 initCodeHash) external pure returns (address);\n\n    /// Compute the address a contract will be deployed at for a given deployer address and nonce.\n    function computeCreateAddress(address deployer, uint256 nonce) external pure returns (address);\n\n    /// Derives a private key from the name, labels the account with that name, and returns the wallet.\n    function createWallet(string calldata walletLabel) external returns (Wallet memory wallet);\n\n    /// Generates a wallet from the private key and returns the wallet.\n    function createWallet(uint256 privateKey) external returns (Wallet memory wallet);\n\n    /// Generates a wallet from the private key, labels the account with that name, and returns the wallet.\n    function createWallet(uint256 privateKey, string calldata walletLabel) external returns (Wallet memory wallet);\n\n    /// Derive a private key from a provided mnenomic string (or mnenomic file path)\n    /// at the derivation path `m/44'/60'/0'/0/{index}`.\n    function deriveKey(string calldata mnemonic, uint32 index) external pure returns (uint256 privateKey);\n\n    /// Derive a private key from a provided mnenomic string (or mnenomic file path)\n    /// at `{derivationPath}{index}`.\n    function deriveKey(string calldata mnemonic, string calldata derivationPath, uint32 index)\n        external\n        pure\n        returns (uint256 privateKey);\n\n    /// Derive a private key from a provided mnenomic string (or mnenomic file path) in the specified language\n    /// at the derivation path `m/44'/60'/0'/0/{index}`.\n    function deriveKey(string calldata mnemonic, uint32 index, string calldata language)\n        external\n        pure\n        returns (uint256 privateKey);\n\n    /// Derive a private key from a provided mnenomic string (or mnenomic file path) in the specified language\n    /// at `{derivationPath}{index}`.\n    function deriveKey(string calldata mnemonic, string calldata derivationPath, uint32 index, string calldata language)\n        external\n        pure\n        returns (uint256 privateKey);\n\n    /// Gets the label for the specified address.\n    function getLabel(address account) external view returns (string memory currentLabel);\n\n    /// Get a `Wallet`'s nonce.\n    function getNonce(Wallet calldata wallet) external returns (uint64 nonce);\n\n    /// Labels an address in call traces.\n    function label(address account, string calldata newLabel) external;\n\n    /// Adds a private key to the local forge wallet and returns the address.\n    function rememberKey(uint256 privateKey) external returns (address keyAddr);\n\n    /// Signs data with a `Wallet`.\n    function sign(Wallet calldata wallet, bytes32 digest) external returns (uint8 v, bytes32 r, bytes32 s);\n\n    /// Encodes a `bytes` value to a base64url string.\n    function toBase64URL(bytes calldata data) external pure returns (string memory);\n\n    /// Encodes a `string` value to a base64url string.\n    function toBase64URL(string calldata data) external pure returns (string memory);\n\n    /// Encodes a `bytes` value to a base64 string.\n    function toBase64(bytes calldata data) external pure returns (string memory);\n\n    /// Encodes a `string` value to a base64 string.\n    function toBase64(string calldata data) external pure returns (string memory);\n}\n\n/// The `Vm` interface does allow manipulation of the EVM state. These are all intended to be used\n/// in tests, but it is not recommended to use these cheats in scripts.\ninterface Vm is VmSafe {\n    // ======== EVM ========\n\n    /// Returns the identifier of the currently active fork. Reverts if no fork is currently active.\n    function activeFork() external view returns (uint256 forkId);\n\n    /// In forking mode, explicitly grant the given address cheatcode access.\n    function allowCheatcodes(address account) external;\n\n    /// Sets `block.chainid`.\n    function chainId(uint256 newChainId) external;\n\n    /// Clears all mocked calls.\n    function clearMockedCalls() external;\n\n    /// Sets `block.coinbase`.\n    function coinbase(address newCoinbase) external;\n\n    /// Creates a new fork with the given endpoint and the _latest_ block and returns the identifier of the fork.\n    function createFork(string calldata urlOrAlias) external returns (uint256 forkId);\n\n    /// Creates a new fork with the given endpoint and block and returns the identifier of the fork.\n    function createFork(string calldata urlOrAlias, uint256 blockNumber) external returns (uint256 forkId);\n\n    /// Creates a new fork with the given endpoint and at the block the given transaction was mined in,\n    /// replays all transaction mined in the block before the transaction, and returns the identifier of the fork.\n    function createFork(string calldata urlOrAlias, bytes32 txHash) external returns (uint256 forkId);\n\n    /// Creates and also selects a new fork with the given endpoint and the latest block and returns the identifier of the fork.\n    function createSelectFork(string calldata urlOrAlias) external returns (uint256 forkId);\n\n    /// Creates and also selects a new fork with the given endpoint and block and returns the identifier of the fork.\n    function createSelectFork(string calldata urlOrAlias, uint256 blockNumber) external returns (uint256 forkId);\n\n    /// Creates and also selects new fork with the given endpoint and at the block the given transaction was mined in,\n    /// replays all transaction mined in the block before the transaction, returns the identifier of the fork.\n    function createSelectFork(string calldata urlOrAlias, bytes32 txHash) external returns (uint256 forkId);\n\n    /// Sets an address' balance.\n    function deal(address account, uint256 newBalance) external;\n\n    /// Removes the snapshot with the given ID created by `snapshot`.\n    /// Takes the snapshot ID to delete.\n    /// Returns `true` if the snapshot was successfully deleted.\n    /// Returns `false` if the snapshot does not exist.\n    function deleteSnapshot(uint256 snapshotId) external returns (bool success);\n\n    /// Removes _all_ snapshots previously created by `snapshot`.\n    function deleteSnapshots() external;\n\n    /// Sets `block.difficulty`.\n    /// Not available on EVM versions from Paris onwards. Use `prevrandao` instead.\n    /// Reverts if used on unsupported EVM versions.\n    function difficulty(uint256 newDifficulty) external;\n\n    /// Dump a genesis JSON file's `allocs` to disk.\n    function dumpState(string calldata pathToStateJson) external;\n\n    /// Sets an address' code.\n    function etch(address target, bytes calldata newRuntimeBytecode) external;\n\n    /// Sets `block.basefee`.\n    function fee(uint256 newBasefee) external;\n\n    /// Returns true if the account is marked as persistent.\n    function isPersistent(address account) external view returns (bool persistent);\n\n    /// Load a genesis JSON file's `allocs` into the in-memory revm state.\n    function loadAllocs(string calldata pathToAllocsJson) external;\n\n    /// Marks that the account(s) should use persistent storage across fork swaps in a multifork setup\n    /// Meaning, changes made to the state of this account will be kept when switching forks.\n    function makePersistent(address account) external;\n\n    /// See `makePersistent(address)`.\n    function makePersistent(address account0, address account1) external;\n\n    /// See `makePersistent(address)`.\n    function makePersistent(address account0, address account1, address account2) external;\n\n    /// See `makePersistent(address)`.\n    function makePersistent(address[] calldata accounts) external;\n\n    /// Reverts a call to an address with specified revert data.\n    function mockCallRevert(address callee, bytes calldata data, bytes calldata revertData) external;\n\n    /// Reverts a call to an address with a specific `msg.value`, with specified revert data.\n    function mockCallRevert(address callee, uint256 msgValue, bytes calldata data, bytes calldata revertData)\n        external;\n\n    /// Mocks a call to an address, returning specified data.\n    /// Calldata can either be strict or a partial match, e.g. if you only\n    /// pass a Solidity selector to the expected calldata, then the entire Solidity\n    /// function will be mocked.\n    function mockCall(address callee, bytes calldata data, bytes calldata returnData) external;\n\n    /// Mocks a call to an address with a specific `msg.value`, returning specified data.\n    /// Calldata match takes precedence over `msg.value` in case of ambiguity.\n    function mockCall(address callee, uint256 msgValue, bytes calldata data, bytes calldata returnData) external;\n\n    /// Sets the *next* call's `msg.sender` to be the input address.\n    function prank(address msgSender) external;\n\n    /// Sets the *next* call's `msg.sender` to be the input address, and the `tx.origin` to be the second input.\n    function prank(address msgSender, address txOrigin) external;\n\n    /// Sets `block.prevrandao`.\n    /// Not available on EVM versions before Paris. Use `difficulty` instead.\n    /// If used on unsupported EVM versions it will revert.\n    function prevrandao(bytes32 newPrevrandao) external;\n\n    /// Reads the current `msg.sender` and `tx.origin` from state and reports if there is any active caller modification.\n    function readCallers() external returns (CallerMode callerMode, address msgSender, address txOrigin);\n\n    /// Resets the nonce of an account to 0 for EOAs and 1 for contract accounts.\n    function resetNonce(address account) external;\n\n    /// Revert the state of the EVM to a previous snapshot\n    /// Takes the snapshot ID to revert to.\n    /// Returns `true` if the snapshot was successfully reverted.\n    /// Returns `false` if the snapshot does not exist.\n    /// **Note:** This does not automatically delete the snapshot. To delete the snapshot use `deleteSnapshot`.\n    function revertTo(uint256 snapshotId) external returns (bool success);\n\n    /// Revert the state of the EVM to a previous snapshot and automatically deletes the snapshots\n    /// Takes the snapshot ID to revert to.\n    /// Returns `true` if the snapshot was successfully reverted and deleted.\n    /// Returns `false` if the snapshot does not exist.\n    function revertToAndDelete(uint256 snapshotId) external returns (bool success);\n\n    /// Revokes persistent status from the address, previously added via `makePersistent`.\n    function revokePersistent(address account) external;\n\n    /// See `revokePersistent(address)`.\n    function revokePersistent(address[] calldata accounts) external;\n\n    /// Sets `block.height`.\n    function roll(uint256 newHeight) external;\n\n    /// Updates the currently active fork to given block number\n    /// This is similar to `roll` but for the currently active fork.\n    function rollFork(uint256 blockNumber) external;\n\n    /// Updates the currently active fork to given transaction. This will `rollFork` with the number\n    /// of the block the transaction was mined in and replays all transaction mined before it in the block.\n    function rollFork(bytes32 txHash) external;\n\n    /// Updates the given fork to given block number.\n    function rollFork(uint256 forkId, uint256 blockNumber) external;\n\n    /// Updates the given fork to block number of the given transaction and replays all transaction mined before it in the block.\n    function rollFork(uint256 forkId, bytes32 txHash) external;\n\n    /// Takes a fork identifier created by `createFork` and sets the corresponding forked state as active.\n    function selectFork(uint256 forkId) external;\n\n    /// Sets the nonce of an account. Must be higher than the current nonce of the account.\n    function setNonce(address account, uint64 newNonce) external;\n\n    /// Sets the nonce of an account to an arbitrary value.\n    function setNonceUnsafe(address account, uint64 newNonce) external;\n\n    /// Snapshot the current state of the evm.\n    /// Returns the ID of the snapshot that was created.\n    /// To revert a snapshot use `revertTo`.\n    function snapshot() external returns (uint256 snapshotId);\n\n    /// Sets all subsequent calls' `msg.sender` to be the input address until `stopPrank` is called.\n    function startPrank(address msgSender) external;\n\n    /// Sets all subsequent calls' `msg.sender` to be the input address until `stopPrank` is called, and the `tx.origin` to be the second input.\n    function startPrank(address msgSender, address txOrigin) external;\n\n    /// Resets subsequent calls' `msg.sender` to be `address(this)`.\n    function stopPrank() external;\n\n    /// Stores a value to an address' storage slot.\n    function store(address target, bytes32 slot, bytes32 value) external;\n\n    /// Fetches the given transaction from the active fork and executes it on the current state.\n    function transact(bytes32 txHash) external;\n\n    /// Fetches the given transaction from the given fork and executes it on the current state.\n    function transact(uint256 forkId, bytes32 txHash) external;\n\n    /// Sets `tx.gasprice`.\n    function txGasPrice(uint256 newGasPrice) external;\n\n    /// Sets `block.timestamp`.\n    function warp(uint256 newTimestamp) external;\n\n    // ======== Testing ========\n\n    /// Expect a call to an address with the specified `msg.value` and calldata, and a *minimum* amount of gas.\n    function expectCallMinGas(address callee, uint256 msgValue, uint64 minGas, bytes calldata data) external;\n\n    /// Expect given number of calls to an address with the specified `msg.value` and calldata, and a *minimum* amount of gas.\n    function expectCallMinGas(address callee, uint256 msgValue, uint64 minGas, bytes calldata data, uint64 count)\n        external;\n\n    /// Expects a call to an address with the specified calldata.\n    /// Calldata can either be a strict or a partial match.\n    function expectCall(address callee, bytes calldata data) external;\n\n    /// Expects given number of calls to an address with the specified calldata.\n    function expectCall(address callee, bytes calldata data, uint64 count) external;\n\n    /// Expects a call to an address with the specified `msg.value` and calldata.\n    function expectCall(address callee, uint256 msgValue, bytes calldata data) external;\n\n    /// Expects given number of calls to an address with the specified `msg.value` and calldata.\n    function expectCall(address callee, uint256 msgValue, bytes calldata data, uint64 count) external;\n\n    /// Expect a call to an address with the specified `msg.value`, gas, and calldata.\n    function expectCall(address callee, uint256 msgValue, uint64 gas, bytes calldata data) external;\n\n    /// Expects given number of calls to an address with the specified `msg.value`, gas, and calldata.\n    function expectCall(address callee, uint256 msgValue, uint64 gas, bytes calldata data, uint64 count) external;\n\n    /// Prepare an expected log with (bool checkTopic1, bool checkTopic2, bool checkTopic3, bool checkData.).\n    /// Call this function, then emit an event, then call a function. Internally after the call, we check if\n    /// logs were emitted in the expected order with the expected topics and data (as specified by the booleans).\n    function expectEmit(bool checkTopic1, bool checkTopic2, bool checkTopic3, bool checkData) external;\n\n    /// Same as the previous method, but also checks supplied address against emitting contract.\n    function expectEmit(bool checkTopic1, bool checkTopic2, bool checkTopic3, bool checkData, address emitter)\n        external;\n\n    /// Prepare an expected log with all topic and data checks enabled.\n    /// Call this function, then emit an event, then call a function. Internally after the call, we check if\n    /// logs were emitted in the expected order with the expected topics and data.\n    function expectEmit() external;\n\n    /// Same as the previous method, but also checks supplied address against emitting contract.\n    function expectEmit(address emitter) external;\n\n    /// Expects an error on next call with any revert data.\n    function expectRevert() external;\n\n    /// Expects an error on next call that starts with the revert data.\n    function expectRevert(bytes4 revertData) external;\n\n    /// Expects an error on next call that exactly matches the revert data.\n    function expectRevert(bytes calldata revertData) external;\n\n    /// Only allows memory writes to offsets [0x00, 0x60) ∪ [min, max) in the current subcontext. If any other\n    /// memory is written to, the test will fail. Can be called multiple times to add more ranges to the set.\n    function expectSafeMemory(uint64 min, uint64 max) external;\n\n    /// Only allows memory writes to offsets [0x00, 0x60) ∪ [min, max) in the next created subcontext.\n    /// If any other memory is written to, the test will fail. Can be called multiple times to add more ranges\n    /// to the set.\n    function expectSafeMemoryCall(uint64 min, uint64 max) external;\n\n    /// Marks a test as skipped. Must be called at the top of the test.\n    function skip(bool skipTest) external;\n\n    /// Stops all safe memory expectation in the current subcontext.\n    function stopExpectSafeMemory() external;\n}\n"
      },
      "lib/forge-std/src/console.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.4.22 <0.9.0;\n\nlibrary console {\n    address constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\n\n    function _sendLogPayload(bytes memory payload) private view {\n        uint256 payloadLength = payload.length;\n        address consoleAddress = CONSOLE_ADDRESS;\n        /// @solidity memory-safe-assembly\n        assembly {\n            let payloadStart := add(payload, 32)\n            let r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\n        }\n    }\n\n    function log() internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log()\"));\n    }\n\n    function logInt(int p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(int)\", p0));\n    }\n\n    function logUint(uint p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint)\", p0));\n    }\n\n    function logString(string memory p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n    }\n\n    function logBool(bool p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n    }\n\n    function logAddress(address p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n    }\n\n    function logBytes(bytes memory p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes)\", p0));\n    }\n\n    function logBytes1(bytes1 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes1)\", p0));\n    }\n\n    function logBytes2(bytes2 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes2)\", p0));\n    }\n\n    function logBytes3(bytes3 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes3)\", p0));\n    }\n\n    function logBytes4(bytes4 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes4)\", p0));\n    }\n\n    function logBytes5(bytes5 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes5)\", p0));\n    }\n\n    function logBytes6(bytes6 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes6)\", p0));\n    }\n\n    function logBytes7(bytes7 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes7)\", p0));\n    }\n\n    function logBytes8(bytes8 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes8)\", p0));\n    }\n\n    function logBytes9(bytes9 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes9)\", p0));\n    }\n\n    function logBytes10(bytes10 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes10)\", p0));\n    }\n\n    function logBytes11(bytes11 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes11)\", p0));\n    }\n\n    function logBytes12(bytes12 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes12)\", p0));\n    }\n\n    function logBytes13(bytes13 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes13)\", p0));\n    }\n\n    function logBytes14(bytes14 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes14)\", p0));\n    }\n\n    function logBytes15(bytes15 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes15)\", p0));\n    }\n\n    function logBytes16(bytes16 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes16)\", p0));\n    }\n\n    function logBytes17(bytes17 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes17)\", p0));\n    }\n\n    function logBytes18(bytes18 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes18)\", p0));\n    }\n\n    function logBytes19(bytes19 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes19)\", p0));\n    }\n\n    function logBytes20(bytes20 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes20)\", p0));\n    }\n\n    function logBytes21(bytes21 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes21)\", p0));\n    }\n\n    function logBytes22(bytes22 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes22)\", p0));\n    }\n\n    function logBytes23(bytes23 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes23)\", p0));\n    }\n\n    function logBytes24(bytes24 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes24)\", p0));\n    }\n\n    function logBytes25(bytes25 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes25)\", p0));\n    }\n\n    function logBytes26(bytes26 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes26)\", p0));\n    }\n\n    function logBytes27(bytes27 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes27)\", p0));\n    }\n\n    function logBytes28(bytes28 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes28)\", p0));\n    }\n\n    function logBytes29(bytes29 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes29)\", p0));\n    }\n\n    function logBytes30(bytes30 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes30)\", p0));\n    }\n\n    function logBytes31(bytes31 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes31)\", p0));\n    }\n\n    function logBytes32(bytes32 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes32)\", p0));\n    }\n\n    function log(uint p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint)\", p0));\n    }\n\n    function log(string memory p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n    }\n\n    function log(bool p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n    }\n\n    function log(address p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n    }\n\n    function log(uint p0, uint p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint)\", p0, p1));\n    }\n\n    function log(uint p0, string memory p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string)\", p0, p1));\n    }\n\n    function log(uint p0, bool p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool)\", p0, p1));\n    }\n\n    function log(uint p0, address p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address)\", p0, p1));\n    }\n\n    function log(string memory p0, uint p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint)\", p0, p1));\n    }\n\n    function log(string memory p0, string memory p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string)\", p0, p1));\n    }\n\n    function log(string memory p0, bool p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool)\", p0, p1));\n    }\n\n    function log(string memory p0, address p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address)\", p0, p1));\n    }\n\n    function log(bool p0, uint p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint)\", p0, p1));\n    }\n\n    function log(bool p0, string memory p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string)\", p0, p1));\n    }\n\n    function log(bool p0, bool p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool)\", p0, p1));\n    }\n\n    function log(bool p0, address p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address)\", p0, p1));\n    }\n\n    function log(address p0, uint p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint)\", p0, p1));\n    }\n\n    function log(address p0, string memory p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string)\", p0, p1));\n    }\n\n    function log(address p0, bool p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool)\", p0, p1));\n    }\n\n    function log(address p0, address p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address)\", p0, p1));\n    }\n\n    function log(uint p0, uint p1, uint p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint)\", p0, p1, p2));\n    }\n\n    function log(uint p0, uint p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string)\", p0, p1, p2));\n    }\n\n    function log(uint p0, uint p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool)\", p0, p1, p2));\n    }\n\n    function log(uint p0, uint p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address)\", p0, p1, p2));\n    }\n\n    function log(uint p0, string memory p1, uint p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint)\", p0, p1, p2));\n    }\n\n    function log(uint p0, string memory p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string)\", p0, p1, p2));\n    }\n\n    function log(uint p0, string memory p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool)\", p0, p1, p2));\n    }\n\n    function log(uint p0, string memory p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address)\", p0, p1, p2));\n    }\n\n    function log(uint p0, bool p1, uint p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint)\", p0, p1, p2));\n    }\n\n    function log(uint p0, bool p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string)\", p0, p1, p2));\n    }\n\n    function log(uint p0, bool p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(uint p0, bool p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address)\", p0, p1, p2));\n    }\n\n    function log(uint p0, address p1, uint p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint)\", p0, p1, p2));\n    }\n\n    function log(uint p0, address p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string)\", p0, p1, p2));\n    }\n\n    function log(uint p0, address p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool)\", p0, p1, p2));\n    }\n\n    function log(uint p0, address p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint p1, uint p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, uint p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, uint p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, uint p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint p1, uint p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, uint p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, uint p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, uint p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint p1, uint p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, uint p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, uint p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, uint p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address)\", p0, p1, p2));\n    }\n\n    function log(uint p0, uint p1, uint p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, uint p1, uint p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, uint p1, uint p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, uint p1, uint p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, uint p1, string memory p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, uint p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, uint p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, uint p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, uint p1, bool p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, uint p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, uint p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, uint p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, uint p1, address p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, uint p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, uint p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, uint p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, string memory p1, uint p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, string memory p1, uint p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, string memory p1, uint p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, string memory p1, uint p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, string memory p1, string memory p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, string memory p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, string memory p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, string memory p1, bool p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, string memory p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, string memory p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, string memory p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, string memory p1, address p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, string memory p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, string memory p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, string memory p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, bool p1, uint p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, bool p1, uint p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, bool p1, uint p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, bool p1, uint p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, bool p1, string memory p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, bool p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, bool p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, bool p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, bool p1, bool p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, bool p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, bool p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, bool p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, bool p1, address p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, bool p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, bool p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, bool p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, address p1, uint p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, address p1, uint p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, address p1, uint p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, address p1, uint p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, address p1, string memory p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, address p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, address p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, address p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, address p1, bool p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, address p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, address p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, address p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, address p1, address p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, address p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, address p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, address p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint p1, uint p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint p1, uint p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint p1, uint p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint p1, uint p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint p1, string memory p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint p1, bool p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint p1, address p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint p1, uint p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint p1, uint p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint p1, uint p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint p1, uint p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint p1, string memory p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint p1, bool p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint p1, address p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint p1, uint p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint p1, uint p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint p1, uint p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint p1, uint p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint p1, string memory p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint p1, bool p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint p1, address p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,address)\", p0, p1, p2, p3));\n    }\n\n}"
      },
      "lib/forge-std/src/console2.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.4.22 <0.9.0;\n\n/// @dev The original console.sol uses `int` and `uint` for computing function selectors, but it should\n/// use `int256` and `uint256`. This modified version fixes that. This version is recommended\n/// over `console.sol` if you don't need compatibility with Hardhat as the logs will show up in\n/// forge stack traces. If you do need compatibility with Hardhat, you must use `console.sol`.\n/// Reference: https://github.com/NomicFoundation/hardhat/issues/2178\nlibrary console2 {\n    address constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\n\n    function _castLogPayloadViewToPure(\n        function(bytes memory) internal view fnIn\n    ) internal pure returns (function(bytes memory) internal pure fnOut) {\n        assembly {\n            fnOut := fnIn\n        }\n    }\n\n    function _sendLogPayload(bytes memory payload) internal pure {\n        _castLogPayloadViewToPure(_sendLogPayloadView)(payload);\n    }\n\n    function _sendLogPayloadView(bytes memory payload) private view {\n        uint256 payloadLength = payload.length;\n        address consoleAddress = CONSOLE_ADDRESS;\n        /// @solidity memory-safe-assembly\n        assembly {\n            let payloadStart := add(payload, 32)\n            let r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\n        }\n    }\n\n    function log() internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log()\"));\n    }\n\n    function logInt(int256 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(int256)\", p0));\n    }\n\n    function logUint(uint256 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256)\", p0));\n    }\n\n    function logString(string memory p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n    }\n\n    function logBool(bool p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n    }\n\n    function logAddress(address p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n    }\n\n    function logBytes(bytes memory p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes)\", p0));\n    }\n\n    function logBytes1(bytes1 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes1)\", p0));\n    }\n\n    function logBytes2(bytes2 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes2)\", p0));\n    }\n\n    function logBytes3(bytes3 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes3)\", p0));\n    }\n\n    function logBytes4(bytes4 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes4)\", p0));\n    }\n\n    function logBytes5(bytes5 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes5)\", p0));\n    }\n\n    function logBytes6(bytes6 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes6)\", p0));\n    }\n\n    function logBytes7(bytes7 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes7)\", p0));\n    }\n\n    function logBytes8(bytes8 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes8)\", p0));\n    }\n\n    function logBytes9(bytes9 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes9)\", p0));\n    }\n\n    function logBytes10(bytes10 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes10)\", p0));\n    }\n\n    function logBytes11(bytes11 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes11)\", p0));\n    }\n\n    function logBytes12(bytes12 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes12)\", p0));\n    }\n\n    function logBytes13(bytes13 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes13)\", p0));\n    }\n\n    function logBytes14(bytes14 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes14)\", p0));\n    }\n\n    function logBytes15(bytes15 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes15)\", p0));\n    }\n\n    function logBytes16(bytes16 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes16)\", p0));\n    }\n\n    function logBytes17(bytes17 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes17)\", p0));\n    }\n\n    function logBytes18(bytes18 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes18)\", p0));\n    }\n\n    function logBytes19(bytes19 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes19)\", p0));\n    }\n\n    function logBytes20(bytes20 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes20)\", p0));\n    }\n\n    function logBytes21(bytes21 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes21)\", p0));\n    }\n\n    function logBytes22(bytes22 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes22)\", p0));\n    }\n\n    function logBytes23(bytes23 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes23)\", p0));\n    }\n\n    function logBytes24(bytes24 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes24)\", p0));\n    }\n\n    function logBytes25(bytes25 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes25)\", p0));\n    }\n\n    function logBytes26(bytes26 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes26)\", p0));\n    }\n\n    function logBytes27(bytes27 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes27)\", p0));\n    }\n\n    function logBytes28(bytes28 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes28)\", p0));\n    }\n\n    function logBytes29(bytes29 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes29)\", p0));\n    }\n\n    function logBytes30(bytes30 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes30)\", p0));\n    }\n\n    function logBytes31(bytes31 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes31)\", p0));\n    }\n\n    function logBytes32(bytes32 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes32)\", p0));\n    }\n\n    function log(uint256 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256)\", p0));\n    }\n\n    function log(int256 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(int256)\", p0));\n    }\n\n    function log(string memory p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n    }\n\n    function log(bool p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n    }\n\n    function log(address p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n    }\n\n    function log(uint256 p0, uint256 p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256)\", p0, p1));\n    }\n\n    function log(uint256 p0, string memory p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string)\", p0, p1));\n    }\n\n    function log(uint256 p0, bool p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool)\", p0, p1));\n    }\n\n    function log(uint256 p0, address p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address)\", p0, p1));\n    }\n\n    function log(string memory p0, uint256 p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256)\", p0, p1));\n    }\n\n    function log(string memory p0, int256 p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,int256)\", p0, p1));\n    }\n\n    function log(string memory p0, string memory p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string)\", p0, p1));\n    }\n\n    function log(string memory p0, bool p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool)\", p0, p1));\n    }\n\n    function log(string memory p0, address p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address)\", p0, p1));\n    }\n\n    function log(bool p0, uint256 p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256)\", p0, p1));\n    }\n\n    function log(bool p0, string memory p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string)\", p0, p1));\n    }\n\n    function log(bool p0, bool p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool)\", p0, p1));\n    }\n\n    function log(bool p0, address p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address)\", p0, p1));\n    }\n\n    function log(address p0, uint256 p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256)\", p0, p1));\n    }\n\n    function log(address p0, string memory p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string)\", p0, p1));\n    }\n\n    function log(address p0, bool p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool)\", p0, p1));\n    }\n\n    function log(address p0, address p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address)\", p0, p1));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, string memory p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, bool p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, bool p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, address p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, address p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, address p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint256 p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint256 p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint256 p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint256 p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint256 p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint256 p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,address)\", p0, p1, p2, p3));\n    }\n\n}"
      },
      "lib/forge-std/src/interfaces/IERC165.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2;\n\ninterface IERC165 {\n    /// @notice Query if a contract implements an interface\n    /// @param interfaceID The interface identifier, as specified in ERC-165\n    /// @dev Interface identification is specified in ERC-165. This function\n    /// uses less than 30,000 gas.\n    /// @return `true` if the contract implements `interfaceID` and\n    /// `interfaceID` is not 0xffffffff, `false` otherwise\n    function supportsInterface(bytes4 interfaceID) external view returns (bool);\n}\n"
      },
      "lib/forge-std/src/interfaces/IERC20.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2;\n\n/// @dev Interface of the ERC20 standard as defined in the EIP.\n/// @dev This includes the optional name, symbol, and decimals metadata.\ninterface IERC20 {\n    /// @dev Emitted when `value` tokens are moved from one account (`from`) to another (`to`).\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /// @dev Emitted when the allowance of a `spender` for an `owner` is set, where `value`\n    /// is the new allowance.\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /// @notice Returns the amount of tokens in existence.\n    function totalSupply() external view returns (uint256);\n\n    /// @notice Returns the amount of tokens owned by `account`.\n    function balanceOf(address account) external view returns (uint256);\n\n    /// @notice Moves `amount` tokens from the caller's account to `to`.\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /// @notice Returns the remaining number of tokens that `spender` is allowed\n    /// to spend on behalf of `owner`\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /// @notice Sets `amount` as the allowance of `spender` over the caller's tokens.\n    /// @dev Be aware of front-running risks: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /// @notice Moves `amount` tokens from `from` to `to` using the allowance mechanism.\n    /// `amount` is then deducted from the caller's allowance.\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n\n    /// @notice Returns the name of the token.\n    function name() external view returns (string memory);\n\n    /// @notice Returns the symbol of the token.\n    function symbol() external view returns (string memory);\n\n    /// @notice Returns the decimals places of the token.\n    function decimals() external view returns (uint8);\n}\n"
      },
      "lib/forge-std/src/interfaces/IERC721.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2;\n\nimport \"./IERC165.sol\";\n\n/// @title ERC-721 Non-Fungible Token Standard\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\n/// Note: the ERC-165 identifier for this interface is 0x80ac58cd.\ninterface IERC721 is IERC165 {\n    /// @dev This emits when ownership of any NFT changes by any mechanism.\n    /// This event emits when NFTs are created (`from` == 0) and destroyed\n    /// (`to` == 0). Exception: during contract creation, any number of NFTs\n    /// may be created and assigned without emitting Transfer. At the time of\n    /// any transfer, the approved address for that NFT (if any) is reset to none.\n    event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);\n\n    /// @dev This emits when the approved address for an NFT is changed or\n    /// reaffirmed. The zero address indicates there is no approved address.\n    /// When a Transfer event emits, this also indicates that the approved\n    /// address for that NFT (if any) is reset to none.\n    event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId);\n\n    /// @dev This emits when an operator is enabled or disabled for an owner.\n    /// The operator can manage all NFTs of the owner.\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\n\n    /// @notice Count all NFTs assigned to an owner\n    /// @dev NFTs assigned to the zero address are considered invalid, and this\n    /// function throws for queries about the zero address.\n    /// @param _owner An address for whom to query the balance\n    /// @return The number of NFTs owned by `_owner`, possibly zero\n    function balanceOf(address _owner) external view returns (uint256);\n\n    /// @notice Find the owner of an NFT\n    /// @dev NFTs assigned to zero address are considered invalid, and queries\n    /// about them do throw.\n    /// @param _tokenId The identifier for an NFT\n    /// @return The address of the owner of the NFT\n    function ownerOf(uint256 _tokenId) external view returns (address);\n\n    /// @notice Transfers the ownership of an NFT from one address to another address\n    /// @dev Throws unless `msg.sender` is the current owner, an authorized\n    /// operator, or the approved address for this NFT. Throws if `_from` is\n    /// not the current owner. Throws if `_to` is the zero address. Throws if\n    /// `_tokenId` is not a valid NFT. When transfer is complete, this function\n    /// checks if `_to` is a smart contract (code size > 0). If so, it calls\n    /// `onERC721Received` on `_to` and throws if the return value is not\n    /// `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`.\n    /// @param _from The current owner of the NFT\n    /// @param _to The new owner\n    /// @param _tokenId The NFT to transfer\n    /// @param data Additional data with no specified format, sent in call to `_to`\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes calldata data) external payable;\n\n    /// @notice Transfers the ownership of an NFT from one address to another address\n    /// @dev This works identically to the other function with an extra data parameter,\n    /// except this function just sets data to \"\".\n    /// @param _from The current owner of the NFT\n    /// @param _to The new owner\n    /// @param _tokenId The NFT to transfer\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId) external payable;\n\n    /// @notice Transfer ownership of an NFT -- THE CALLER IS RESPONSIBLE\n    /// TO CONFIRM THAT `_to` IS CAPABLE OF RECEIVING NFTS OR ELSE\n    /// THEY MAY BE PERMANENTLY LOST\n    /// @dev Throws unless `msg.sender` is the current owner, an authorized\n    /// operator, or the approved address for this NFT. Throws if `_from` is\n    /// not the current owner. Throws if `_to` is the zero address. Throws if\n    /// `_tokenId` is not a valid NFT.\n    /// @param _from The current owner of the NFT\n    /// @param _to The new owner\n    /// @param _tokenId The NFT to transfer\n    function transferFrom(address _from, address _to, uint256 _tokenId) external payable;\n\n    /// @notice Change or reaffirm the approved address for an NFT\n    /// @dev The zero address indicates there is no approved address.\n    /// Throws unless `msg.sender` is the current NFT owner, or an authorized\n    /// operator of the current owner.\n    /// @param _approved The new approved NFT controller\n    /// @param _tokenId The NFT to approve\n    function approve(address _approved, uint256 _tokenId) external payable;\n\n    /// @notice Enable or disable approval for a third party (\"operator\") to manage\n    /// all of `msg.sender`'s assets\n    /// @dev Emits the ApprovalForAll event. The contract MUST allow\n    /// multiple operators per owner.\n    /// @param _operator Address to add to the set of authorized operators\n    /// @param _approved True if the operator is approved, false to revoke approval\n    function setApprovalForAll(address _operator, bool _approved) external;\n\n    /// @notice Get the approved address for a single NFT\n    /// @dev Throws if `_tokenId` is not a valid NFT.\n    /// @param _tokenId The NFT to find the approved address for\n    /// @return The approved address for this NFT, or the zero address if there is none\n    function getApproved(uint256 _tokenId) external view returns (address);\n\n    /// @notice Query if an address is an authorized operator for another address\n    /// @param _owner The address that owns the NFTs\n    /// @param _operator The address that acts on behalf of the owner\n    /// @return True if `_operator` is an approved operator for `_owner`, false otherwise\n    function isApprovedForAll(address _owner, address _operator) external view returns (bool);\n}\n\n/// @dev Note: the ERC-165 identifier for this interface is 0x150b7a02.\ninterface IERC721TokenReceiver {\n    /// @notice Handle the receipt of an NFT\n    /// @dev The ERC721 smart contract calls this function on the recipient\n    /// after a `transfer`. This function MAY throw to revert and reject the\n    /// transfer. Return of other than the magic value MUST result in the\n    /// transaction being reverted.\n    /// Note: the contract address is always the message sender.\n    /// @param _operator The address which called `safeTransferFrom` function\n    /// @param _from The address which previously owned the token\n    /// @param _tokenId The NFT identifier which is being transferred\n    /// @param _data Additional data with no specified format\n    /// @return `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\n    ///  unless throwing\n    function onERC721Received(address _operator, address _from, uint256 _tokenId, bytes calldata _data)\n        external\n        returns (bytes4);\n}\n\n/// @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\n/// Note: the ERC-165 identifier for this interface is 0x5b5e139f.\ninterface IERC721Metadata is IERC721 {\n    /// @notice A descriptive name for a collection of NFTs in this contract\n    function name() external view returns (string memory _name);\n\n    /// @notice An abbreviated name for NFTs in this contract\n    function symbol() external view returns (string memory _symbol);\n\n    /// @notice A distinct Uniform Resource Identifier (URI) for a given asset.\n    /// @dev Throws if `_tokenId` is not a valid NFT. URIs are defined in RFC\n    /// 3986. The URI may point to a JSON file that conforms to the \"ERC721\n    /// Metadata JSON Schema\".\n    function tokenURI(uint256 _tokenId) external view returns (string memory);\n}\n\n/// @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\n/// Note: the ERC-165 identifier for this interface is 0x780e9d63.\ninterface IERC721Enumerable is IERC721 {\n    /// @notice Count NFTs tracked by this contract\n    /// @return A count of valid NFTs tracked by this contract, where each one of\n    /// them has an assigned and queryable owner not equal to the zero address\n    function totalSupply() external view returns (uint256);\n\n    /// @notice Enumerate valid NFTs\n    /// @dev Throws if `_index` >= `totalSupply()`.\n    /// @param _index A counter less than `totalSupply()`\n    /// @return The token identifier for the `_index`th NFT,\n    /// (sort order not specified)\n    function tokenByIndex(uint256 _index) external view returns (uint256);\n\n    /// @notice Enumerate NFTs assigned to an owner\n    /// @dev Throws if `_index` >= `balanceOf(_owner)` or if\n    /// `_owner` is the zero address, representing invalid NFTs.\n    /// @param _owner An address where we are interested in NFTs owned by them\n    /// @param _index A counter less than `balanceOf(_owner)`\n    /// @return The token identifier for the `_index`th NFT assigned to `_owner`,\n    /// (sort order not specified)\n    function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256);\n}\n"
      },
      "lib/forge-std/src/interfaces/IMulticall3.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2 <0.9.0;\n\npragma experimental ABIEncoderV2;\n\ninterface IMulticall3 {\n    struct Call {\n        address target;\n        bytes callData;\n    }\n\n    struct Call3 {\n        address target;\n        bool allowFailure;\n        bytes callData;\n    }\n\n    struct Call3Value {\n        address target;\n        bool allowFailure;\n        uint256 value;\n        bytes callData;\n    }\n\n    struct Result {\n        bool success;\n        bytes returnData;\n    }\n\n    function aggregate(Call[] calldata calls)\n        external\n        payable\n        returns (uint256 blockNumber, bytes[] memory returnData);\n\n    function aggregate3(Call3[] calldata calls) external payable returns (Result[] memory returnData);\n\n    function aggregate3Value(Call3Value[] calldata calls) external payable returns (Result[] memory returnData);\n\n    function blockAndAggregate(Call[] calldata calls)\n        external\n        payable\n        returns (uint256 blockNumber, bytes32 blockHash, Result[] memory returnData);\n\n    function getBasefee() external view returns (uint256 basefee);\n\n    function getBlockHash(uint256 blockNumber) external view returns (bytes32 blockHash);\n\n    function getBlockNumber() external view returns (uint256 blockNumber);\n\n    function getChainId() external view returns (uint256 chainid);\n\n    function getCurrentBlockCoinbase() external view returns (address coinbase);\n\n    function getCurrentBlockDifficulty() external view returns (uint256 difficulty);\n\n    function getCurrentBlockGasLimit() external view returns (uint256 gaslimit);\n\n    function getCurrentBlockTimestamp() external view returns (uint256 timestamp);\n\n    function getEthBalance(address addr) external view returns (uint256 balance);\n\n    function getLastBlockHash() external view returns (bytes32 blockHash);\n\n    function tryAggregate(bool requireSuccess, Call[] calldata calls)\n        external\n        payable\n        returns (Result[] memory returnData);\n\n    function tryBlockAndAggregate(bool requireSuccess, Call[] calldata calls)\n        external\n        payable\n        returns (uint256 blockNumber, bytes32 blockHash, Result[] memory returnData);\n}\n"
      },
      "lib/forge-std/src/mocks/MockERC20.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2 <0.9.0;\n\nimport {IERC20} from \"../interfaces/IERC20.sol\";\n\n/// @notice This is a mock contract of the ERC20 standard for testing purposes only, it SHOULD NOT be used in production.\n/// @dev Forked from: https://github.com/transmissions11/solmate/blob/0384dbaaa4fcb5715738a9254a7c0a4cb62cf458/src/tokens/ERC20.sol\ncontract MockERC20 is IERC20 {\n    /*//////////////////////////////////////////////////////////////\n                            METADATA STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    string internal _name;\n\n    string internal _symbol;\n\n    uint8 internal _decimals;\n\n    function name() external view override returns (string memory) {\n        return _name;\n    }\n\n    function symbol() external view override returns (string memory) {\n        return _symbol;\n    }\n\n    function decimals() external view override returns (uint8) {\n        return _decimals;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                              ERC20 STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    uint256 internal _totalSupply;\n\n    mapping(address => uint256) internal _balanceOf;\n\n    mapping(address => mapping(address => uint256)) internal _allowance;\n\n    function totalSupply() external view override returns (uint256) {\n        return _totalSupply;\n    }\n\n    function balanceOf(address owner) external view override returns (uint256) {\n        return _balanceOf[owner];\n    }\n\n    function allowance(address owner, address spender) external view override returns (uint256) {\n        return _allowance[owner][spender];\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                            EIP-2612 STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    uint256 internal INITIAL_CHAIN_ID;\n\n    bytes32 internal INITIAL_DOMAIN_SEPARATOR;\n\n    mapping(address => uint256) public nonces;\n\n    /*//////////////////////////////////////////////////////////////\n                               INITIALIZE\n    //////////////////////////////////////////////////////////////*/\n\n    /// @dev A bool to track whether the contract has been initialized.\n    bool private initialized;\n\n    /// @dev To hide constructor warnings across solc versions due to different constructor visibility requirements and\n    /// syntaxes, we add an initialization function that can be called only once.\n    function initialize(string memory name_, string memory symbol_, uint8 decimals_) public {\n        require(!initialized, \"ALREADY_INITIALIZED\");\n\n        _name = name_;\n        _symbol = symbol_;\n        _decimals = decimals_;\n\n        INITIAL_CHAIN_ID = _pureChainId();\n        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();\n\n        initialized = true;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                               ERC20 LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _allowance[msg.sender][spender] = amount;\n\n        emit Approval(msg.sender, spender, amount);\n\n        return true;\n    }\n\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        _balanceOf[msg.sender] = _sub(_balanceOf[msg.sender], amount);\n        _balanceOf[to] = _add(_balanceOf[to], amount);\n\n        emit Transfer(msg.sender, to, amount);\n\n        return true;\n    }\n\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\n        uint256 allowed = _allowance[from][msg.sender]; // Saves gas for limited approvals.\n\n        if (allowed != ~uint256(0)) _allowance[from][msg.sender] = _sub(allowed, amount);\n\n        _balanceOf[from] = _sub(_balanceOf[from], amount);\n        _balanceOf[to] = _add(_balanceOf[to], amount);\n\n        emit Transfer(from, to, amount);\n\n        return true;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                             EIP-2612 LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s)\n        public\n        virtual\n    {\n        require(deadline >= block.timestamp, \"PERMIT_DEADLINE_EXPIRED\");\n\n        address recoveredAddress = ecrecover(\n            keccak256(\n                abi.encodePacked(\n                    \"\\x19\\x01\",\n                    DOMAIN_SEPARATOR(),\n                    keccak256(\n                        abi.encode(\n                            keccak256(\n                                \"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\"\n                            ),\n                            owner,\n                            spender,\n                            value,\n                            nonces[owner]++,\n                            deadline\n                        )\n                    )\n                )\n            ),\n            v,\n            r,\n            s\n        );\n\n        require(recoveredAddress != address(0) && recoveredAddress == owner, \"INVALID_SIGNER\");\n\n        _allowance[recoveredAddress][spender] = value;\n\n        emit Approval(owner, spender, value);\n    }\n\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\n        return _pureChainId() == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : computeDomainSeparator();\n    }\n\n    function computeDomainSeparator() internal view virtual returns (bytes32) {\n        return keccak256(\n            abi.encode(\n                keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"),\n                keccak256(bytes(_name)),\n                keccak256(\"1\"),\n                _pureChainId(),\n                address(this)\n            )\n        );\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        INTERNAL MINT/BURN LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function _mint(address to, uint256 amount) internal virtual {\n        _totalSupply = _add(_totalSupply, amount);\n        _balanceOf[to] = _add(_balanceOf[to], amount);\n\n        emit Transfer(address(0), to, amount);\n    }\n\n    function _burn(address from, uint256 amount) internal virtual {\n        _balanceOf[from] = _sub(_balanceOf[from], amount);\n        _totalSupply = _sub(_totalSupply, amount);\n\n        emit Transfer(from, address(0), amount);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        INTERNAL SAFE MATH LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function _add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"ERC20: addition overflow\");\n        return c;\n    }\n\n    function _sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(a >= b, \"ERC20: subtraction underflow\");\n        return a - b;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                                HELPERS\n    //////////////////////////////////////////////////////////////*/\n\n    // We use this complex approach of `_viewChainId` and `_pureChainId` to ensure there are no\n    // compiler warnings when accessing chain ID in any solidity version supported by forge-std. We\n    // can't simply access the chain ID in a normal view or pure function because the solc View Pure\n    // Checker changed `chainid` from pure to view in 0.8.0.\n    function _viewChainId() private view returns (uint256 chainId) {\n        // Assembly required since `block.chainid` was introduced in 0.8.0.\n        assembly {\n            chainId := chainid()\n        }\n\n        address(this); // Silence warnings in older Solc versions.\n    }\n\n    function _pureChainId() private pure returns (uint256 chainId) {\n        function() internal view returns (uint256) fnIn = _viewChainId;\n        function() internal pure returns (uint256) pureChainId;\n        assembly {\n            pureChainId := fnIn\n        }\n        chainId = pureChainId();\n    }\n}\n"
      },
      "lib/forge-std/src/mocks/MockERC721.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2 <0.9.0;\n\nimport {IERC721Metadata} from \"../interfaces/IERC721.sol\";\n\n/// @notice This is a mock contract of the ERC721 standard for testing purposes only, it SHOULD NOT be used in production.\n/// @dev Forked from: https://github.com/transmissions11/solmate/blob/0384dbaaa4fcb5715738a9254a7c0a4cb62cf458/src/tokens/ERC721.sol\ncontract MockERC721 is IERC721Metadata {\n    /*//////////////////////////////////////////////////////////////\n                         METADATA STORAGE/LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    string internal _name;\n\n    string internal _symbol;\n\n    function name() external view override returns (string memory) {\n        return _name;\n    }\n\n    function symbol() external view override returns (string memory) {\n        return _symbol;\n    }\n\n    function tokenURI(uint256 id) public view virtual override returns (string memory) {}\n\n    /*//////////////////////////////////////////////////////////////\n                      ERC721 BALANCE/OWNER STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    mapping(uint256 => address) internal _ownerOf;\n\n    mapping(address => uint256) internal _balanceOf;\n\n    function ownerOf(uint256 id) public view virtual override returns (address owner) {\n        require((owner = _ownerOf[id]) != address(0), \"NOT_MINTED\");\n    }\n\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ZERO_ADDRESS\");\n\n        return _balanceOf[owner];\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                         ERC721 APPROVAL STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    mapping(uint256 => address) internal _getApproved;\n\n    mapping(address => mapping(address => bool)) internal _isApprovedForAll;\n\n    function getApproved(uint256 id) public view virtual override returns (address) {\n        return _getApproved[id];\n    }\n\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _isApprovedForAll[owner][operator];\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                               INITIALIZE\n    //////////////////////////////////////////////////////////////*/\n\n    /// @dev A bool to track whether the contract has been initialized.\n    bool private initialized;\n\n    /// @dev To hide constructor warnings across solc versions due to different constructor visibility requirements and\n    /// syntaxes, we add an initialization function that can be called only once.\n    function initialize(string memory name_, string memory symbol_) public {\n        require(!initialized, \"ALREADY_INITIALIZED\");\n\n        _name = name_;\n        _symbol = symbol_;\n\n        initialized = true;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                              ERC721 LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function approve(address spender, uint256 id) public payable virtual override {\n        address owner = _ownerOf[id];\n\n        require(msg.sender == owner || _isApprovedForAll[owner][msg.sender], \"NOT_AUTHORIZED\");\n\n        _getApproved[id] = spender;\n\n        emit Approval(owner, spender, id);\n    }\n\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _isApprovedForAll[msg.sender][operator] = approved;\n\n        emit ApprovalForAll(msg.sender, operator, approved);\n    }\n\n    function transferFrom(address from, address to, uint256 id) public payable virtual override {\n        require(from == _ownerOf[id], \"WRONG_FROM\");\n\n        require(to != address(0), \"INVALID_RECIPIENT\");\n\n        require(\n            msg.sender == from || _isApprovedForAll[from][msg.sender] || msg.sender == _getApproved[id],\n            \"NOT_AUTHORIZED\"\n        );\n\n        // Underflow of the sender's balance is impossible because we check for\n        // ownership above and the recipient's balance can't realistically overflow.\n        _balanceOf[from]--;\n\n        _balanceOf[to]++;\n\n        _ownerOf[id] = to;\n\n        delete _getApproved[id];\n\n        emit Transfer(from, to, id);\n    }\n\n    function safeTransferFrom(address from, address to, uint256 id) public payable virtual override {\n        transferFrom(from, to, id);\n\n        require(\n            !_isContract(to)\n                || IERC721TokenReceiver(to).onERC721Received(msg.sender, from, id, \"\")\n                    == IERC721TokenReceiver.onERC721Received.selector,\n            \"UNSAFE_RECIPIENT\"\n        );\n    }\n\n    function safeTransferFrom(address from, address to, uint256 id, bytes memory data)\n        public\n        payable\n        virtual\n        override\n    {\n        transferFrom(from, to, id);\n\n        require(\n            !_isContract(to)\n                || IERC721TokenReceiver(to).onERC721Received(msg.sender, from, id, data)\n                    == IERC721TokenReceiver.onERC721Received.selector,\n            \"UNSAFE_RECIPIENT\"\n        );\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                              ERC165 LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == 0x01ffc9a7 // ERC165 Interface ID for ERC165\n            || interfaceId == 0x80ac58cd // ERC165 Interface ID for ERC721\n            || interfaceId == 0x5b5e139f; // ERC165 Interface ID for ERC721Metadata\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        INTERNAL MINT/BURN LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function _mint(address to, uint256 id) internal virtual {\n        require(to != address(0), \"INVALID_RECIPIENT\");\n\n        require(_ownerOf[id] == address(0), \"ALREADY_MINTED\");\n\n        // Counter overflow is incredibly unrealistic.\n\n        _balanceOf[to]++;\n\n        _ownerOf[id] = to;\n\n        emit Transfer(address(0), to, id);\n    }\n\n    function _burn(uint256 id) internal virtual {\n        address owner = _ownerOf[id];\n\n        require(owner != address(0), \"NOT_MINTED\");\n\n        _balanceOf[owner]--;\n\n        delete _ownerOf[id];\n\n        delete _getApproved[id];\n\n        emit Transfer(owner, address(0), id);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        INTERNAL SAFE MINT LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function _safeMint(address to, uint256 id) internal virtual {\n        _mint(to, id);\n\n        require(\n            !_isContract(to)\n                || IERC721TokenReceiver(to).onERC721Received(msg.sender, address(0), id, \"\")\n                    == IERC721TokenReceiver.onERC721Received.selector,\n            \"UNSAFE_RECIPIENT\"\n        );\n    }\n\n    function _safeMint(address to, uint256 id, bytes memory data) internal virtual {\n        _mint(to, id);\n\n        require(\n            !_isContract(to)\n                || IERC721TokenReceiver(to).onERC721Received(msg.sender, address(0), id, data)\n                    == IERC721TokenReceiver.onERC721Received.selector,\n            \"UNSAFE_RECIPIENT\"\n        );\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                                HELPERS\n    //////////////////////////////////////////////////////////////*/\n\n    function _isContract(address _addr) private view returns (bool) {\n        uint256 codeLength;\n\n        // Assembly required for versions < 0.8.0 to check extcodesize.\n        assembly {\n            codeLength := extcodesize(_addr)\n        }\n\n        return codeLength > 0;\n    }\n}\n\ninterface IERC721TokenReceiver {\n    function onERC721Received(address, address, uint256, bytes calldata) external returns (bytes4);\n}\n"
      },
      "lib/forge-std/src/safeconsole.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2 <0.9.0;\n\n/// @author philogy <https://github.com/philogy>\n/// @dev Code generated automatically by script.\nlibrary safeconsole {\n    uint256 constant CONSOLE_ADDR = 0x000000000000000000000000000000000000000000636F6e736F6c652e6c6f67;\n\n    // Credit to [0age](https://twitter.com/z0age/status/1654922202930888704) and [0xdapper](https://github.com/foundry-rs/forge-std/pull/374)\n    // for the view-to-pure log trick.\n    function _sendLogPayload(uint256 offset, uint256 size) private pure {\n        function(uint256, uint256) internal view fnIn = _sendLogPayloadView;\n        function(uint256, uint256) internal pure pureSendLogPayload;\n        assembly {\n            pureSendLogPayload := fnIn\n        }\n        pureSendLogPayload(offset, size);\n    }\n\n    function _sendLogPayloadView(uint256 offset, uint256 size) private view {\n        assembly {\n            pop(staticcall(gas(), CONSOLE_ADDR, offset, size, 0x0, 0x0))\n        }\n    }\n\n    function _memcopy(uint256 fromOffset, uint256 toOffset, uint256 length) private pure {\n        function(uint256, uint256, uint256) internal view fnIn = _memcopyView;\n        function(uint256, uint256, uint256) internal pure pureMemcopy;\n        assembly {\n            pureMemcopy := fnIn\n        }\n        pureMemcopy(fromOffset, toOffset, length);\n    }\n\n    function _memcopyView(uint256 fromOffset, uint256 toOffset, uint256 length) private view {\n        assembly {\n            pop(staticcall(gas(), 0x4, fromOffset, length, toOffset, length))\n        }\n    }\n\n    function logMemory(uint256 offset, uint256 length) internal pure {\n        if (offset >= 0x60) {\n            // Sufficient memory before slice to prepare call header.\n            bytes32 m0;\n            bytes32 m1;\n            bytes32 m2;\n            assembly {\n                m0 := mload(sub(offset, 0x60))\n                m1 := mload(sub(offset, 0x40))\n                m2 := mload(sub(offset, 0x20))\n                // Selector of `logBytes(bytes)`.\n                mstore(sub(offset, 0x60), 0xe17bf956)\n                mstore(sub(offset, 0x40), 0x20)\n                mstore(sub(offset, 0x20), length)\n            }\n            _sendLogPayload(offset - 0x44, length + 0x44);\n            assembly {\n                mstore(sub(offset, 0x60), m0)\n                mstore(sub(offset, 0x40), m1)\n                mstore(sub(offset, 0x20), m2)\n            }\n        } else {\n            // Insufficient space, so copy slice forward, add header and reverse.\n            bytes32 m0;\n            bytes32 m1;\n            bytes32 m2;\n            uint256 endOffset = offset + length;\n            assembly {\n                m0 := mload(add(endOffset, 0x00))\n                m1 := mload(add(endOffset, 0x20))\n                m2 := mload(add(endOffset, 0x40))\n            }\n            _memcopy(offset, offset + 0x60, length);\n            assembly {\n                // Selector of `logBytes(bytes)`.\n                mstore(add(offset, 0x00), 0xe17bf956)\n                mstore(add(offset, 0x20), 0x20)\n                mstore(add(offset, 0x40), length)\n            }\n            _sendLogPayload(offset + 0x1c, length + 0x44);\n            _memcopy(offset + 0x60, offset, length);\n            assembly {\n                mstore(add(endOffset, 0x00), m0)\n                mstore(add(endOffset, 0x20), m1)\n                mstore(add(endOffset, 0x40), m2)\n            }\n        }\n    }\n\n    function log(address p0) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            // Selector of `log(address)`.\n            mstore(0x00, 0x2c2ecbc2)\n            mstore(0x20, p0)\n        }\n        _sendLogPayload(0x1c, 0x24);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n        }\n    }\n\n    function log(bool p0) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            // Selector of `log(bool)`.\n            mstore(0x00, 0x32458eed)\n            mstore(0x20, p0)\n        }\n        _sendLogPayload(0x1c, 0x24);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n        }\n    }\n\n    function log(uint256 p0) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            // Selector of `log(uint256)`.\n            mstore(0x00, 0xf82c50f1)\n            mstore(0x20, p0)\n        }\n        _sendLogPayload(0x1c, 0x24);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n        }\n    }\n\n    function log(bytes32 p0) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(string)`.\n            mstore(0x00, 0x41304fac)\n            mstore(0x20, 0x20)\n            writeString(0x40, p0)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(address p0, address p1) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            // Selector of `log(address,address)`.\n            mstore(0x00, 0xdaf0d4aa)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n        }\n        _sendLogPayload(0x1c, 0x44);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n        }\n    }\n\n    function log(address p0, bool p1) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            // Selector of `log(address,bool)`.\n            mstore(0x00, 0x75b605d3)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n        }\n        _sendLogPayload(0x1c, 0x44);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n        }\n    }\n\n    function log(address p0, uint256 p1) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            // Selector of `log(address,uint256)`.\n            mstore(0x00, 0x8309e8a8)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n        }\n        _sendLogPayload(0x1c, 0x44);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n        }\n    }\n\n    function log(address p0, bytes32 p1) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,string)`.\n            mstore(0x00, 0x759f86bb)\n            mstore(0x20, p0)\n            mstore(0x40, 0x40)\n            writeString(0x60, p1)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, address p1) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            // Selector of `log(bool,address)`.\n            mstore(0x00, 0x853c4849)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n        }\n        _sendLogPayload(0x1c, 0x44);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n        }\n    }\n\n    function log(bool p0, bool p1) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            // Selector of `log(bool,bool)`.\n            mstore(0x00, 0x2a110e83)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n        }\n        _sendLogPayload(0x1c, 0x44);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n        }\n    }\n\n    function log(bool p0, uint256 p1) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            // Selector of `log(bool,uint256)`.\n            mstore(0x00, 0x399174d3)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n        }\n        _sendLogPayload(0x1c, 0x44);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n        }\n    }\n\n    function log(bool p0, bytes32 p1) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,string)`.\n            mstore(0x00, 0x8feac525)\n            mstore(0x20, p0)\n            mstore(0x40, 0x40)\n            writeString(0x60, p1)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, address p1) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            // Selector of `log(uint256,address)`.\n            mstore(0x00, 0x69276c86)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n        }\n        _sendLogPayload(0x1c, 0x44);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n        }\n    }\n\n    function log(uint256 p0, bool p1) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            // Selector of `log(uint256,bool)`.\n            mstore(0x00, 0x1c9d7eb3)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n        }\n        _sendLogPayload(0x1c, 0x44);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n        }\n    }\n\n    function log(uint256 p0, uint256 p1) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            // Selector of `log(uint256,uint256)`.\n            mstore(0x00, 0xf666715a)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n        }\n        _sendLogPayload(0x1c, 0x44);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n        }\n    }\n\n    function log(uint256 p0, bytes32 p1) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,string)`.\n            mstore(0x00, 0x643fd0df)\n            mstore(0x20, p0)\n            mstore(0x40, 0x40)\n            writeString(0x60, p1)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bytes32 p0, address p1) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(string,address)`.\n            mstore(0x00, 0x319af333)\n            mstore(0x20, 0x40)\n            mstore(0x40, p1)\n            writeString(0x60, p0)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bytes32 p0, bool p1) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(string,bool)`.\n            mstore(0x00, 0xc3b55635)\n            mstore(0x20, 0x40)\n            mstore(0x40, p1)\n            writeString(0x60, p0)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bytes32 p0, uint256 p1) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(string,uint256)`.\n            mstore(0x00, 0xb60e72cc)\n            mstore(0x20, 0x40)\n            mstore(0x40, p1)\n            writeString(0x60, p0)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bytes32 p0, bytes32 p1) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,string)`.\n            mstore(0x00, 0x4b5c4277)\n            mstore(0x20, 0x40)\n            mstore(0x40, 0x80)\n            writeString(0x60, p0)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, address p1, address p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(address,address,address)`.\n            mstore(0x00, 0x018c84c2)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(address p0, address p1, bool p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(address,address,bool)`.\n            mstore(0x00, 0xf2a66286)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(address p0, address p1, uint256 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(address,address,uint256)`.\n            mstore(0x00, 0x17fe6185)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(address p0, address p1, bytes32 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(address,address,string)`.\n            mstore(0x00, 0x007150be)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x60)\n            writeString(0x80, p2)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(address p0, bool p1, address p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(address,bool,address)`.\n            mstore(0x00, 0xf11699ed)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(address p0, bool p1, bool p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(address,bool,bool)`.\n            mstore(0x00, 0xeb830c92)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(address p0, bool p1, uint256 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(address,bool,uint256)`.\n            mstore(0x00, 0x9c4f99fb)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(address p0, bool p1, bytes32 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(address,bool,string)`.\n            mstore(0x00, 0x212255cc)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x60)\n            writeString(0x80, p2)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(address p0, uint256 p1, address p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(address,uint256,address)`.\n            mstore(0x00, 0x7bc0d848)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(address p0, uint256 p1, bool p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(address,uint256,bool)`.\n            mstore(0x00, 0x678209a8)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(address p0, uint256 p1, uint256 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(address,uint256,uint256)`.\n            mstore(0x00, 0xb69bcaf6)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(address p0, uint256 p1, bytes32 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(address,uint256,string)`.\n            mstore(0x00, 0xa1f2e8aa)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x60)\n            writeString(0x80, p2)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(address p0, bytes32 p1, address p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(address,string,address)`.\n            mstore(0x00, 0xf08744e8)\n            mstore(0x20, p0)\n            mstore(0x40, 0x60)\n            mstore(0x60, p2)\n            writeString(0x80, p1)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(address p0, bytes32 p1, bool p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(address,string,bool)`.\n            mstore(0x00, 0xcf020fb1)\n            mstore(0x20, p0)\n            mstore(0x40, 0x60)\n            mstore(0x60, p2)\n            writeString(0x80, p1)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(address p0, bytes32 p1, uint256 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(address,string,uint256)`.\n            mstore(0x00, 0x67dd6ff1)\n            mstore(0x20, p0)\n            mstore(0x40, 0x60)\n            mstore(0x60, p2)\n            writeString(0x80, p1)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(address p0, bytes32 p1, bytes32 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            // Selector of `log(address,string,string)`.\n            mstore(0x00, 0xfb772265)\n            mstore(0x20, p0)\n            mstore(0x40, 0x60)\n            mstore(0x60, 0xa0)\n            writeString(0x80, p1)\n            writeString(0xc0, p2)\n        }\n        _sendLogPayload(0x1c, 0xe4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n        }\n    }\n\n    function log(bool p0, address p1, address p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(bool,address,address)`.\n            mstore(0x00, 0xd2763667)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(bool p0, address p1, bool p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(bool,address,bool)`.\n            mstore(0x00, 0x18c9c746)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(bool p0, address p1, uint256 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(bool,address,uint256)`.\n            mstore(0x00, 0x5f7b9afb)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(bool p0, address p1, bytes32 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(bool,address,string)`.\n            mstore(0x00, 0xde9a9270)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x60)\n            writeString(0x80, p2)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(bool p0, bool p1, address p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(bool,bool,address)`.\n            mstore(0x00, 0x1078f68d)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(bool p0, bool p1, bool p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(bool,bool,bool)`.\n            mstore(0x00, 0x50709698)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(bool p0, bool p1, uint256 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(bool,bool,uint256)`.\n            mstore(0x00, 0x12f21602)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(bool p0, bool p1, bytes32 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(bool,bool,string)`.\n            mstore(0x00, 0x2555fa46)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x60)\n            writeString(0x80, p2)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(bool p0, uint256 p1, address p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(bool,uint256,address)`.\n            mstore(0x00, 0x088ef9d2)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(bool p0, uint256 p1, bool p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(bool,uint256,bool)`.\n            mstore(0x00, 0xe8defba9)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(bool,uint256,uint256)`.\n            mstore(0x00, 0x37103367)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(bool p0, uint256 p1, bytes32 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(bool,uint256,string)`.\n            mstore(0x00, 0xc3fc3970)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x60)\n            writeString(0x80, p2)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(bool p0, bytes32 p1, address p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(bool,string,address)`.\n            mstore(0x00, 0x9591b953)\n            mstore(0x20, p0)\n            mstore(0x40, 0x60)\n            mstore(0x60, p2)\n            writeString(0x80, p1)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(bool p0, bytes32 p1, bool p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(bool,string,bool)`.\n            mstore(0x00, 0xdbb4c247)\n            mstore(0x20, p0)\n            mstore(0x40, 0x60)\n            mstore(0x60, p2)\n            writeString(0x80, p1)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(bool p0, bytes32 p1, uint256 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(bool,string,uint256)`.\n            mstore(0x00, 0x1093ee11)\n            mstore(0x20, p0)\n            mstore(0x40, 0x60)\n            mstore(0x60, p2)\n            writeString(0x80, p1)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(bool p0, bytes32 p1, bytes32 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            // Selector of `log(bool,string,string)`.\n            mstore(0x00, 0xb076847f)\n            mstore(0x20, p0)\n            mstore(0x40, 0x60)\n            mstore(0x60, 0xa0)\n            writeString(0x80, p1)\n            writeString(0xc0, p2)\n        }\n        _sendLogPayload(0x1c, 0xe4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n        }\n    }\n\n    function log(uint256 p0, address p1, address p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(uint256,address,address)`.\n            mstore(0x00, 0xbcfd9be0)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(uint256 p0, address p1, bool p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(uint256,address,bool)`.\n            mstore(0x00, 0x9b6ec042)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(uint256 p0, address p1, uint256 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(uint256,address,uint256)`.\n            mstore(0x00, 0x5a9b5ed5)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(uint256 p0, address p1, bytes32 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(uint256,address,string)`.\n            mstore(0x00, 0x63cb41f9)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x60)\n            writeString(0x80, p2)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(uint256 p0, bool p1, address p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(uint256,bool,address)`.\n            mstore(0x00, 0x35085f7b)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(uint256 p0, bool p1, bool p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(uint256,bool,bool)`.\n            mstore(0x00, 0x20718650)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(uint256,bool,uint256)`.\n            mstore(0x00, 0x20098014)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(uint256 p0, bool p1, bytes32 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(uint256,bool,string)`.\n            mstore(0x00, 0x85775021)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x60)\n            writeString(0x80, p2)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(uint256 p0, uint256 p1, address p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(uint256,uint256,address)`.\n            mstore(0x00, 0x5c96b331)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(uint256,uint256,bool)`.\n            mstore(0x00, 0x4766da72)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            // Selector of `log(uint256,uint256,uint256)`.\n            mstore(0x00, 0xd1ed7a3c)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n        }\n        _sendLogPayload(0x1c, 0x64);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n        }\n    }\n\n    function log(uint256 p0, uint256 p1, bytes32 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(uint256,uint256,string)`.\n            mstore(0x00, 0x71d04af2)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x60)\n            writeString(0x80, p2)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(uint256 p0, bytes32 p1, address p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(uint256,string,address)`.\n            mstore(0x00, 0x7afac959)\n            mstore(0x20, p0)\n            mstore(0x40, 0x60)\n            mstore(0x60, p2)\n            writeString(0x80, p1)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(uint256 p0, bytes32 p1, bool p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(uint256,string,bool)`.\n            mstore(0x00, 0x4ceda75a)\n            mstore(0x20, p0)\n            mstore(0x40, 0x60)\n            mstore(0x60, p2)\n            writeString(0x80, p1)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(uint256 p0, bytes32 p1, uint256 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(uint256,string,uint256)`.\n            mstore(0x00, 0x37aa7d4c)\n            mstore(0x20, p0)\n            mstore(0x40, 0x60)\n            mstore(0x60, p2)\n            writeString(0x80, p1)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(uint256 p0, bytes32 p1, bytes32 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            // Selector of `log(uint256,string,string)`.\n            mstore(0x00, 0xb115611f)\n            mstore(0x20, p0)\n            mstore(0x40, 0x60)\n            mstore(0x60, 0xa0)\n            writeString(0x80, p1)\n            writeString(0xc0, p2)\n        }\n        _sendLogPayload(0x1c, 0xe4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n        }\n    }\n\n    function log(bytes32 p0, address p1, address p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(string,address,address)`.\n            mstore(0x00, 0xfcec75e0)\n            mstore(0x20, 0x60)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            writeString(0x80, p0)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(bytes32 p0, address p1, bool p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(string,address,bool)`.\n            mstore(0x00, 0xc91d5ed4)\n            mstore(0x20, 0x60)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            writeString(0x80, p0)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(bytes32 p0, address p1, uint256 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(string,address,uint256)`.\n            mstore(0x00, 0x0d26b925)\n            mstore(0x20, 0x60)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            writeString(0x80, p0)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(bytes32 p0, address p1, bytes32 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            // Selector of `log(string,address,string)`.\n            mstore(0x00, 0xe0e9ad4f)\n            mstore(0x20, 0x60)\n            mstore(0x40, p1)\n            mstore(0x60, 0xa0)\n            writeString(0x80, p0)\n            writeString(0xc0, p2)\n        }\n        _sendLogPayload(0x1c, 0xe4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n        }\n    }\n\n    function log(bytes32 p0, bool p1, address p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(string,bool,address)`.\n            mstore(0x00, 0x932bbb38)\n            mstore(0x20, 0x60)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            writeString(0x80, p0)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(bytes32 p0, bool p1, bool p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(string,bool,bool)`.\n            mstore(0x00, 0x850b7ad6)\n            mstore(0x20, 0x60)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            writeString(0x80, p0)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(bytes32 p0, bool p1, uint256 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(string,bool,uint256)`.\n            mstore(0x00, 0xc95958d6)\n            mstore(0x20, 0x60)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            writeString(0x80, p0)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(bytes32 p0, bool p1, bytes32 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            // Selector of `log(string,bool,string)`.\n            mstore(0x00, 0xe298f47d)\n            mstore(0x20, 0x60)\n            mstore(0x40, p1)\n            mstore(0x60, 0xa0)\n            writeString(0x80, p0)\n            writeString(0xc0, p2)\n        }\n        _sendLogPayload(0x1c, 0xe4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n        }\n    }\n\n    function log(bytes32 p0, uint256 p1, address p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(string,uint256,address)`.\n            mstore(0x00, 0x1c7ec448)\n            mstore(0x20, 0x60)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            writeString(0x80, p0)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(bytes32 p0, uint256 p1, bool p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(string,uint256,bool)`.\n            mstore(0x00, 0xca7733b1)\n            mstore(0x20, 0x60)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            writeString(0x80, p0)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(bytes32 p0, uint256 p1, uint256 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            // Selector of `log(string,uint256,uint256)`.\n            mstore(0x00, 0xca47c4eb)\n            mstore(0x20, 0x60)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            writeString(0x80, p0)\n        }\n        _sendLogPayload(0x1c, 0xa4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n        }\n    }\n\n    function log(bytes32 p0, uint256 p1, bytes32 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            // Selector of `log(string,uint256,string)`.\n            mstore(0x00, 0x5970e089)\n            mstore(0x20, 0x60)\n            mstore(0x40, p1)\n            mstore(0x60, 0xa0)\n            writeString(0x80, p0)\n            writeString(0xc0, p2)\n        }\n        _sendLogPayload(0x1c, 0xe4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n        }\n    }\n\n    function log(bytes32 p0, bytes32 p1, address p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            // Selector of `log(string,string,address)`.\n            mstore(0x00, 0x95ed0195)\n            mstore(0x20, 0x60)\n            mstore(0x40, 0xa0)\n            mstore(0x60, p2)\n            writeString(0x80, p0)\n            writeString(0xc0, p1)\n        }\n        _sendLogPayload(0x1c, 0xe4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n        }\n    }\n\n    function log(bytes32 p0, bytes32 p1, bool p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            // Selector of `log(string,string,bool)`.\n            mstore(0x00, 0xb0e0f9b5)\n            mstore(0x20, 0x60)\n            mstore(0x40, 0xa0)\n            mstore(0x60, p2)\n            writeString(0x80, p0)\n            writeString(0xc0, p1)\n        }\n        _sendLogPayload(0x1c, 0xe4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n        }\n    }\n\n    function log(bytes32 p0, bytes32 p1, uint256 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            // Selector of `log(string,string,uint256)`.\n            mstore(0x00, 0x5821efa1)\n            mstore(0x20, 0x60)\n            mstore(0x40, 0xa0)\n            mstore(0x60, p2)\n            writeString(0x80, p0)\n            writeString(0xc0, p1)\n        }\n        _sendLogPayload(0x1c, 0xe4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n        }\n    }\n\n    function log(bytes32 p0, bytes32 p1, bytes32 p2) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        bytes32 m9;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            m9 := mload(0x120)\n            // Selector of `log(string,string,string)`.\n            mstore(0x00, 0x2ced7cef)\n            mstore(0x20, 0x60)\n            mstore(0x40, 0xa0)\n            mstore(0x60, 0xe0)\n            writeString(0x80, p0)\n            writeString(0xc0, p1)\n            writeString(0x100, p2)\n        }\n        _sendLogPayload(0x1c, 0x124);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n            mstore(0x120, m9)\n        }\n    }\n\n    function log(address p0, address p1, address p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,address,address,address)`.\n            mstore(0x00, 0x665bf134)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, address p1, address p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,address,address,bool)`.\n            mstore(0x00, 0x0e378994)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, address p1, address p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,address,address,uint256)`.\n            mstore(0x00, 0x94250d77)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, address p1, address p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,address,address,string)`.\n            mstore(0x00, 0xf808da20)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, address p1, bool p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,address,bool,address)`.\n            mstore(0x00, 0x9f1bc36e)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,address,bool,bool)`.\n            mstore(0x00, 0x2cd4134a)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, address p1, bool p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,address,bool,uint256)`.\n            mstore(0x00, 0x3971e78c)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, address p1, bool p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,address,bool,string)`.\n            mstore(0x00, 0xaa6540c8)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, address p1, uint256 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,address,uint256,address)`.\n            mstore(0x00, 0x8da6def5)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, address p1, uint256 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,address,uint256,bool)`.\n            mstore(0x00, 0x9b4254e2)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,address,uint256,uint256)`.\n            mstore(0x00, 0xbe553481)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, address p1, uint256 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,address,uint256,string)`.\n            mstore(0x00, 0xfdb4f990)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, address p1, bytes32 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,address,string,address)`.\n            mstore(0x00, 0x8f736d16)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, address p1, bytes32 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,address,string,bool)`.\n            mstore(0x00, 0x6f1a594e)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, address p1, bytes32 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,address,string,uint256)`.\n            mstore(0x00, 0xef1cefe7)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, address p1, bytes32 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(address,address,string,string)`.\n            mstore(0x00, 0x21bdaf25)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p2)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(address p0, bool p1, address p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,bool,address,address)`.\n            mstore(0x00, 0x660375dd)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,bool,address,bool)`.\n            mstore(0x00, 0xa6f50b0f)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, bool p1, address p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,bool,address,uint256)`.\n            mstore(0x00, 0xa75c59de)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, bool p1, address p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,bool,address,string)`.\n            mstore(0x00, 0x2dd778e6)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,bool,bool,address)`.\n            mstore(0x00, 0xcf394485)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,bool,bool,bool)`.\n            mstore(0x00, 0xcac43479)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,bool,bool,uint256)`.\n            mstore(0x00, 0x8c4e5de6)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, bool p1, bool p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,bool,bool,string)`.\n            mstore(0x00, 0xdfc4a2e8)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, bool p1, uint256 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,bool,uint256,address)`.\n            mstore(0x00, 0xccf790a1)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,bool,uint256,bool)`.\n            mstore(0x00, 0xc4643e20)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,bool,uint256,uint256)`.\n            mstore(0x00, 0x386ff5f4)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, bool p1, uint256 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,bool,uint256,string)`.\n            mstore(0x00, 0x0aa6cfad)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, bool p1, bytes32 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,bool,string,address)`.\n            mstore(0x00, 0x19fd4956)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, bool p1, bytes32 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,bool,string,bool)`.\n            mstore(0x00, 0x50ad461d)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, bool p1, bytes32 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,bool,string,uint256)`.\n            mstore(0x00, 0x80e6a20b)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, bool p1, bytes32 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(address,bool,string,string)`.\n            mstore(0x00, 0x475c5c33)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p2)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(address p0, uint256 p1, address p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,uint256,address,address)`.\n            mstore(0x00, 0x478d1c62)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, uint256 p1, address p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,uint256,address,bool)`.\n            mstore(0x00, 0xa1bcc9b3)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,uint256,address,uint256)`.\n            mstore(0x00, 0x100f650e)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, uint256 p1, address p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,uint256,address,string)`.\n            mstore(0x00, 0x1da986ea)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, uint256 p1, bool p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,uint256,bool,address)`.\n            mstore(0x00, 0xa31bfdcc)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,uint256,bool,bool)`.\n            mstore(0x00, 0x3bf5e537)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,uint256,bool,uint256)`.\n            mstore(0x00, 0x22f6b999)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, uint256 p1, bool p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,uint256,bool,string)`.\n            mstore(0x00, 0xc5ad85f9)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,uint256,uint256,address)`.\n            mstore(0x00, 0x20e3984d)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,uint256,uint256,bool)`.\n            mstore(0x00, 0x66f1bc67)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(address,uint256,uint256,uint256)`.\n            mstore(0x00, 0x34f0e636)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(address p0, uint256 p1, uint256 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,uint256,uint256,string)`.\n            mstore(0x00, 0x4a28c017)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, uint256 p1, bytes32 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,uint256,string,address)`.\n            mstore(0x00, 0x5c430d47)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, uint256 p1, bytes32 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,uint256,string,bool)`.\n            mstore(0x00, 0xcf18105c)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, uint256 p1, bytes32 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,uint256,string,uint256)`.\n            mstore(0x00, 0xbf01f891)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, uint256 p1, bytes32 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(address,uint256,string,string)`.\n            mstore(0x00, 0x88a8c406)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p2)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(address p0, bytes32 p1, address p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,string,address,address)`.\n            mstore(0x00, 0x0d36fa20)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, bytes32 p1, address p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,string,address,bool)`.\n            mstore(0x00, 0x0df12b76)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, bytes32 p1, address p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,string,address,uint256)`.\n            mstore(0x00, 0x457fe3cf)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, bytes32 p1, address p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(address,string,address,string)`.\n            mstore(0x00, 0xf7e36245)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p1)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(address p0, bytes32 p1, bool p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,string,bool,address)`.\n            mstore(0x00, 0x205871c2)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, bytes32 p1, bool p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,string,bool,bool)`.\n            mstore(0x00, 0x5f1d5c9f)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, bytes32 p1, bool p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,string,bool,uint256)`.\n            mstore(0x00, 0x515e38b6)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, bytes32 p1, bool p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(address,string,bool,string)`.\n            mstore(0x00, 0xbc0b61fe)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p1)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(address p0, bytes32 p1, uint256 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,string,uint256,address)`.\n            mstore(0x00, 0x63183678)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, bytes32 p1, uint256 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,string,uint256,bool)`.\n            mstore(0x00, 0x0ef7e050)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, bytes32 p1, uint256 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(address,string,uint256,uint256)`.\n            mstore(0x00, 0x1dc8e1b8)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(address p0, bytes32 p1, uint256 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(address,string,uint256,string)`.\n            mstore(0x00, 0x448830a8)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p1)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(address p0, bytes32 p1, bytes32 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(address,string,string,address)`.\n            mstore(0x00, 0xa04e2f87)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, 0xc0)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n            writeString(0xe0, p2)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(address p0, bytes32 p1, bytes32 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(address,string,string,bool)`.\n            mstore(0x00, 0x35a5071f)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, 0xc0)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n            writeString(0xe0, p2)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(address p0, bytes32 p1, bytes32 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(address,string,string,uint256)`.\n            mstore(0x00, 0x159f8927)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, 0xc0)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n            writeString(0xe0, p2)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(address p0, bytes32 p1, bytes32 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        bytes32 m9;\n        bytes32 m10;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            m9 := mload(0x120)\n            m10 := mload(0x140)\n            // Selector of `log(address,string,string,string)`.\n            mstore(0x00, 0x5d02c50b)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, 0xc0)\n            mstore(0x80, 0x100)\n            writeString(0xa0, p1)\n            writeString(0xe0, p2)\n            writeString(0x120, p3)\n        }\n        _sendLogPayload(0x1c, 0x144);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n            mstore(0x120, m9)\n            mstore(0x140, m10)\n        }\n    }\n\n    function log(bool p0, address p1, address p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,address,address,address)`.\n            mstore(0x00, 0x1d14d001)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,address,address,bool)`.\n            mstore(0x00, 0x46600be0)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, address p1, address p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,address,address,uint256)`.\n            mstore(0x00, 0x0c66d1be)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, address p1, address p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,address,address,string)`.\n            mstore(0x00, 0xd812a167)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,address,bool,address)`.\n            mstore(0x00, 0x1c41a336)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,address,bool,bool)`.\n            mstore(0x00, 0x6a9c478b)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,address,bool,uint256)`.\n            mstore(0x00, 0x07831502)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, address p1, bool p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,address,bool,string)`.\n            mstore(0x00, 0x4a66cb34)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, address p1, uint256 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,address,uint256,address)`.\n            mstore(0x00, 0x136b05dd)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,address,uint256,bool)`.\n            mstore(0x00, 0xd6019f1c)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,address,uint256,uint256)`.\n            mstore(0x00, 0x7bf181a1)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, address p1, uint256 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,address,uint256,string)`.\n            mstore(0x00, 0x51f09ff8)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, address p1, bytes32 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,address,string,address)`.\n            mstore(0x00, 0x6f7c603e)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, address p1, bytes32 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,address,string,bool)`.\n            mstore(0x00, 0xe2bfd60b)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, address p1, bytes32 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,address,string,uint256)`.\n            mstore(0x00, 0xc21f64c7)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, address p1, bytes32 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(bool,address,string,string)`.\n            mstore(0x00, 0xa73c1db6)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p2)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,bool,address,address)`.\n            mstore(0x00, 0xf4880ea4)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,bool,address,bool)`.\n            mstore(0x00, 0xc0a302d8)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,bool,address,uint256)`.\n            mstore(0x00, 0x4c123d57)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, bool p1, address p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,bool,address,string)`.\n            mstore(0x00, 0xa0a47963)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,bool,bool,address)`.\n            mstore(0x00, 0x8c329b1a)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,bool,bool,bool)`.\n            mstore(0x00, 0x3b2a5ce0)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,bool,bool,uint256)`.\n            mstore(0x00, 0x6d7045c1)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, bool p1, bool p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,bool,bool,string)`.\n            mstore(0x00, 0x2ae408d4)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,bool,uint256,address)`.\n            mstore(0x00, 0x54a7a9a0)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,bool,uint256,bool)`.\n            mstore(0x00, 0x619e4d0e)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,bool,uint256,uint256)`.\n            mstore(0x00, 0x0bb00eab)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, bool p1, uint256 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,bool,uint256,string)`.\n            mstore(0x00, 0x7dd4d0e0)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, bool p1, bytes32 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,bool,string,address)`.\n            mstore(0x00, 0xf9ad2b89)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, bool p1, bytes32 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,bool,string,bool)`.\n            mstore(0x00, 0xb857163a)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, bool p1, bytes32 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,bool,string,uint256)`.\n            mstore(0x00, 0xe3a9ca2f)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, bool p1, bytes32 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(bool,bool,string,string)`.\n            mstore(0x00, 0x6d1e8751)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p2)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bool p0, uint256 p1, address p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,uint256,address,address)`.\n            mstore(0x00, 0x26f560a8)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,uint256,address,bool)`.\n            mstore(0x00, 0xb4c314ff)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,uint256,address,uint256)`.\n            mstore(0x00, 0x1537dc87)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, uint256 p1, address p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,uint256,address,string)`.\n            mstore(0x00, 0x1bb3b09a)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,uint256,bool,address)`.\n            mstore(0x00, 0x9acd3616)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,uint256,bool,bool)`.\n            mstore(0x00, 0xceb5f4d7)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,uint256,bool,uint256)`.\n            mstore(0x00, 0x7f9bbca2)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, uint256 p1, bool p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,uint256,bool,string)`.\n            mstore(0x00, 0x9143dbb1)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,uint256,uint256,address)`.\n            mstore(0x00, 0x00dd87b9)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,uint256,uint256,bool)`.\n            mstore(0x00, 0xbe984353)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(bool,uint256,uint256,uint256)`.\n            mstore(0x00, 0x374bb4b2)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,uint256,uint256,string)`.\n            mstore(0x00, 0x8e69fb5d)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, uint256 p1, bytes32 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,uint256,string,address)`.\n            mstore(0x00, 0xfedd1fff)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, uint256 p1, bytes32 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,uint256,string,bool)`.\n            mstore(0x00, 0xe5e70b2b)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, uint256 p1, bytes32 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,uint256,string,uint256)`.\n            mstore(0x00, 0x6a1199e2)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, uint256 p1, bytes32 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(bool,uint256,string,string)`.\n            mstore(0x00, 0xf5bc2249)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p2)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bool p0, bytes32 p1, address p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,string,address,address)`.\n            mstore(0x00, 0x2b2b18dc)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, bytes32 p1, address p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,string,address,bool)`.\n            mstore(0x00, 0x6dd434ca)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, bytes32 p1, address p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,string,address,uint256)`.\n            mstore(0x00, 0xa5cada94)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, bytes32 p1, address p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(bool,string,address,string)`.\n            mstore(0x00, 0x12d6c788)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p1)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bool p0, bytes32 p1, bool p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,string,bool,address)`.\n            mstore(0x00, 0x538e06ab)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, bytes32 p1, bool p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,string,bool,bool)`.\n            mstore(0x00, 0xdc5e935b)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, bytes32 p1, bool p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,string,bool,uint256)`.\n            mstore(0x00, 0x1606a393)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, bytes32 p1, bool p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(bool,string,bool,string)`.\n            mstore(0x00, 0x483d0416)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p1)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bool p0, bytes32 p1, uint256 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,string,uint256,address)`.\n            mstore(0x00, 0x1596a1ce)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, bytes32 p1, uint256 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,string,uint256,bool)`.\n            mstore(0x00, 0x6b0e5d53)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, bytes32 p1, uint256 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(bool,string,uint256,uint256)`.\n            mstore(0x00, 0x28863fcb)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bool p0, bytes32 p1, uint256 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(bool,string,uint256,string)`.\n            mstore(0x00, 0x1ad96de6)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p1)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bool p0, bytes32 p1, bytes32 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(bool,string,string,address)`.\n            mstore(0x00, 0x97d394d8)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, 0xc0)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n            writeString(0xe0, p2)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bool p0, bytes32 p1, bytes32 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(bool,string,string,bool)`.\n            mstore(0x00, 0x1e4b87e5)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, 0xc0)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n            writeString(0xe0, p2)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bool p0, bytes32 p1, bytes32 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(bool,string,string,uint256)`.\n            mstore(0x00, 0x7be0c3eb)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, 0xc0)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n            writeString(0xe0, p2)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bool p0, bytes32 p1, bytes32 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        bytes32 m9;\n        bytes32 m10;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            m9 := mload(0x120)\n            m10 := mload(0x140)\n            // Selector of `log(bool,string,string,string)`.\n            mstore(0x00, 0x1762e32a)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, 0xc0)\n            mstore(0x80, 0x100)\n            writeString(0xa0, p1)\n            writeString(0xe0, p2)\n            writeString(0x120, p3)\n        }\n        _sendLogPayload(0x1c, 0x144);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n            mstore(0x120, m9)\n            mstore(0x140, m10)\n        }\n    }\n\n    function log(uint256 p0, address p1, address p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,address,address,address)`.\n            mstore(0x00, 0x2488b414)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, address p1, address p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,address,address,bool)`.\n            mstore(0x00, 0x091ffaf5)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,address,address,uint256)`.\n            mstore(0x00, 0x736efbb6)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, address p1, address p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,address,address,string)`.\n            mstore(0x00, 0x031c6f73)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, address p1, bool p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,address,bool,address)`.\n            mstore(0x00, 0xef72c513)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,address,bool,bool)`.\n            mstore(0x00, 0xe351140f)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,address,bool,uint256)`.\n            mstore(0x00, 0x5abd992a)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, address p1, bool p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,address,bool,string)`.\n            mstore(0x00, 0x90fb06aa)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,address,uint256,address)`.\n            mstore(0x00, 0x15c127b5)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,address,uint256,bool)`.\n            mstore(0x00, 0x5f743a7c)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,address,uint256,uint256)`.\n            mstore(0x00, 0x0c9cd9c1)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, address p1, uint256 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,address,uint256,string)`.\n            mstore(0x00, 0xddb06521)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, address p1, bytes32 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,address,string,address)`.\n            mstore(0x00, 0x9cba8fff)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, address p1, bytes32 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,address,string,bool)`.\n            mstore(0x00, 0xcc32ab07)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, address p1, bytes32 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,address,string,uint256)`.\n            mstore(0x00, 0x46826b5d)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, address p1, bytes32 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(uint256,address,string,string)`.\n            mstore(0x00, 0x3e128ca3)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p2)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(uint256 p0, bool p1, address p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,bool,address,address)`.\n            mstore(0x00, 0xa1ef4cbb)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,bool,address,bool)`.\n            mstore(0x00, 0x454d54a5)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,bool,address,uint256)`.\n            mstore(0x00, 0x078287f5)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, bool p1, address p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,bool,address,string)`.\n            mstore(0x00, 0xade052c7)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,bool,bool,address)`.\n            mstore(0x00, 0x69640b59)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,bool,bool,bool)`.\n            mstore(0x00, 0xb6f577a1)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,bool,bool,uint256)`.\n            mstore(0x00, 0x7464ce23)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, bool p1, bool p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,bool,bool,string)`.\n            mstore(0x00, 0xdddb9561)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,bool,uint256,address)`.\n            mstore(0x00, 0x88cb6041)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,bool,uint256,bool)`.\n            mstore(0x00, 0x91a02e2a)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,bool,uint256,uint256)`.\n            mstore(0x00, 0xc6acc7a8)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,bool,uint256,string)`.\n            mstore(0x00, 0xde03e774)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, bool p1, bytes32 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,bool,string,address)`.\n            mstore(0x00, 0xef529018)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, bool p1, bytes32 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,bool,string,bool)`.\n            mstore(0x00, 0xeb928d7f)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, bool p1, bytes32 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,bool,string,uint256)`.\n            mstore(0x00, 0x2c1d0746)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, bool p1, bytes32 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(uint256,bool,string,string)`.\n            mstore(0x00, 0x68c8b8bd)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p2)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,uint256,address,address)`.\n            mstore(0x00, 0x56a5d1b1)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,uint256,address,bool)`.\n            mstore(0x00, 0x15cac476)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,uint256,address,uint256)`.\n            mstore(0x00, 0x88f6e4b2)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, uint256 p1, address p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,uint256,address,string)`.\n            mstore(0x00, 0x6cde40b8)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,uint256,bool,address)`.\n            mstore(0x00, 0x9a816a83)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,uint256,bool,bool)`.\n            mstore(0x00, 0xab085ae6)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,uint256,bool,uint256)`.\n            mstore(0x00, 0xeb7f6fd2)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,uint256,bool,string)`.\n            mstore(0x00, 0xa5b4fc99)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,uint256,uint256,address)`.\n            mstore(0x00, 0xfa8185af)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,uint256,uint256,bool)`.\n            mstore(0x00, 0xc598d185)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        assembly {\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            // Selector of `log(uint256,uint256,uint256,uint256)`.\n            mstore(0x00, 0x193fb800)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n        }\n        _sendLogPayload(0x1c, 0x84);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n        }\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,uint256,uint256,string)`.\n            mstore(0x00, 0x59cfcbe3)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0x80)\n            writeString(0xa0, p3)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, uint256 p1, bytes32 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,uint256,string,address)`.\n            mstore(0x00, 0x42d21db7)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, uint256 p1, bytes32 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,uint256,string,bool)`.\n            mstore(0x00, 0x7af6ab25)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, uint256 p1, bytes32 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,uint256,string,uint256)`.\n            mstore(0x00, 0x5da297eb)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, p3)\n            writeString(0xa0, p2)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, uint256 p1, bytes32 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(uint256,uint256,string,string)`.\n            mstore(0x00, 0x27d8afd2)\n            mstore(0x20, p0)\n            mstore(0x40, p1)\n            mstore(0x60, 0x80)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p2)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(uint256 p0, bytes32 p1, address p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,string,address,address)`.\n            mstore(0x00, 0x6168ed61)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, bytes32 p1, address p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,string,address,bool)`.\n            mstore(0x00, 0x90c30a56)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, bytes32 p1, address p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,string,address,uint256)`.\n            mstore(0x00, 0xe8d3018d)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, bytes32 p1, address p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(uint256,string,address,string)`.\n            mstore(0x00, 0x9c3adfa1)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p1)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(uint256 p0, bytes32 p1, bool p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,string,bool,address)`.\n            mstore(0x00, 0xae2ec581)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, bytes32 p1, bool p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,string,bool,bool)`.\n            mstore(0x00, 0xba535d9c)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, bytes32 p1, bool p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,string,bool,uint256)`.\n            mstore(0x00, 0xcf009880)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, bytes32 p1, bool p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(uint256,string,bool,string)`.\n            mstore(0x00, 0xd2d423cd)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p1)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(uint256 p0, bytes32 p1, uint256 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,string,uint256,address)`.\n            mstore(0x00, 0x3b2279b4)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, bytes32 p1, uint256 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,string,uint256,bool)`.\n            mstore(0x00, 0x691a8f74)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, bytes32 p1, uint256 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(uint256,string,uint256,uint256)`.\n            mstore(0x00, 0x82c25b74)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(uint256 p0, bytes32 p1, uint256 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(uint256,string,uint256,string)`.\n            mstore(0x00, 0xb7b914ca)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, p2)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p1)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(uint256 p0, bytes32 p1, bytes32 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(uint256,string,string,address)`.\n            mstore(0x00, 0xd583c602)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, 0xc0)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n            writeString(0xe0, p2)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(uint256 p0, bytes32 p1, bytes32 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(uint256,string,string,bool)`.\n            mstore(0x00, 0xb3a6b6bd)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, 0xc0)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n            writeString(0xe0, p2)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(uint256 p0, bytes32 p1, bytes32 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(uint256,string,string,uint256)`.\n            mstore(0x00, 0xb028c9bd)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, 0xc0)\n            mstore(0x80, p3)\n            writeString(0xa0, p1)\n            writeString(0xe0, p2)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(uint256 p0, bytes32 p1, bytes32 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        bytes32 m9;\n        bytes32 m10;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            m9 := mload(0x120)\n            m10 := mload(0x140)\n            // Selector of `log(uint256,string,string,string)`.\n            mstore(0x00, 0x21ad0683)\n            mstore(0x20, p0)\n            mstore(0x40, 0x80)\n            mstore(0x60, 0xc0)\n            mstore(0x80, 0x100)\n            writeString(0xa0, p1)\n            writeString(0xe0, p2)\n            writeString(0x120, p3)\n        }\n        _sendLogPayload(0x1c, 0x144);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n            mstore(0x120, m9)\n            mstore(0x140, m10)\n        }\n    }\n\n    function log(bytes32 p0, address p1, address p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,address,address,address)`.\n            mstore(0x00, 0xed8f28f6)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, address p1, address p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,address,address,bool)`.\n            mstore(0x00, 0xb59dbd60)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, address p1, address p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,address,address,uint256)`.\n            mstore(0x00, 0x8ef3f399)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, address p1, address p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,address,address,string)`.\n            mstore(0x00, 0x800a1c67)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p0)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, address p1, bool p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,address,bool,address)`.\n            mstore(0x00, 0x223603bd)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, address p1, bool p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,address,bool,bool)`.\n            mstore(0x00, 0x79884c2b)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, address p1, bool p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,address,bool,uint256)`.\n            mstore(0x00, 0x3e9f866a)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, address p1, bool p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,address,bool,string)`.\n            mstore(0x00, 0x0454c079)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p0)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, address p1, uint256 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,address,uint256,address)`.\n            mstore(0x00, 0x63fb8bc5)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, address p1, uint256 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,address,uint256,bool)`.\n            mstore(0x00, 0xfc4845f0)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, address p1, uint256 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,address,uint256,uint256)`.\n            mstore(0x00, 0xf8f51b1e)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, address p1, uint256 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,address,uint256,string)`.\n            mstore(0x00, 0x5a477632)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p0)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, address p1, bytes32 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,address,string,address)`.\n            mstore(0x00, 0xaabc9a31)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, 0xc0)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n            writeString(0xe0, p2)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, address p1, bytes32 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,address,string,bool)`.\n            mstore(0x00, 0x5f15d28c)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, 0xc0)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n            writeString(0xe0, p2)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, address p1, bytes32 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,address,string,uint256)`.\n            mstore(0x00, 0x91d1112e)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, 0xc0)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n            writeString(0xe0, p2)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, address p1, bytes32 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        bytes32 m9;\n        bytes32 m10;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            m9 := mload(0x120)\n            m10 := mload(0x140)\n            // Selector of `log(string,address,string,string)`.\n            mstore(0x00, 0x245986f2)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, 0xc0)\n            mstore(0x80, 0x100)\n            writeString(0xa0, p0)\n            writeString(0xe0, p2)\n            writeString(0x120, p3)\n        }\n        _sendLogPayload(0x1c, 0x144);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n            mstore(0x120, m9)\n            mstore(0x140, m10)\n        }\n    }\n\n    function log(bytes32 p0, bool p1, address p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,bool,address,address)`.\n            mstore(0x00, 0x33e9dd1d)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, bool p1, address p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,bool,address,bool)`.\n            mstore(0x00, 0x958c28c6)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, bool p1, address p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,bool,address,uint256)`.\n            mstore(0x00, 0x5d08bb05)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, bool p1, address p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,bool,address,string)`.\n            mstore(0x00, 0x2d8e33a4)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p0)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, bool p1, bool p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,bool,bool,address)`.\n            mstore(0x00, 0x7190a529)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, bool p1, bool p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,bool,bool,bool)`.\n            mstore(0x00, 0x895af8c5)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, bool p1, bool p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,bool,bool,uint256)`.\n            mstore(0x00, 0x8e3f78a9)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, bool p1, bool p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,bool,bool,string)`.\n            mstore(0x00, 0x9d22d5dd)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p0)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, bool p1, uint256 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,bool,uint256,address)`.\n            mstore(0x00, 0x935e09bf)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, bool p1, uint256 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,bool,uint256,bool)`.\n            mstore(0x00, 0x8af7cf8a)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, bool p1, uint256 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,bool,uint256,uint256)`.\n            mstore(0x00, 0x64b5bb67)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, bool p1, uint256 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,bool,uint256,string)`.\n            mstore(0x00, 0x742d6ee7)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p0)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, bool p1, bytes32 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,bool,string,address)`.\n            mstore(0x00, 0xe0625b29)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, 0xc0)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n            writeString(0xe0, p2)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, bool p1, bytes32 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,bool,string,bool)`.\n            mstore(0x00, 0x3f8a701d)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, 0xc0)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n            writeString(0xe0, p2)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, bool p1, bytes32 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,bool,string,uint256)`.\n            mstore(0x00, 0x24f91465)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, 0xc0)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n            writeString(0xe0, p2)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, bool p1, bytes32 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        bytes32 m9;\n        bytes32 m10;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            m9 := mload(0x120)\n            m10 := mload(0x140)\n            // Selector of `log(string,bool,string,string)`.\n            mstore(0x00, 0xa826caeb)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, 0xc0)\n            mstore(0x80, 0x100)\n            writeString(0xa0, p0)\n            writeString(0xe0, p2)\n            writeString(0x120, p3)\n        }\n        _sendLogPayload(0x1c, 0x144);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n            mstore(0x120, m9)\n            mstore(0x140, m10)\n        }\n    }\n\n    function log(bytes32 p0, uint256 p1, address p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,uint256,address,address)`.\n            mstore(0x00, 0x5ea2b7ae)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, uint256 p1, address p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,uint256,address,bool)`.\n            mstore(0x00, 0x82112a42)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, uint256 p1, address p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,uint256,address,uint256)`.\n            mstore(0x00, 0x4f04fdc6)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, uint256 p1, address p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,uint256,address,string)`.\n            mstore(0x00, 0x9ffb2f93)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p0)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, uint256 p1, bool p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,uint256,bool,address)`.\n            mstore(0x00, 0xe0e95b98)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, uint256 p1, bool p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,uint256,bool,bool)`.\n            mstore(0x00, 0x354c36d6)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, uint256 p1, bool p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,uint256,bool,uint256)`.\n            mstore(0x00, 0xe41b6f6f)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, uint256 p1, bool p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,uint256,bool,string)`.\n            mstore(0x00, 0xabf73a98)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p0)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, uint256 p1, uint256 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,uint256,uint256,address)`.\n            mstore(0x00, 0xe21de278)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, uint256 p1, uint256 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,uint256,uint256,bool)`.\n            mstore(0x00, 0x7626db92)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            // Selector of `log(string,uint256,uint256,uint256)`.\n            mstore(0x00, 0xa7a87853)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n        }\n        _sendLogPayload(0x1c, 0xc4);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n        }\n    }\n\n    function log(bytes32 p0, uint256 p1, uint256 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,uint256,uint256,string)`.\n            mstore(0x00, 0x854b3496)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, p2)\n            mstore(0x80, 0xc0)\n            writeString(0xa0, p0)\n            writeString(0xe0, p3)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, uint256 p1, bytes32 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,uint256,string,address)`.\n            mstore(0x00, 0x7c4632a4)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, 0xc0)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n            writeString(0xe0, p2)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, uint256 p1, bytes32 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,uint256,string,bool)`.\n            mstore(0x00, 0x7d24491d)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, 0xc0)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n            writeString(0xe0, p2)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, uint256 p1, bytes32 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,uint256,string,uint256)`.\n            mstore(0x00, 0xc67ea9d1)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, 0xc0)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n            writeString(0xe0, p2)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, uint256 p1, bytes32 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        bytes32 m9;\n        bytes32 m10;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            m9 := mload(0x120)\n            m10 := mload(0x140)\n            // Selector of `log(string,uint256,string,string)`.\n            mstore(0x00, 0x5ab84e1f)\n            mstore(0x20, 0x80)\n            mstore(0x40, p1)\n            mstore(0x60, 0xc0)\n            mstore(0x80, 0x100)\n            writeString(0xa0, p0)\n            writeString(0xe0, p2)\n            writeString(0x120, p3)\n        }\n        _sendLogPayload(0x1c, 0x144);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n            mstore(0x120, m9)\n            mstore(0x140, m10)\n        }\n    }\n\n    function log(bytes32 p0, bytes32 p1, address p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,string,address,address)`.\n            mstore(0x00, 0x439c7bef)\n            mstore(0x20, 0x80)\n            mstore(0x40, 0xc0)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n            writeString(0xe0, p1)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, bytes32 p1, address p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,string,address,bool)`.\n            mstore(0x00, 0x5ccd4e37)\n            mstore(0x20, 0x80)\n            mstore(0x40, 0xc0)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n            writeString(0xe0, p1)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, bytes32 p1, address p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,string,address,uint256)`.\n            mstore(0x00, 0x7cc3c607)\n            mstore(0x20, 0x80)\n            mstore(0x40, 0xc0)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n            writeString(0xe0, p1)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, bytes32 p1, address p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        bytes32 m9;\n        bytes32 m10;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            m9 := mload(0x120)\n            m10 := mload(0x140)\n            // Selector of `log(string,string,address,string)`.\n            mstore(0x00, 0xeb1bff80)\n            mstore(0x20, 0x80)\n            mstore(0x40, 0xc0)\n            mstore(0x60, p2)\n            mstore(0x80, 0x100)\n            writeString(0xa0, p0)\n            writeString(0xe0, p1)\n            writeString(0x120, p3)\n        }\n        _sendLogPayload(0x1c, 0x144);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n            mstore(0x120, m9)\n            mstore(0x140, m10)\n        }\n    }\n\n    function log(bytes32 p0, bytes32 p1, bool p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,string,bool,address)`.\n            mstore(0x00, 0xc371c7db)\n            mstore(0x20, 0x80)\n            mstore(0x40, 0xc0)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n            writeString(0xe0, p1)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, bytes32 p1, bool p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,string,bool,bool)`.\n            mstore(0x00, 0x40785869)\n            mstore(0x20, 0x80)\n            mstore(0x40, 0xc0)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n            writeString(0xe0, p1)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, bytes32 p1, bool p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,string,bool,uint256)`.\n            mstore(0x00, 0xd6aefad2)\n            mstore(0x20, 0x80)\n            mstore(0x40, 0xc0)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n            writeString(0xe0, p1)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, bytes32 p1, bool p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        bytes32 m9;\n        bytes32 m10;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            m9 := mload(0x120)\n            m10 := mload(0x140)\n            // Selector of `log(string,string,bool,string)`.\n            mstore(0x00, 0x5e84b0ea)\n            mstore(0x20, 0x80)\n            mstore(0x40, 0xc0)\n            mstore(0x60, p2)\n            mstore(0x80, 0x100)\n            writeString(0xa0, p0)\n            writeString(0xe0, p1)\n            writeString(0x120, p3)\n        }\n        _sendLogPayload(0x1c, 0x144);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n            mstore(0x120, m9)\n            mstore(0x140, m10)\n        }\n    }\n\n    function log(bytes32 p0, bytes32 p1, uint256 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,string,uint256,address)`.\n            mstore(0x00, 0x1023f7b2)\n            mstore(0x20, 0x80)\n            mstore(0x40, 0xc0)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n            writeString(0xe0, p1)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, bytes32 p1, uint256 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,string,uint256,bool)`.\n            mstore(0x00, 0xc3a8a654)\n            mstore(0x20, 0x80)\n            mstore(0x40, 0xc0)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n            writeString(0xe0, p1)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, bytes32 p1, uint256 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            // Selector of `log(string,string,uint256,uint256)`.\n            mstore(0x00, 0xf45d7d2c)\n            mstore(0x20, 0x80)\n            mstore(0x40, 0xc0)\n            mstore(0x60, p2)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n            writeString(0xe0, p1)\n        }\n        _sendLogPayload(0x1c, 0x104);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n        }\n    }\n\n    function log(bytes32 p0, bytes32 p1, uint256 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        bytes32 m9;\n        bytes32 m10;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            m9 := mload(0x120)\n            m10 := mload(0x140)\n            // Selector of `log(string,string,uint256,string)`.\n            mstore(0x00, 0x5d1a971a)\n            mstore(0x20, 0x80)\n            mstore(0x40, 0xc0)\n            mstore(0x60, p2)\n            mstore(0x80, 0x100)\n            writeString(0xa0, p0)\n            writeString(0xe0, p1)\n            writeString(0x120, p3)\n        }\n        _sendLogPayload(0x1c, 0x144);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n            mstore(0x120, m9)\n            mstore(0x140, m10)\n        }\n    }\n\n    function log(bytes32 p0, bytes32 p1, bytes32 p2, address p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        bytes32 m9;\n        bytes32 m10;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            m9 := mload(0x120)\n            m10 := mload(0x140)\n            // Selector of `log(string,string,string,address)`.\n            mstore(0x00, 0x6d572f44)\n            mstore(0x20, 0x80)\n            mstore(0x40, 0xc0)\n            mstore(0x60, 0x100)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n            writeString(0xe0, p1)\n            writeString(0x120, p2)\n        }\n        _sendLogPayload(0x1c, 0x144);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n            mstore(0x120, m9)\n            mstore(0x140, m10)\n        }\n    }\n\n    function log(bytes32 p0, bytes32 p1, bytes32 p2, bool p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        bytes32 m9;\n        bytes32 m10;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            m9 := mload(0x120)\n            m10 := mload(0x140)\n            // Selector of `log(string,string,string,bool)`.\n            mstore(0x00, 0x2c1754ed)\n            mstore(0x20, 0x80)\n            mstore(0x40, 0xc0)\n            mstore(0x60, 0x100)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n            writeString(0xe0, p1)\n            writeString(0x120, p2)\n        }\n        _sendLogPayload(0x1c, 0x144);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n            mstore(0x120, m9)\n            mstore(0x140, m10)\n        }\n    }\n\n    function log(bytes32 p0, bytes32 p1, bytes32 p2, uint256 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        bytes32 m9;\n        bytes32 m10;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            m9 := mload(0x120)\n            m10 := mload(0x140)\n            // Selector of `log(string,string,string,uint256)`.\n            mstore(0x00, 0x8eafb02b)\n            mstore(0x20, 0x80)\n            mstore(0x40, 0xc0)\n            mstore(0x60, 0x100)\n            mstore(0x80, p3)\n            writeString(0xa0, p0)\n            writeString(0xe0, p1)\n            writeString(0x120, p2)\n        }\n        _sendLogPayload(0x1c, 0x144);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n            mstore(0x120, m9)\n            mstore(0x140, m10)\n        }\n    }\n\n    function log(bytes32 p0, bytes32 p1, bytes32 p2, bytes32 p3) internal pure {\n        bytes32 m0;\n        bytes32 m1;\n        bytes32 m2;\n        bytes32 m3;\n        bytes32 m4;\n        bytes32 m5;\n        bytes32 m6;\n        bytes32 m7;\n        bytes32 m8;\n        bytes32 m9;\n        bytes32 m10;\n        bytes32 m11;\n        bytes32 m12;\n        assembly {\n            function writeString(pos, w) {\n                let length := 0\n                for {} lt(length, 0x20) { length := add(length, 1) } { if iszero(byte(length, w)) { break } }\n                mstore(pos, length)\n                let shift := sub(256, shl(3, length))\n                mstore(add(pos, 0x20), shl(shift, shr(shift, w)))\n            }\n            m0 := mload(0x00)\n            m1 := mload(0x20)\n            m2 := mload(0x40)\n            m3 := mload(0x60)\n            m4 := mload(0x80)\n            m5 := mload(0xa0)\n            m6 := mload(0xc0)\n            m7 := mload(0xe0)\n            m8 := mload(0x100)\n            m9 := mload(0x120)\n            m10 := mload(0x140)\n            m11 := mload(0x160)\n            m12 := mload(0x180)\n            // Selector of `log(string,string,string,string)`.\n            mstore(0x00, 0xde68f20a)\n            mstore(0x20, 0x80)\n            mstore(0x40, 0xc0)\n            mstore(0x60, 0x100)\n            mstore(0x80, 0x140)\n            writeString(0xa0, p0)\n            writeString(0xe0, p1)\n            writeString(0x120, p2)\n            writeString(0x160, p3)\n        }\n        _sendLogPayload(0x1c, 0x184);\n        assembly {\n            mstore(0x00, m0)\n            mstore(0x20, m1)\n            mstore(0x40, m2)\n            mstore(0x60, m3)\n            mstore(0x80, m4)\n            mstore(0xa0, m5)\n            mstore(0xc0, m6)\n            mstore(0xe0, m7)\n            mstore(0x100, m8)\n            mstore(0x120, m9)\n            mstore(0x140, m10)\n            mstore(0x160, m11)\n            mstore(0x180, m12)\n        }\n    }\n}\n"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.20;\n\nimport {IAccessControl} from \"@openzeppelin/contracts/access/IAccessControl.sol\";\nimport {ContextUpgradeable} from \"../utils/ContextUpgradeable.sol\";\nimport {ERC165Upgradeable} from \"../utils/introspection/ERC165Upgradeable.sol\";\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```solidity\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```solidity\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n * to enforce additional security measures for this role.\n */\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControl, ERC165Upgradeable {\n    struct RoleData {\n        mapping(address account => bool) hasRole;\n        bytes32 adminRole;\n    }\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n\n    /// @custom:storage-location erc7201:openzeppelin.storage.AccessControl\n    struct AccessControlStorage {\n        mapping(bytes32 role => RoleData) _roles;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.AccessControl\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant AccessControlStorageLocation = 0x02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800;\n\n    function _getAccessControlStorage() private pure returns (AccessControlStorage storage $) {\n        assembly {\n            $.slot := AccessControlStorageLocation\n        }\n    }\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    function __AccessControl_init() internal onlyInitializing {\n    }\n\n    function __AccessControl_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        return $._roles[role].hasRole[account];\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\n     * is missing `role`.\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert AccessControlUnauthorizedAccount(account, role);\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        return $._roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\n        if (callerConfirmation != _msgSender()) {\n            revert AccessControlBadConfirmation();\n        }\n\n        _revokeRole(role, callerConfirmation);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        $._roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        if (!hasRole(role, account)) {\n            $._roles[role].hasRole[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\n        AccessControlStorage storage $ = _getAccessControlStorage();\n        if (hasRole(role, account)) {\n            $._roles[role].hasRole[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Storage of the initializable contract.\n     *\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\n     * when using with upgradeable contracts.\n     *\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\n     */\n    struct InitializableStorage {\n        /**\n         * @dev Indicates that the contract has been initialized.\n         */\n        uint64 _initialized;\n        /**\n         * @dev Indicates that the contract is in the process of being initialized.\n         */\n        bool _initializing;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.Initializable\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\n\n    /**\n     * @dev The contract is already initialized.\n     */\n    error InvalidInitialization();\n\n    /**\n     * @dev The contract is not initializing.\n     */\n    error NotInitializing();\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint64 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\n     * production.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        // Cache values to avoid duplicated sloads\n        bool isTopLevelCall = !$._initializing;\n        uint64 initialized = $._initialized;\n\n        // Allowed calls:\n        // - initialSetup: the contract is not in the initializing state and no previous version was\n        //                 initialized\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\n        //                 current contract is just being deployed\n        bool initialSetup = initialized == 0 && isTopLevelCall;\n        bool construction = initialized == 1 && address(this).code.length == 0;\n\n        if (!initialSetup && !construction) {\n            revert InvalidInitialization();\n        }\n        $._initialized = 1;\n        if (isTopLevelCall) {\n            $._initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            $._initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint64 version) {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing || $._initialized >= version) {\n            revert InvalidInitialization();\n        }\n        $._initialized = version;\n        $._initializing = true;\n        _;\n        $._initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        _checkInitializing();\n        _;\n    }\n\n    /**\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\n     */\n    function _checkInitializing() internal view virtual {\n        if (!_isInitializing()) {\n            revert NotInitializing();\n        }\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing) {\n            revert InvalidInitialization();\n        }\n        if ($._initialized != type(uint64).max) {\n            $._initialized = type(uint64).max;\n            emit Initialized(type(uint64).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint64) {\n        return _getInitializableStorage()._initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _getInitializableStorage()._initializing;\n    }\n\n    /**\n     * @dev Returns a pointer to the storage namespace.\n     */\n    // solhint-disable-next-line var-name-mixedcase\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\n        assembly {\n            $.slot := INITIALIZABLE_STORAGE\n        }\n    }\n}\n"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/UUPSUpgradeable.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC1822Proxiable} from \"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\";\nimport {ERC1967Utils} from \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\";\nimport {Initializable} from \"./Initializable.sol\";\n\n/**\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\n *\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\n * `UUPSUpgradeable` with a custom implementation of upgrades.\n *\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\n */\nabstract contract UUPSUpgradeable is Initializable, IERC1822Proxiable {\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\n    address private immutable __self = address(this);\n\n    /**\n     * @dev The version of the upgrade interface of the contract. If this getter is missing, both `upgradeTo(address)`\n     * and `upgradeToAndCall(address,bytes)` are present, and `upgradeTo` must be used if no function should be called,\n     * while `upgradeToAndCall` will invoke the `receive` function if the second argument is the empty byte string.\n     * If the getter returns `\"5.0.0\"`, only `upgradeToAndCall(address,bytes)` is present, and the second argument must\n     * be the empty byte string if no function should be called, making it impossible to invoke the `receive` function\n     * during an upgrade.\n     */\n    string public constant UPGRADE_INTERFACE_VERSION = \"5.0.0\";\n\n    /**\n     * @dev The call is from an unauthorized context.\n     */\n    error UUPSUnauthorizedCallContext();\n\n    /**\n     * @dev The storage `slot` is unsupported as a UUID.\n     */\n    error UUPSUnsupportedProxiableUUID(bytes32 slot);\n\n    /**\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\n     * fail.\n     */\n    modifier onlyProxy() {\n        _checkProxy();\n        _;\n    }\n\n    /**\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\n     * callable on the implementing contract but not through proxies.\n     */\n    modifier notDelegated() {\n        _checkNotDelegated();\n        _;\n    }\n\n    function __UUPSUpgradeable_init() internal onlyInitializing {\n    }\n\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\n     */\n    function proxiableUUID() external view virtual notDelegated returns (bytes32) {\n        return ERC1967Utils.IMPLEMENTATION_SLOT;\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\n     * encoded in `data`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     *\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\n     */\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallUUPS(newImplementation, data);\n    }\n\n    /**\n     * @dev Reverts if the execution is not performed via delegatecall or the execution\n     * context is not of a proxy with an ERC1967-compliant implementation pointing to self.\n     * See {_onlyProxy}.\n     */\n    function _checkProxy() internal view virtual {\n        if (\n            address(this) == __self || // Must be called through delegatecall\n            ERC1967Utils.getImplementation() != __self // Must be called through an active proxy\n        ) {\n            revert UUPSUnauthorizedCallContext();\n        }\n    }\n\n    /**\n     * @dev Reverts if the execution is performed via delegatecall.\n     * See {notDelegated}.\n     */\n    function _checkNotDelegated() internal view virtual {\n        if (address(this) != __self) {\n            // Must not be called through delegatecall\n            revert UUPSUnauthorizedCallContext();\n        }\n    }\n\n    /**\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\n     * {upgradeToAndCall}.\n     *\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\n     *\n     * ```solidity\n     * function _authorizeUpgrade(address) internal onlyOwner {}\n     * ```\n     */\n    function _authorizeUpgrade(address newImplementation) internal virtual;\n\n    /**\n     * @dev Performs an implementation upgrade with a security check for UUPS proxies, and additional setup call.\n     *\n     * As a security check, {proxiableUUID} is invoked in the new implementation, and the return value\n     * is expected to be the implementation slot in ERC1967.\n     *\n     * Emits an {IERC1967-Upgraded} event.\n     */\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data) private {\n        try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\n            if (slot != ERC1967Utils.IMPLEMENTATION_SLOT) {\n                revert UUPSUnsupportedProxiableUUID(slot);\n            }\n            ERC1967Utils.upgradeToAndCall(newImplementation, data);\n        } catch {\n            // The implementation is not UUPS\n            revert ERC1967Utils.ERC1967InvalidImplementation(newImplementation);\n        }\n    }\n}\n"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {IERC20Metadata} from \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport {ContextUpgradeable} from \"../../utils/ContextUpgradeable.sol\";\nimport {IERC20Errors} from \"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\";\nimport {Initializable} from \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n */\nabstract contract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20, IERC20Metadata, IERC20Errors {\n    /// @custom:storage-location erc7201:openzeppelin.storage.ERC20\n    struct ERC20Storage {\n        mapping(address account => uint256) _balances;\n\n        mapping(address account => mapping(address spender => uint256)) _allowances;\n\n        uint256 _totalSupply;\n\n        string _name;\n        string _symbol;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.ERC20\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant ERC20StorageLocation = 0x52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace00;\n\n    function _getERC20Storage() private pure returns (ERC20Storage storage $) {\n        assembly {\n            $.slot := ERC20StorageLocation\n        }\n    }\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\n        __ERC20_init_unchained(name_, symbol_);\n    }\n\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\n        ERC20Storage storage $ = _getERC20Storage();\n        $._name = name_;\n        $._symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        ERC20Storage storage $ = _getERC20Storage();\n        return $._name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        ERC20Storage storage $ = _getERC20Storage();\n        return $._symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual returns (uint256) {\n        ERC20Storage storage $ = _getERC20Storage();\n        return $._totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual returns (uint256) {\n        ERC20Storage storage $ = _getERC20Storage();\n        return $._balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `value`.\n     */\n    function transfer(address to, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\n        ERC20Storage storage $ = _getERC20Storage();\n        return $._allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `value`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `value`.\n     */\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, value);\n        _transfer(from, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        if (from == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        if (to == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(from, to, value);\n    }\n\n    /**\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n     * this function.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _update(address from, address to, uint256 value) internal virtual {\n        ERC20Storage storage $ = _getERC20Storage();\n        if (from == address(0)) {\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\n            $._totalSupply += value;\n        } else {\n            uint256 fromBalance = $._balances[from];\n            if (fromBalance < value) {\n                revert ERC20InsufficientBalance(from, fromBalance, value);\n            }\n            unchecked {\n                // Overflow not possible: value <= fromBalance <= totalSupply.\n                $._balances[from] = fromBalance - value;\n            }\n        }\n\n        if (to == address(0)) {\n            unchecked {\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\n                $._totalSupply -= value;\n            }\n        } else {\n            unchecked {\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\n                $._balances[to] += value;\n            }\n        }\n\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n     * Relies on the `_update` mechanism\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _mint(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(address(0), account, value);\n    }\n\n    /**\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n     * Relies on the `_update` mechanism.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead\n     */\n    function _burn(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        _update(account, address(0), value);\n    }\n\n    /**\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        _approve(owner, spender, value, true);\n    }\n\n    /**\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n     *\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n     * `Approval` event during `transferFrom` operations.\n     *\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n     * true using the following override:\n     * ```\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     *     super._approve(owner, spender, value, true);\n     * }\n     * ```\n     *\n     * Requirements are the same as {_approve}.\n     */\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\n        ERC20Storage storage $ = _getERC20Storage();\n        if (owner == address(0)) {\n            revert ERC20InvalidApprover(address(0));\n        }\n        if (spender == address(0)) {\n            revert ERC20InvalidSpender(address(0));\n        }\n        $._allowances[owner][spender] = value;\n        if (emitEvent) {\n            emit Approval(owner, spender, value);\n        }\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\n     *\n     * Does not update the allowance value in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Does not emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            if (currentAllowance < value) {\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\n            }\n            unchecked {\n                _approve(owner, spender, currentAllowance - value, false);\n            }\n        }\n    }\n}\n"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/ERC20BurnableUpgradeable.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/ERC20Burnable.sol)\n\npragma solidity ^0.8.20;\n\nimport {ERC20Upgradeable} from \"../ERC20Upgradeable.sol\";\nimport {ContextUpgradeable} from \"../../../utils/ContextUpgradeable.sol\";\nimport {Initializable} from \"../../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\n * tokens and those that they have an allowance for, in a way that can be\n * recognized off-chain (via event analysis).\n */\nabstract contract ERC20BurnableUpgradeable is Initializable, ContextUpgradeable, ERC20Upgradeable {\n    function __ERC20Burnable_init() internal onlyInitializing {\n    }\n\n    function __ERC20Burnable_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev Destroys a `value` amount of tokens from the caller.\n     *\n     * See {ERC20-_burn}.\n     */\n    function burn(uint256 value) public virtual {\n        _burn(_msgSender(), value);\n    }\n\n    /**\n     * @dev Destroys a `value` amount of tokens from `account`, deducting from\n     * the caller's allowance.\n     *\n     * See {ERC20-_burn} and {ERC20-allowance}.\n     *\n     * Requirements:\n     *\n     * - the caller must have allowance for ``accounts``'s tokens of at least\n     * `value`.\n     */\n    function burnFrom(address account, uint256 value) public virtual {\n        _spendAllowance(account, _msgSender(), value);\n        _burn(account, value);\n    }\n}\n"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/ERC20PermitUpgradeable.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/ERC20Permit.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20Permit} from \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\";\nimport {ERC20Upgradeable} from \"../ERC20Upgradeable.sol\";\nimport {ECDSA} from \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\nimport {EIP712Upgradeable} from \"../../../utils/cryptography/EIP712Upgradeable.sol\";\nimport {NoncesUpgradeable} from \"../../../utils/NoncesUpgradeable.sol\";\nimport {Initializable} from \"../../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\nabstract contract ERC20PermitUpgradeable is Initializable, ERC20Upgradeable, IERC20Permit, EIP712Upgradeable, NoncesUpgradeable {\n    bytes32 private constant PERMIT_TYPEHASH =\n        keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\n\n    /**\n     * @dev Permit deadline has expired.\n     */\n    error ERC2612ExpiredSignature(uint256 deadline);\n\n    /**\n     * @dev Mismatched signature.\n     */\n    error ERC2612InvalidSigner(address signer, address owner);\n\n    /**\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\"1\"`.\n     *\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\n     */\n    function __ERC20Permit_init(string memory name) internal onlyInitializing {\n        __EIP712_init_unchained(name, \"1\");\n    }\n\n    function __ERC20Permit_init_unchained(string memory) internal onlyInitializing {}\n\n    /**\n     * @inheritdoc IERC20Permit\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual {\n        if (block.timestamp > deadline) {\n            revert ERC2612ExpiredSignature(deadline);\n        }\n\n        bytes32 structHash = keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\n\n        bytes32 hash = _hashTypedDataV4(structHash);\n\n        address signer = ECDSA.recover(hash, v, r, s);\n        if (signer != owner) {\n            revert ERC2612InvalidSigner(signer, owner);\n        }\n\n        _approve(owner, spender, value);\n    }\n\n    /**\n     * @inheritdoc IERC20Permit\n     */\n    function nonces(address owner) public view virtual override(IERC20Permit, NoncesUpgradeable) returns (uint256) {\n        return super.nonces(owner);\n    }\n\n    /**\n     * @inheritdoc IERC20Permit\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view virtual returns (bytes32) {\n        return _domainSeparatorV4();\n    }\n}\n"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/NoncesUpgradeable.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Nonces.sol)\npragma solidity ^0.8.20;\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides tracking nonces for addresses. Nonces will only increment.\n */\nabstract contract NoncesUpgradeable is Initializable {\n    /**\n     * @dev The nonce used for an `account` is not the expected current nonce.\n     */\n    error InvalidAccountNonce(address account, uint256 currentNonce);\n\n    /// @custom:storage-location erc7201:openzeppelin.storage.Nonces\n    struct NoncesStorage {\n        mapping(address account => uint256) _nonces;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.Nonces\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant NoncesStorageLocation = 0x5ab42ced628888259c08ac98db1eb0cf702fc1501344311d8b100cd1bfe4bb00;\n\n    function _getNoncesStorage() private pure returns (NoncesStorage storage $) {\n        assembly {\n            $.slot := NoncesStorageLocation\n        }\n    }\n\n    function __Nonces_init() internal onlyInitializing {\n    }\n\n    function __Nonces_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev Returns the next unused nonce for an address.\n     */\n    function nonces(address owner) public view virtual returns (uint256) {\n        NoncesStorage storage $ = _getNoncesStorage();\n        return $._nonces[owner];\n    }\n\n    /**\n     * @dev Consumes a nonce.\n     *\n     * Returns the current value and increments nonce.\n     */\n    function _useNonce(address owner) internal virtual returns (uint256) {\n        NoncesStorage storage $ = _getNoncesStorage();\n        // For each account, the nonce has an initial value of 0, can only be incremented by one, and cannot be\n        // decremented or reset. This guarantees that the nonce never overflows.\n        unchecked {\n            // It is important to do x++ and not ++x here.\n            return $._nonces[owner]++;\n        }\n    }\n\n    /**\n     * @dev Same as {_useNonce} but checking that `nonce` is the next valid for `owner`.\n     */\n    function _useCheckedNonce(address owner, uint256 nonce) internal virtual {\n        uint256 current = _useNonce(owner);\n        if (nonce != current) {\n            revert InvalidAccountNonce(owner, current);\n        }\n    }\n}\n"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/PausableUpgradeable.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Pausable.sol)\n\npragma solidity ^0.8.20;\n\nimport {ContextUpgradeable} from \"../utils/ContextUpgradeable.sol\";\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\n    /// @custom:storage-location erc7201:openzeppelin.storage.Pausable\n    struct PausableStorage {\n        bool _paused;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.Pausable\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant PausableStorageLocation = 0xcd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f03300;\n\n    function _getPausableStorage() private pure returns (PausableStorage storage $) {\n        assembly {\n            $.slot := PausableStorageLocation\n        }\n    }\n\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    /**\n     * @dev The operation failed because the contract is paused.\n     */\n    error EnforcedPause();\n\n    /**\n     * @dev The operation failed because the contract is not paused.\n     */\n    error ExpectedPause();\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    function __Pausable_init() internal onlyInitializing {\n        __Pausable_init_unchained();\n    }\n\n    function __Pausable_init_unchained() internal onlyInitializing {\n        PausableStorage storage $ = _getPausableStorage();\n        $._paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        PausableStorage storage $ = _getPausableStorage();\n        return $._paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        if (paused()) {\n            revert EnforcedPause();\n        }\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        if (!paused()) {\n            revert ExpectedPause();\n        }\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        PausableStorage storage $ = _getPausableStorage();\n        $._paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        PausableStorage storage $ = _getPausableStorage();\n        $._paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/EIP712Upgradeable.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/EIP712.sol)\n\npragma solidity ^0.8.20;\n\nimport {MessageHashUtils} from \"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\";\nimport {IERC5267} from \"@openzeppelin/contracts/interfaces/IERC5267.sol\";\nimport {Initializable} from \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\n *\n * The encoding scheme specified in the EIP requires a domain separator and a hash of the typed structured data, whose\n * encoding is very generic and therefore its implementation in Solidity is not feasible, thus this contract\n * does not implement the encoding itself. Protocols need to implement the type-specific encoding they need in order to\n * produce the hash of their typed data using a combination of `abi.encode` and `keccak256`.\n *\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n * ({_hashTypedDataV4}).\n *\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n * the chain id to protect against replay attacks on an eventual fork of the chain.\n *\n * NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n *\n * NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\n * separator of the implementation contract. This will cause the {_domainSeparatorV4} function to always rebuild the\n * separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\n */\nabstract contract EIP712Upgradeable is Initializable, IERC5267 {\n    bytes32 private constant TYPE_HASH =\n        keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\");\n\n    /// @custom:storage-location erc7201:openzeppelin.storage.EIP712\n    struct EIP712Storage {\n        /// @custom:oz-renamed-from _HASHED_NAME\n        bytes32 _hashedName;\n        /// @custom:oz-renamed-from _HASHED_VERSION\n        bytes32 _hashedVersion;\n\n        string _name;\n        string _version;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.EIP712\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant EIP712StorageLocation = 0xa16a46d94261c7517cc8ff89f61c0ce93598e3c849801011dee649a6a557d100;\n\n    function _getEIP712Storage() private pure returns (EIP712Storage storage $) {\n        assembly {\n            $.slot := EIP712StorageLocation\n        }\n    }\n\n    /**\n     * @dev Initializes the domain separator and parameter caches.\n     *\n     * The meaning of `name` and `version` is specified in\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n     *\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n     * - `version`: the current major version of the signing domain.\n     *\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n     * contract upgrade].\n     */\n    function __EIP712_init(string memory name, string memory version) internal onlyInitializing {\n        __EIP712_init_unchained(name, version);\n    }\n\n    function __EIP712_init_unchained(string memory name, string memory version) internal onlyInitializing {\n        EIP712Storage storage $ = _getEIP712Storage();\n        $._name = name;\n        $._version = version;\n\n        // Reset prior values in storage if upgrading\n        $._hashedName = 0;\n        $._hashedVersion = 0;\n    }\n\n    /**\n     * @dev Returns the domain separator for the current chain.\n     */\n    function _domainSeparatorV4() internal view returns (bytes32) {\n        return _buildDomainSeparator();\n    }\n\n    function _buildDomainSeparator() private view returns (bytes32) {\n        return keccak256(abi.encode(TYPE_HASH, _EIP712NameHash(), _EIP712VersionHash(), block.chainid, address(this)));\n    }\n\n    /**\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n     * function returns the hash of the fully encoded EIP712 message for this domain.\n     *\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n     *\n     * ```solidity\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     *     keccak256(\"Mail(address to,string contents)\"),\n     *     mailTo,\n     *     keccak256(bytes(mailContents))\n     * )));\n     * address signer = ECDSA.recover(digest, signature);\n     * ```\n     */\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\n        return MessageHashUtils.toTypedDataHash(_domainSeparatorV4(), structHash);\n    }\n\n    /**\n     * @dev See {IERC-5267}.\n     */\n    function eip712Domain()\n        public\n        view\n        virtual\n        returns (\n            bytes1 fields,\n            string memory name,\n            string memory version,\n            uint256 chainId,\n            address verifyingContract,\n            bytes32 salt,\n            uint256[] memory extensions\n        )\n    {\n        EIP712Storage storage $ = _getEIP712Storage();\n        // If the hashed name and version in storage are non-zero, the contract hasn't been properly initialized\n        // and the EIP712 domain is not reliable, as it will be missing name and version.\n        require($._hashedName == 0 && $._hashedVersion == 0, \"EIP712: Uninitialized\");\n\n        return (\n            hex\"0f\", // 01111\n            _EIP712Name(),\n            _EIP712Version(),\n            block.chainid,\n            address(this),\n            bytes32(0),\n            new uint256[](0)\n        );\n    }\n\n    /**\n     * @dev The name parameter for the EIP712 domain.\n     *\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\n     * are a concern.\n     */\n    function _EIP712Name() internal view virtual returns (string memory) {\n        EIP712Storage storage $ = _getEIP712Storage();\n        return $._name;\n    }\n\n    /**\n     * @dev The version parameter for the EIP712 domain.\n     *\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\n     * are a concern.\n     */\n    function _EIP712Version() internal view virtual returns (string memory) {\n        EIP712Storage storage $ = _getEIP712Storage();\n        return $._version;\n    }\n\n    /**\n     * @dev The hash of the name parameter for the EIP712 domain.\n     *\n     * NOTE: In previous versions this function was virtual. In this version you should override `_EIP712Name` instead.\n     */\n    function _EIP712NameHash() internal view returns (bytes32) {\n        EIP712Storage storage $ = _getEIP712Storage();\n        string memory name = _EIP712Name();\n        if (bytes(name).length > 0) {\n            return keccak256(bytes(name));\n        } else {\n            // If the name is empty, the contract may have been upgraded without initializing the new storage.\n            // We return the name hash in storage if non-zero, otherwise we assume the name is empty by design.\n            bytes32 hashedName = $._hashedName;\n            if (hashedName != 0) {\n                return hashedName;\n            } else {\n                return keccak256(\"\");\n            }\n        }\n    }\n\n    /**\n     * @dev The hash of the version parameter for the EIP712 domain.\n     *\n     * NOTE: In previous versions this function was virtual. In this version you should override `_EIP712Version` instead.\n     */\n    function _EIP712VersionHash() internal view returns (bytes32) {\n        EIP712Storage storage $ = _getEIP712Storage();\n        string memory version = _EIP712Version();\n        if (bytes(version).length > 0) {\n            return keccak256(bytes(version));\n        } else {\n            // If the version is empty, the contract may have been upgraded without initializing the new storage.\n            // We return the version hash in storage if non-zero, otherwise we assume the version is empty by design.\n            bytes32 hashedVersion = $._hashedVersion;\n            if (hashedVersion != 0) {\n                return hashedVersion;\n            } else {\n                return keccak256(\"\");\n            }\n        }\n    }\n}\n"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/ERC165Upgradeable.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\nimport {Initializable} from \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n */\nabstract contract ERC165Upgradeable is Initializable, IERC165 {\n    function __ERC165_init() internal onlyInitializing {\n    }\n\n    function __ERC165_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
      },
      "lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/access/IAccessControl.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev The `account` is missing a role.\n     */\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\n\n    /**\n     * @dev The caller of a function is not the expected one.\n     *\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\n     */\n    error AccessControlBadConfirmation();\n\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) external;\n}\n"
      },
      "lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/access/Ownable.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
      },
      "lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/interfaces/IERC1967.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC1967.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\n */\ninterface IERC1967 {\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Emitted when the beacon is changed.\n     */\n    event BeaconUpgraded(address indexed beacon);\n}\n"
      },
      "lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/interfaces/IERC5267.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC5267.sol)\n\npragma solidity ^0.8.20;\n\ninterface IERC5267 {\n    /**\n     * @dev MAY be emitted to signal that the domain could have changed.\n     */\n    event EIP712DomainChanged();\n\n    /**\n     * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\n     * signature.\n     */\n    function eip712Domain()\n        external\n        view\n        returns (\n            bytes1 fields,\n            string memory name,\n            string memory version,\n            uint256 chainId,\n            address verifyingContract,\n            bytes32 salt,\n            uint256[] memory extensions\n        );\n}\n"
      },
      "lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/interfaces/draft-IERC1822.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC1822.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n * proxy whose upgrades are fully controlled by the current implementation.\n */\ninterface IERC1822Proxiable {\n    /**\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n     * address.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy.\n     */\n    function proxiableUUID() external view returns (bytes32);\n}\n"
      },
      "lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/interfaces/draft-IERC6093.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard ERC20 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\n */\ninterface IERC20Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC20InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC20InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC20InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC20InvalidSpender(address spender);\n}\n\n/**\n * @dev Standard ERC721 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\n */\ninterface IERC721Errors {\n    /**\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\n     * Used in balance queries.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721InvalidOwner(address owner);\n\n    /**\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721NonexistentToken(uint256 tokenId);\n\n    /**\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param tokenId Identifier number of a token.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC721InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC721InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC721InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC721InvalidOperator(address operator);\n}\n\n/**\n * @dev Standard ERC1155 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\n */\ninterface IERC1155Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC1155InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC1155InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC1155MissingApprovalForAll(address operator, address owner);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC1155InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC1155InvalidOperator(address operator);\n\n    /**\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n     * Used in batch transfers.\n     * @param idsLength Length of the array of token identifiers\n     * @param valuesLength Length of the array of token amounts\n     */\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\n}\n"
      },
      "lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Proxy.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/ERC1967/ERC1967Proxy.sol)\n\npragma solidity ^0.8.20;\n\nimport {Proxy} from \"../Proxy.sol\";\nimport {ERC1967Utils} from \"./ERC1967Utils.sol\";\n\n/**\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\n * implementation address that can be changed. This address is stored in storage in the location specified by\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\n * implementation behind the proxy.\n */\ncontract ERC1967Proxy is Proxy {\n    /**\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `implementation`.\n     *\n     * If `_data` is nonempty, it's used as data in a delegate call to `implementation`. This will typically be an\n     * encoded function call, and allows initializing the storage of the proxy like a Solidity constructor.\n     *\n     * Requirements:\n     *\n     * - If `data` is empty, `msg.value` must be zero.\n     */\n    constructor(address implementation, bytes memory _data) payable {\n        ERC1967Utils.upgradeToAndCall(implementation, _data);\n    }\n\n    /**\n     * @dev Returns the current implementation address.\n     *\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using\n     * the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\n     */\n    function _implementation() internal view virtual override returns (address) {\n        return ERC1967Utils.getImplementation();\n    }\n}\n"
      },
      "lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Utils.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/ERC1967/ERC1967Utils.sol)\n\npragma solidity ^0.8.20;\n\nimport {IBeacon} from \"../beacon/IBeacon.sol\";\nimport {Address} from \"../../utils/Address.sol\";\nimport {StorageSlot} from \"../../utils/StorageSlot.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n */\nlibrary ERC1967Utils {\n    // We re-declare ERC-1967 events here because they can't be used directly from IERC1967.\n    // This will be fixed in Solidity 0.8.21. At that point we should remove these events.\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Emitted when the beacon is changed.\n     */\n    event BeaconUpgraded(address indexed beacon);\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1.\n     */\n    // solhint-disable-next-line private-vars-leading-underscore\n    bytes32 internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev The `implementation` of the proxy is invalid.\n     */\n    error ERC1967InvalidImplementation(address implementation);\n\n    /**\n     * @dev The `admin` of the proxy is invalid.\n     */\n    error ERC1967InvalidAdmin(address admin);\n\n    /**\n     * @dev The `beacon` of the proxy is invalid.\n     */\n    error ERC1967InvalidBeacon(address beacon);\n\n    /**\n     * @dev An upgrade function sees `msg.value > 0` that may be lost.\n     */\n    error ERC1967NonPayable();\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function getImplementation() internal view returns (address) {\n        return StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        if (newImplementation.code.length == 0) {\n            revert ERC1967InvalidImplementation(newImplementation);\n        }\n        StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Performs implementation upgrade with additional setup call if data is nonempty.\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\n     * to avoid stuck value in the contract.\n     *\n     * Emits an {IERC1967-Upgraded} event.\n     */\n    function upgradeToAndCall(address newImplementation, bytes memory data) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n\n        if (data.length > 0) {\n            Address.functionDelegateCall(newImplementation, data);\n        } else {\n            _checkNonPayable();\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1.\n     */\n    // solhint-disable-next-line private-vars-leading-underscore\n    bytes32 internal constant ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Returns the current admin.\n     *\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using\n     * the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\n     */\n    function getAdmin() internal view returns (address) {\n        return StorageSlot.getAddressSlot(ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        if (newAdmin == address(0)) {\n            revert ERC1967InvalidAdmin(address(0));\n        }\n        StorageSlot.getAddressSlot(ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {IERC1967-AdminChanged} event.\n     */\n    function changeAdmin(address newAdmin) internal {\n        emit AdminChanged(getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is the keccak-256 hash of \"eip1967.proxy.beacon\" subtracted by 1.\n     */\n    // solhint-disable-next-line private-vars-leading-underscore\n    bytes32 internal constant BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function getBeacon() internal view returns (address) {\n        return StorageSlot.getAddressSlot(BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        if (newBeacon.code.length == 0) {\n            revert ERC1967InvalidBeacon(newBeacon);\n        }\n\n        StorageSlot.getAddressSlot(BEACON_SLOT).value = newBeacon;\n\n        address beaconImplementation = IBeacon(newBeacon).implementation();\n        if (beaconImplementation.code.length == 0) {\n            revert ERC1967InvalidImplementation(beaconImplementation);\n        }\n    }\n\n    /**\n     * @dev Change the beacon and trigger a setup call if data is nonempty.\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\n     * to avoid stuck value in the contract.\n     *\n     * Emits an {IERC1967-BeaconUpgraded} event.\n     *\n     * CAUTION: Invoking this function has no effect on an instance of {BeaconProxy} since v5, since\n     * it uses an immutable beacon without looking at the value of the ERC-1967 beacon slot for\n     * efficiency.\n     */\n    function upgradeBeaconToAndCall(address newBeacon, bytes memory data) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n\n        if (data.length > 0) {\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\n        } else {\n            _checkNonPayable();\n        }\n    }\n\n    /**\n     * @dev Reverts if `msg.value` is not zero. It can be used to avoid `msg.value` stuck in the contract\n     * if an upgrade doesn't perform an initialization call.\n     */\n    function _checkNonPayable() private {\n        if (msg.value > 0) {\n            revert ERC1967NonPayable();\n        }\n    }\n}\n"
      },
      "lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/proxy/Proxy.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/Proxy.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\n * be specified by overriding the virtual {_implementation} function.\n *\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\n * different contract through the {_delegate} function.\n *\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\n */\nabstract contract Proxy {\n    /**\n     * @dev Delegates the current call to `implementation`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _delegate(address implementation) internal virtual {\n        assembly {\n            // Copy msg.data. We take full control of memory in this inline assembly\n            // block because it will not return to Solidity code. We overwrite the\n            // Solidity scratch pad at memory position 0.\n            calldatacopy(0, 0, calldatasize())\n\n            // Call the implementation.\n            // out and outsize are 0 because we don't know the size yet.\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n\n            // Copy the returned data.\n            returndatacopy(0, 0, returndatasize())\n\n            switch result\n            // delegatecall returns 0 on error.\n            case 0 {\n                revert(0, returndatasize())\n            }\n            default {\n                return(0, returndatasize())\n            }\n        }\n    }\n\n    /**\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback\n     * function and {_fallback} should delegate.\n     */\n    function _implementation() internal view virtual returns (address);\n\n    /**\n     * @dev Delegates the current call to the address returned by `_implementation()`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _fallback() internal virtual {\n        _delegate(_implementation());\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\n     * function in the contract matches the call data.\n     */\n    fallback() external payable virtual {\n        _fallback();\n    }\n}\n"
      },
      "lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/proxy/beacon/BeaconProxy.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/beacon/BeaconProxy.sol)\n\npragma solidity ^0.8.20;\n\nimport {IBeacon} from \"./IBeacon.sol\";\nimport {Proxy} from \"../Proxy.sol\";\nimport {ERC1967Utils} from \"../ERC1967/ERC1967Utils.sol\";\n\n/**\n * @dev This contract implements a proxy that gets the implementation address for each call from an {UpgradeableBeacon}.\n *\n * The beacon address can only be set once during construction, and cannot be changed afterwards. It is stored in an\n * immutable variable to avoid unnecessary storage reads, and also in the beacon storage slot specified by\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] so that it can be accessed externally.\n *\n * CAUTION: Since the beacon address can never be changed, you must ensure that you either control the beacon, or trust\n * the beacon to not upgrade the implementation maliciously.\n *\n * IMPORTANT: Do not use the implementation logic to modify the beacon storage slot. Doing so would leave the proxy in\n * an inconsistent state where the beacon storage slot does not match the beacon address.\n */\ncontract BeaconProxy is Proxy {\n    // An immutable address for the beacon to avoid unnecessary SLOADs before each delegate call.\n    address private immutable _beacon;\n\n    /**\n     * @dev Initializes the proxy with `beacon`.\n     *\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon. This\n     * will typically be an encoded function call, and allows initializing the storage of the proxy like a Solidity\n     * constructor.\n     *\n     * Requirements:\n     *\n     * - `beacon` must be a contract with the interface {IBeacon}.\n     * - If `data` is empty, `msg.value` must be zero.\n     */\n    constructor(address beacon, bytes memory data) payable {\n        ERC1967Utils.upgradeBeaconToAndCall(beacon, data);\n        _beacon = beacon;\n    }\n\n    /**\n     * @dev Returns the current implementation address of the associated beacon.\n     */\n    function _implementation() internal view virtual override returns (address) {\n        return IBeacon(_getBeacon()).implementation();\n    }\n\n    /**\n     * @dev Returns the beacon.\n     */\n    function _getBeacon() internal view virtual returns (address) {\n        return _beacon;\n    }\n}\n"
      },
      "lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/beacon/IBeacon.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeacon {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {UpgradeableBeacon} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"
      },
      "lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/proxy/beacon/UpgradeableBeacon.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/beacon/UpgradeableBeacon.sol)\n\npragma solidity ^0.8.20;\n\nimport {IBeacon} from \"./IBeacon.sol\";\nimport {Ownable} from \"../../access/Ownable.sol\";\n\n/**\n * @dev This contract is used in conjunction with one or more instances of {BeaconProxy} to determine their\n * implementation contract, which is where they will delegate all function calls.\n *\n * An owner is able to change the implementation the beacon points to, thus upgrading the proxies that use this beacon.\n */\ncontract UpgradeableBeacon is IBeacon, Ownable {\n    address private _implementation;\n\n    /**\n     * @dev The `implementation` of the beacon is invalid.\n     */\n    error BeaconInvalidImplementation(address implementation);\n\n    /**\n     * @dev Emitted when the implementation returned by the beacon is changed.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Sets the address of the initial implementation, and the initial owner who can upgrade the beacon.\n     */\n    constructor(address implementation_, address initialOwner) Ownable(initialOwner) {\n        _setImplementation(implementation_);\n    }\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function implementation() public view virtual returns (address) {\n        return _implementation;\n    }\n\n    /**\n     * @dev Upgrades the beacon to a new implementation.\n     *\n     * Emits an {Upgraded} event.\n     *\n     * Requirements:\n     *\n     * - msg.sender must be the owner of the contract.\n     * - `newImplementation` must be a contract.\n     */\n    function upgradeTo(address newImplementation) public virtual onlyOwner {\n        _setImplementation(newImplementation);\n    }\n\n    /**\n     * @dev Sets the implementation contract address for this beacon\n     *\n     * Requirements:\n     *\n     * - `newImplementation` must be a contract.\n     */\n    function _setImplementation(address newImplementation) private {\n        if (newImplementation.code.length == 0) {\n            revert BeaconInvalidImplementation(newImplementation);\n        }\n        _implementation = newImplementation;\n        emit Upgraded(newImplementation);\n    }\n}\n"
      },
      "lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/proxy/transparent/ProxyAdmin.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/transparent/ProxyAdmin.sol)\n\npragma solidity ^0.8.20;\n\nimport {ITransparentUpgradeableProxy} from \"./TransparentUpgradeableProxy.sol\";\nimport {Ownable} from \"../../access/Ownable.sol\";\n\n/**\n * @dev This is an auxiliary contract meant to be assigned as the admin of a {TransparentUpgradeableProxy}. For an\n * explanation of why you would want to use this see the documentation for {TransparentUpgradeableProxy}.\n */\ncontract ProxyAdmin is Ownable {\n    /**\n     * @dev The version of the upgrade interface of the contract. If this getter is missing, both `upgrade(address)`\n     * and `upgradeAndCall(address,bytes)` are present, and `upgradeTo` must be used if no function should be called,\n     * while `upgradeAndCall` will invoke the `receive` function if the second argument is the empty byte string.\n     * If the getter returns `\"5.0.0\"`, only `upgradeAndCall(address,bytes)` is present, and the second argument must\n     * be the empty byte string if no function should be called, making it impossible to invoke the `receive` function\n     * during an upgrade.\n     */\n    string public constant UPGRADE_INTERFACE_VERSION = \"5.0.0\";\n\n    /**\n     * @dev Sets the initial owner who can perform upgrades.\n     */\n    constructor(address initialOwner) Ownable(initialOwner) {}\n\n    /**\n     * @dev Upgrades `proxy` to `implementation` and calls a function on the new implementation.\n     * See {TransparentUpgradeableProxy-_dispatchUpgradeToAndCall}.\n     *\n     * Requirements:\n     *\n     * - This contract must be the admin of `proxy`.\n     * - If `data` is empty, `msg.value` must be zero.\n     */\n    function upgradeAndCall(\n        ITransparentUpgradeableProxy proxy,\n        address implementation,\n        bytes memory data\n    ) public payable virtual onlyOwner {\n        proxy.upgradeToAndCall{value: msg.value}(implementation, data);\n    }\n}\n"
      },
      "lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/proxy/transparent/TransparentUpgradeableProxy.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/transparent/TransparentUpgradeableProxy.sol)\n\npragma solidity ^0.8.20;\n\nimport {ERC1967Utils} from \"../ERC1967/ERC1967Utils.sol\";\nimport {ERC1967Proxy} from \"../ERC1967/ERC1967Proxy.sol\";\nimport {IERC1967} from \"../../interfaces/IERC1967.sol\";\nimport {ProxyAdmin} from \"./ProxyAdmin.sol\";\n\n/**\n * @dev Interface for {TransparentUpgradeableProxy}. In order to implement transparency, {TransparentUpgradeableProxy}\n * does not implement this interface directly, and its upgradeability mechanism is implemented by an internal dispatch\n * mechanism. The compiler is unaware that these functions are implemented by {TransparentUpgradeableProxy} and will not\n * include them in the ABI so this interface must be used to interact with it.\n */\ninterface ITransparentUpgradeableProxy is IERC1967 {\n    function upgradeToAndCall(address, bytes calldata) external payable;\n}\n\n/**\n * @dev This contract implements a proxy that is upgradeable through an associated {ProxyAdmin} instance.\n *\n * To avoid https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector\n * clashing], which can potentially be used in an attack, this contract uses the\n * https://blog.openzeppelin.com/the-transparent-proxy-pattern/[transparent proxy pattern]. This pattern implies two\n * things that go hand in hand:\n *\n * 1. If any account other than the admin calls the proxy, the call will be forwarded to the implementation, even if\n * that call matches the {ITransparentUpgradeableProxy-upgradeToAndCall} function exposed by the proxy itself.\n * 2. If the admin calls the proxy, it can call the `upgradeToAndCall` function but any other call won't be forwarded to\n * the implementation. If the admin tries to call a function on the implementation it will fail with an error indicating\n * the proxy admin cannot fallback to the target implementation.\n *\n * These properties mean that the admin account can only be used for upgrading the proxy, so it's best if it's a\n * dedicated account that is not used for anything else. This will avoid headaches due to sudden errors when trying to\n * call a function from the proxy implementation. For this reason, the proxy deploys an instance of {ProxyAdmin} and\n * allows upgrades only if they come through it. You should think of the `ProxyAdmin` instance as the administrative\n * interface of the proxy, including the ability to change who can trigger upgrades by transferring ownership.\n *\n * NOTE: The real interface of this proxy is that defined in `ITransparentUpgradeableProxy`. This contract does not\n * inherit from that interface, and instead `upgradeToAndCall` is implicitly implemented using a custom dispatch\n * mechanism in `_fallback`. Consequently, the compiler will not produce an ABI for this contract. This is necessary to\n * fully implement transparency without decoding reverts caused by selector clashes between the proxy and the\n * implementation.\n *\n * NOTE: This proxy does not inherit from {Context} deliberately. The {ProxyAdmin} of this contract won't send a\n * meta-transaction in any way, and any other meta-transaction setup should be made in the implementation contract.\n *\n * IMPORTANT: This contract avoids unnecessary storage reads by setting the admin only during construction as an\n * immutable variable, preventing any changes thereafter. However, the admin slot defined in ERC-1967 can still be\n * overwritten by the implementation logic pointed to by this proxy. In such cases, the contract may end up in an\n * undesirable state where the admin slot is different from the actual admin.\n *\n * WARNING: It is not recommended to extend this contract to add additional external functions. If you do so, the\n * compiler will not check that there are no selector conflicts, due to the note above. A selector clash between any new\n * function and the functions declared in {ITransparentUpgradeableProxy} will be resolved in favor of the new one. This\n * could render the `upgradeToAndCall` function inaccessible, preventing upgradeability and compromising transparency.\n */\ncontract TransparentUpgradeableProxy is ERC1967Proxy {\n    // An immutable address for the admin to avoid unnecessary SLOADs before each call\n    // at the expense of removing the ability to change the admin once it's set.\n    // This is acceptable if the admin is always a ProxyAdmin instance or similar contract\n    // with its own ability to transfer the permissions to another account.\n    address private immutable _admin;\n\n    /**\n     * @dev The proxy caller is the current admin, and can't fallback to the proxy target.\n     */\n    error ProxyDeniedAdminAccess();\n\n    /**\n     * @dev Initializes an upgradeable proxy managed by an instance of a {ProxyAdmin} with an `initialOwner`,\n     * backed by the implementation at `_logic`, and optionally initialized with `_data` as explained in\n     * {ERC1967Proxy-constructor}.\n     */\n    constructor(address _logic, address initialOwner, bytes memory _data) payable ERC1967Proxy(_logic, _data) {\n        _admin = address(new ProxyAdmin(initialOwner));\n        // Set the storage value and emit an event for ERC-1967 compatibility\n        ERC1967Utils.changeAdmin(_proxyAdmin());\n    }\n\n    /**\n     * @dev Returns the admin of this proxy.\n     */\n    function _proxyAdmin() internal virtual returns (address) {\n        return _admin;\n    }\n\n    /**\n     * @dev If caller is the admin process the call internally, otherwise transparently fallback to the proxy behavior.\n     */\n    function _fallback() internal virtual override {\n        if (msg.sender == _proxyAdmin()) {\n            if (msg.sig != ITransparentUpgradeableProxy.upgradeToAndCall.selector) {\n                revert ProxyDeniedAdminAccess();\n            } else {\n                _dispatchUpgradeToAndCall();\n            }\n        } else {\n            super._fallback();\n        }\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy. See {ERC1967Utils-upgradeToAndCall}.\n     *\n     * Requirements:\n     *\n     * - If `data` is empty, `msg.value` must be zero.\n     */\n    function _dispatchUpgradeToAndCall() private {\n        (address newImplementation, bytes memory data) = abi.decode(msg.data[4:], (address, bytes));\n        ERC1967Utils.upgradeToAndCall(newImplementation, data);\n    }\n}\n"
      },
      "lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
      },
      "lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
      },
      "lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * ==== Security Considerations\n *\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n * generally recommended is:\n *\n * ```solidity\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n *     doThing(..., value);\n * }\n *\n * function doThing(..., uint256 value) public {\n *     token.safeTransferFrom(msg.sender, address(this), value);\n *     ...\n * }\n * ```\n *\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n * {SafeERC20-safeTransferFrom}).\n *\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n * contracts should have entry points that don't rely on permit.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     *\n     * CAUTION: See Security Considerations above.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
      },
      "lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/Address.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev The ETH balance of the account is not enough to perform the operation.\n     */\n    error AddressInsufficientBalance(address account);\n\n    /**\n     * @dev There's no code at `target` (it is not a contract).\n     */\n    error AddressEmptyCode(address target);\n\n    /**\n     * @dev A call to an address target failed. The target may have reverted.\n     */\n    error FailedInnerCall();\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        if (address(this).balance < amount) {\n            revert AddressInsufficientBalance(address(this));\n        }\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        if (!success) {\n            revert FailedInnerCall();\n        }\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason or custom error, it is bubbled\n     * up by this function (like regular Solidity function calls). However, if\n     * the call reverted with no returned reason, this function reverts with a\n     * {FailedInnerCall} error.\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        if (address(this).balance < value) {\n            revert AddressInsufficientBalance(address(this));\n        }\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\n     * unsuccessful call.\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata\n    ) internal view returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            // only check if target is a contract if the call was successful and the return data is empty\n            // otherwise we already know that it was a contract\n            if (returndata.length == 0 && target.code.length == 0) {\n                revert AddressEmptyCode(target);\n            }\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\n     * revert reason or with a default {FailedInnerCall} error.\n     */\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\n     */\n    function _revert(bytes memory returndata) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert FailedInnerCall();\n        }\n    }\n}\n"
      },
      "lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/Context.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
      },
      "lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```solidity\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(newImplementation.code.length > 0);\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    struct StringSlot {\n        string value;\n    }\n\n    struct BytesSlot {\n        bytes value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\n     */\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\n     */\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\n     */\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\n     */\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n}\n"
      },
      "lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/Strings.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\n\npragma solidity ^0.8.20;\n\nimport {Math} from \"./math/Math.sol\";\nimport {SignedMath} from \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant HEX_DIGITS = \"0123456789abcdef\";\n    uint8 private constant ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev The `value` string doesn't fit in the specified `length`.\n     */\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toStringSigned(int256 value) internal pure returns (string memory) {\n        return string.concat(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value)));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        uint256 localValue = value;\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\n            localValue >>= 4;\n        }\n        if (localValue != 0) {\n            revert StringsInsufficientHexLength(value, length);\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\n     * representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"
      },
      "lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS\n    }\n\n    /**\n     * @dev The signature derives the `address(0)`.\n     */\n    error ECDSAInvalidSignature();\n\n    /**\n     * @dev The signature has an invalid length.\n     */\n    error ECDSAInvalidSignatureLength(uint256 length);\n\n    /**\n     * @dev The signature has an S value that is in the upper half order.\n     */\n    error ECDSAInvalidSignatureS(bytes32 s);\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with `signature` or an error. This will not\n     * return address(0) without also returning an error description. Errors are documented using an enum (error type)\n     * and a bytes32 providing additional information about the error.\n     *\n     * If no error is returned, then the address can be used for verification purposes.\n     *\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError, bytes32) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length));\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, signature);\n        _throwError(error, errorArg);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     */\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError, bytes32) {\n        unchecked {\n            bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n            // We do not check for an overflow here since the shift operation results in 0 or 1.\n            uint8 v = uint8((uint256(vs) >> 255) + 27);\n            return tryRecover(hash, v, r, s);\n        }\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     */\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, r, vs);\n        _throwError(error, errorArg);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError, bytes32) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS, s);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature, bytes32(0));\n        }\n\n        return (signer, RecoverError.NoError, bytes32(0));\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, v, r, s);\n        _throwError(error, errorArg);\n        return recovered;\n    }\n\n    /**\n     * @dev Optionally reverts with the corresponding custom error according to the `error` argument provided.\n     */\n    function _throwError(RecoverError error, bytes32 errorArg) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert ECDSAInvalidSignature();\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert ECDSAInvalidSignatureLength(uint256(errorArg));\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert ECDSAInvalidSignatureS(errorArg);\n        }\n    }\n}\n"
      },
      "lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/MessageHashUtils.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/MessageHashUtils.sol)\n\npragma solidity ^0.8.20;\n\nimport {Strings} from \"../Strings.sol\";\n\n/**\n * @dev Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing.\n *\n * The library provides methods for generating a hash of a message that conforms to the\n * https://eips.ethereum.org/EIPS/eip-191[EIP 191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712]\n * specifications.\n */\nlibrary MessageHashUtils {\n    /**\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\n     * `0x45` (`personal_sign` messages).\n     *\n     * The digest is calculated by prefixing a bytes32 `messageHash` with\n     * `\"\\x19Ethereum Signed Message:\\n32\"` and hashing the result. It corresponds with the\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\n     *\n     * NOTE: The `messageHash` parameter is intended to be the result of hashing a raw message with\n     * keccak256, although any bytes32 value can be safely used because the final digest will\n     * be re-hashed.\n     *\n     * See {ECDSA-recover}.\n     */\n    function toEthSignedMessageHash(bytes32 messageHash) internal pure returns (bytes32 digest) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, \"\\x19Ethereum Signed Message:\\n32\") // 32 is the bytes-length of messageHash\n            mstore(0x1c, messageHash) // 0x1c (28) is the length of the prefix\n            digest := keccak256(0x00, 0x3c) // 0x3c is the length of the prefix (0x1c) + messageHash (0x20)\n        }\n    }\n\n    /**\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\n     * `0x45` (`personal_sign` messages).\n     *\n     * The digest is calculated by prefixing an arbitrary `message` with\n     * `\"\\x19Ethereum Signed Message:\\n\" + len(message)` and hashing the result. It corresponds with the\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\n     *\n     * See {ECDSA-recover}.\n     */\n    function toEthSignedMessageHash(bytes memory message) internal pure returns (bytes32) {\n        return\n            keccak256(bytes.concat(\"\\x19Ethereum Signed Message:\\n\", bytes(Strings.toString(message.length)), message));\n    }\n\n    /**\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\n     * `0x00` (data with intended validator).\n     *\n     * The digest is calculated by prefixing an arbitrary `data` with `\"\\x19\\x00\"` and the intended\n     * `validator` address. Then hashing the result.\n     *\n     * See {ECDSA-recover}.\n     */\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(hex\"19_00\", validator, data));\n    }\n\n    /**\n     * @dev Returns the keccak256 digest of an EIP-712 typed data (EIP-191 version `0x01`).\n     *\n     * The digest is calculated from a `domainSeparator` and a `structHash`, by prefixing them with\n     * `\\x19\\x01` and hashing the result. It corresponds to the hash signed by the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`] JSON-RPC method as part of EIP-712.\n     *\n     * See {ECDSA-recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 digest) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, hex\"19_01\")\n            mstore(add(ptr, 0x02), domainSeparator)\n            mstore(add(ptr, 0x22), structHash)\n            digest := keccak256(ptr, 0x42)\n        }\n    }\n}\n"
      },
      "lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
      },
      "lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/math/Math.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Muldiv operation overflow.\n     */\n    error MathOverflowedMulDiv();\n\n    enum Rounding {\n        Floor, // Toward negative infinity\n        Ceil, // Toward positive infinity\n        Trunc, // Toward zero\n        Expand // Away from zero\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds towards infinity instead\n     * of rounding towards zero.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (b == 0) {\n            // Guarantee the same behavior as in a regular Solidity division.\n            return a / b;\n        }\n\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\n     * denominator == 0.\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\n     * Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            if (denominator <= prod1) {\n                revert MathOverflowedMulDiv();\n            }\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\n\n            uint256 twos = denominator & (0 - denominator);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\n            // works in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\n     * towards zero.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\n     */\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\n        return uint8(rounding) % 2 == 1;\n    }\n}\n"
      },
      "lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"
      },
      "lib/openzeppelin-foundry-upgrades/lib/solidity-stringutils/src/strings.sol": {
        "content": "/*\n * @title String & slice utility library for Solidity contracts.\n * @author Nick Johnson <arachnid@notdot.net>\n *\n * @dev Functionality in this library is largely implemented using an\n *      abstraction called a 'slice'. A slice represents a part of a string -\n *      anything from the entire string to a single character, or even no\n *      characters at all (a 0-length slice). Since a slice only has to specify\n *      an offset and a length, copying and manipulating slices is a lot less\n *      expensive than copying and manipulating the strings they reference.\n *\n *      To further reduce gas costs, most functions on slice that need to return\n *      a slice modify the original one instead of allocating a new one; for\n *      instance, `s.split(\".\")` will return the text up to the first '.',\n *      modifying s to only contain the remainder of the string after the '.'.\n *      In situations where you do not want to modify the original slice, you\n *      can make a copy first with `.copy()`, for example:\n *      `s.copy().split(\".\")`. Try and avoid using this idiom in loops; since\n *      Solidity has no memory management, it will result in allocating many\n *      short-lived slices that are later discarded.\n *\n *      Functions that return two slices come in two versions: a non-allocating\n *      version that takes the second slice as an argument, modifying it in\n *      place, and an allocating version that allocates and returns the second\n *      slice; see `nextRune` for example.\n *\n *      Functions that have to copy string data will return strings rather than\n *      slices; these can be cast back to slices for further processing if\n *      required.\n *\n *      For convenience, some functions are provided with non-modifying\n *      variants that create a new slice and return both; for instance,\n *      `s.splitNew('.')` leaves s unmodified, and returns two values\n *      corresponding to the left and right parts of the string.\n */\n\npragma solidity ^0.8.0;\n\nlibrary strings {\n    struct slice {\n        uint _len;\n        uint _ptr;\n    }\n\n    function memcpy(uint dest, uint src, uint length) private pure {\n        // Copy word-length chunks while possible\n        for(; length >= 32; length -= 32) {\n            assembly {\n                mstore(dest, mload(src))\n            }\n            dest += 32;\n            src += 32;\n        }\n\n        // Copy remaining bytes\n        uint mask = type(uint).max;\n        if (length > 0) {\n            mask = 256 ** (32 - length) - 1;\n        }\n        assembly {\n            let srcpart := and(mload(src), not(mask))\n            let destpart := and(mload(dest), mask)\n            mstore(dest, or(destpart, srcpart))\n        }\n    }\n\n    /*\n     * @dev Returns a slice containing the entire string.\n     * @param self The string to make a slice from.\n     * @return A newly allocated slice containing the entire string.\n     */\n    function toSlice(string memory self) internal pure returns (slice memory) {\n        uint ptr;\n        assembly {\n            ptr := add(self, 0x20)\n        }\n        return slice(bytes(self).length, ptr);\n    }\n\n    /*\n     * @dev Returns the length of a null-terminated bytes32 string.\n     * @param self The value to find the length of.\n     * @return The length of the string, from 0 to 32.\n     */\n    function len(bytes32 self) internal pure returns (uint) {\n        uint ret;\n        if (self == 0)\n            return 0;\n        if (uint(self) & type(uint128).max == 0) {\n            ret += 16;\n            self = bytes32(uint(self) / 0x100000000000000000000000000000000);\n        }\n        if (uint(self) & type(uint64).max == 0) {\n            ret += 8;\n            self = bytes32(uint(self) / 0x10000000000000000);\n        }\n        if (uint(self) & type(uint32).max == 0) {\n            ret += 4;\n            self = bytes32(uint(self) / 0x100000000);\n        }\n        if (uint(self) & type(uint16).max == 0) {\n            ret += 2;\n            self = bytes32(uint(self) / 0x10000);\n        }\n        if (uint(self) & type(uint8).max == 0) {\n            ret += 1;\n        }\n        return 32 - ret;\n    }\n\n    /*\n     * @dev Returns a slice containing the entire bytes32, interpreted as a\n     *      null-terminated utf-8 string.\n     * @param self The bytes32 value to convert to a slice.\n     * @return A new slice containing the value of the input argument up to the\n     *         first null.\n     */\n    function toSliceB32(bytes32 self) internal pure returns (slice memory ret) {\n        // Allocate space for `self` in memory, copy it there, and point ret at it\n        assembly {\n            let ptr := mload(0x40)\n            mstore(0x40, add(ptr, 0x20))\n            mstore(ptr, self)\n            mstore(add(ret, 0x20), ptr)\n        }\n        ret._len = len(self);\n    }\n\n    /*\n     * @dev Returns a new slice containing the same data as the current slice.\n     * @param self The slice to copy.\n     * @return A new slice containing the same data as `self`.\n     */\n    function copy(slice memory self) internal pure returns (slice memory) {\n        return slice(self._len, self._ptr);\n    }\n\n    /*\n     * @dev Copies a slice to a new string.\n     * @param self The slice to copy.\n     * @return A newly allocated string containing the slice's text.\n     */\n    function toString(slice memory self) internal pure returns (string memory) {\n        string memory ret = new string(self._len);\n        uint retptr;\n        assembly { retptr := add(ret, 32) }\n\n        memcpy(retptr, self._ptr, self._len);\n        return ret;\n    }\n\n    /*\n     * @dev Returns the length in runes of the slice. Note that this operation\n     *      takes time proportional to the length of the slice; avoid using it\n     *      in loops, and call `slice.empty()` if you only need to know whether\n     *      the slice is empty or not.\n     * @param self The slice to operate on.\n     * @return The length of the slice in runes.\n     */\n    function len(slice memory self) internal pure returns (uint l) {\n        // Starting at ptr-31 means the LSB will be the byte we care about\n        uint ptr = self._ptr - 31;\n        uint end = ptr + self._len;\n        for (l = 0; ptr < end; l++) {\n            uint8 b;\n            assembly { b := and(mload(ptr), 0xFF) }\n            if (b < 0x80) {\n                ptr += 1;\n            } else if(b < 0xE0) {\n                ptr += 2;\n            } else if(b < 0xF0) {\n                ptr += 3;\n            } else if(b < 0xF8) {\n                ptr += 4;\n            } else if(b < 0xFC) {\n                ptr += 5;\n            } else {\n                ptr += 6;\n            }\n        }\n    }\n\n    /*\n     * @dev Returns true if the slice is empty (has a length of 0).\n     * @param self The slice to operate on.\n     * @return True if the slice is empty, False otherwise.\n     */\n    function empty(slice memory self) internal pure returns (bool) {\n        return self._len == 0;\n    }\n\n    /*\n     * @dev Returns a positive number if `other` comes lexicographically after\n     *      `self`, a negative number if it comes before, or zero if the\n     *      contents of the two slices are equal. Comparison is done per-rune,\n     *      on unicode codepoints.\n     * @param self The first slice to compare.\n     * @param other The second slice to compare.\n     * @return The result of the comparison.\n     */\n    function compare(slice memory self, slice memory other) internal pure returns (int) {\n        uint shortest = self._len;\n        if (other._len < self._len)\n            shortest = other._len;\n\n        uint selfptr = self._ptr;\n        uint otherptr = other._ptr;\n        for (uint idx = 0; idx < shortest; idx += 32) {\n            uint a;\n            uint b;\n            assembly {\n                a := mload(selfptr)\n                b := mload(otherptr)\n            }\n            if (a != b) {\n                // Mask out irrelevant bytes and check again\n                uint mask = type(uint).max; // 0xffff...\n                if(shortest < 32) {\n                  mask = ~(2 ** (8 * (32 - shortest + idx)) - 1);\n                }\n                unchecked {\n                    uint diff = (a & mask) - (b & mask);\n                    if (diff != 0)\n                        return int(diff);\n                }\n            }\n            selfptr += 32;\n            otherptr += 32;\n        }\n        return int(self._len) - int(other._len);\n    }\n\n    /*\n     * @dev Returns true if the two slices contain the same text.\n     * @param self The first slice to compare.\n     * @param self The second slice to compare.\n     * @return True if the slices are equal, false otherwise.\n     */\n    function equals(slice memory self, slice memory other) internal pure returns (bool) {\n        return compare(self, other) == 0;\n    }\n\n    /*\n     * @dev Extracts the first rune in the slice into `rune`, advancing the\n     *      slice to point to the next rune and returning `self`.\n     * @param self The slice to operate on.\n     * @param rune The slice that will contain the first rune.\n     * @return `rune`.\n     */\n    function nextRune(slice memory self, slice memory rune) internal pure returns (slice memory) {\n        rune._ptr = self._ptr;\n\n        if (self._len == 0) {\n            rune._len = 0;\n            return rune;\n        }\n\n        uint l;\n        uint b;\n        // Load the first byte of the rune into the LSBs of b\n        assembly { b := and(mload(sub(mload(add(self, 32)), 31)), 0xFF) }\n        if (b < 0x80) {\n            l = 1;\n        } else if(b < 0xE0) {\n            l = 2;\n        } else if(b < 0xF0) {\n            l = 3;\n        } else {\n            l = 4;\n        }\n\n        // Check for truncated codepoints\n        if (l > self._len) {\n            rune._len = self._len;\n            self._ptr += self._len;\n            self._len = 0;\n            return rune;\n        }\n\n        self._ptr += l;\n        self._len -= l;\n        rune._len = l;\n        return rune;\n    }\n\n    /*\n     * @dev Returns the first rune in the slice, advancing the slice to point\n     *      to the next rune.\n     * @param self The slice to operate on.\n     * @return A slice containing only the first rune from `self`.\n     */\n    function nextRune(slice memory self) internal pure returns (slice memory ret) {\n        nextRune(self, ret);\n    }\n\n    /*\n     * @dev Returns the number of the first codepoint in the slice.\n     * @param self The slice to operate on.\n     * @return The number of the first codepoint in the slice.\n     */\n    function ord(slice memory self) internal pure returns (uint ret) {\n        if (self._len == 0) {\n            return 0;\n        }\n\n        uint word;\n        uint length;\n        uint divisor = 2 ** 248;\n\n        // Load the rune into the MSBs of b\n        assembly { word:= mload(mload(add(self, 32))) }\n        uint b = word / divisor;\n        if (b < 0x80) {\n            ret = b;\n            length = 1;\n        } else if(b < 0xE0) {\n            ret = b & 0x1F;\n            length = 2;\n        } else if(b < 0xF0) {\n            ret = b & 0x0F;\n            length = 3;\n        } else {\n            ret = b & 0x07;\n            length = 4;\n        }\n\n        // Check for truncated codepoints\n        if (length > self._len) {\n            return 0;\n        }\n\n        for (uint i = 1; i < length; i++) {\n            divisor = divisor / 256;\n            b = (word / divisor) & 0xFF;\n            if (b & 0xC0 != 0x80) {\n                // Invalid UTF-8 sequence\n                return 0;\n            }\n            ret = (ret * 64) | (b & 0x3F);\n        }\n\n        return ret;\n    }\n\n    /*\n     * @dev Returns the keccak-256 hash of the slice.\n     * @param self The slice to hash.\n     * @return The hash of the slice.\n     */\n    function keccak(slice memory self) internal pure returns (bytes32 ret) {\n        assembly {\n            ret := keccak256(mload(add(self, 32)), mload(self))\n        }\n    }\n\n    /*\n     * @dev Returns true if `self` starts with `needle`.\n     * @param self The slice to operate on.\n     * @param needle The slice to search for.\n     * @return True if the slice starts with the provided text, false otherwise.\n     */\n    function startsWith(slice memory self, slice memory needle) internal pure returns (bool) {\n        if (self._len < needle._len) {\n            return false;\n        }\n\n        if (self._ptr == needle._ptr) {\n            return true;\n        }\n\n        bool equal;\n        assembly {\n            let length := mload(needle)\n            let selfptr := mload(add(self, 0x20))\n            let needleptr := mload(add(needle, 0x20))\n            equal := eq(keccak256(selfptr, length), keccak256(needleptr, length))\n        }\n        return equal;\n    }\n\n    /*\n     * @dev If `self` starts with `needle`, `needle` is removed from the\n     *      beginning of `self`. Otherwise, `self` is unmodified.\n     * @param self The slice to operate on.\n     * @param needle The slice to search for.\n     * @return `self`\n     */\n    function beyond(slice memory self, slice memory needle) internal pure returns (slice memory) {\n        if (self._len < needle._len) {\n            return self;\n        }\n\n        bool equal = true;\n        if (self._ptr != needle._ptr) {\n            assembly {\n                let length := mload(needle)\n                let selfptr := mload(add(self, 0x20))\n                let needleptr := mload(add(needle, 0x20))\n                equal := eq(keccak256(selfptr, length), keccak256(needleptr, length))\n            }\n        }\n\n        if (equal) {\n            self._len -= needle._len;\n            self._ptr += needle._len;\n        }\n\n        return self;\n    }\n\n    /*\n     * @dev Returns true if the slice ends with `needle`.\n     * @param self The slice to operate on.\n     * @param needle The slice to search for.\n     * @return True if the slice starts with the provided text, false otherwise.\n     */\n    function endsWith(slice memory self, slice memory needle) internal pure returns (bool) {\n        if (self._len < needle._len) {\n            return false;\n        }\n\n        uint selfptr = self._ptr + self._len - needle._len;\n\n        if (selfptr == needle._ptr) {\n            return true;\n        }\n\n        bool equal;\n        assembly {\n            let length := mload(needle)\n            let needleptr := mload(add(needle, 0x20))\n            equal := eq(keccak256(selfptr, length), keccak256(needleptr, length))\n        }\n\n        return equal;\n    }\n\n    /*\n     * @dev If `self` ends with `needle`, `needle` is removed from the\n     *      end of `self`. Otherwise, `self` is unmodified.\n     * @param self The slice to operate on.\n     * @param needle The slice to search for.\n     * @return `self`\n     */\n    function until(slice memory self, slice memory needle) internal pure returns (slice memory) {\n        if (self._len < needle._len) {\n            return self;\n        }\n\n        uint selfptr = self._ptr + self._len - needle._len;\n        bool equal = true;\n        if (selfptr != needle._ptr) {\n            assembly {\n                let length := mload(needle)\n                let needleptr := mload(add(needle, 0x20))\n                equal := eq(keccak256(selfptr, length), keccak256(needleptr, length))\n            }\n        }\n\n        if (equal) {\n            self._len -= needle._len;\n        }\n\n        return self;\n    }\n\n    // Returns the memory address of the first byte of the first occurrence of\n    // `needle` in `self`, or the first byte after `self` if not found.\n    function findPtr(uint selflen, uint selfptr, uint needlelen, uint needleptr) private pure returns (uint) {\n        uint ptr = selfptr;\n        uint idx;\n\n        if (needlelen <= selflen) {\n            if (needlelen <= 32) {\n                bytes32 mask;\n                if (needlelen > 0) {\n                    mask = bytes32(~(2 ** (8 * (32 - needlelen)) - 1));\n                }\n\n                bytes32 needledata;\n                assembly { needledata := and(mload(needleptr), mask) }\n\n                uint end = selfptr + selflen - needlelen;\n                bytes32 ptrdata;\n                assembly { ptrdata := and(mload(ptr), mask) }\n\n                while (ptrdata != needledata) {\n                    if (ptr >= end)\n                        return selfptr + selflen;\n                    ptr++;\n                    assembly { ptrdata := and(mload(ptr), mask) }\n                }\n                return ptr;\n            } else {\n                // For long needles, use hashing\n                bytes32 hash;\n                assembly { hash := keccak256(needleptr, needlelen) }\n\n                for (idx = 0; idx <= selflen - needlelen; idx++) {\n                    bytes32 testHash;\n                    assembly { testHash := keccak256(ptr, needlelen) }\n                    if (hash == testHash)\n                        return ptr;\n                    ptr += 1;\n                }\n            }\n        }\n        return selfptr + selflen;\n    }\n\n    // Returns the memory address of the first byte after the last occurrence of\n    // `needle` in `self`, or the address of `self` if not found.\n    function rfindPtr(uint selflen, uint selfptr, uint needlelen, uint needleptr) private pure returns (uint) {\n        uint ptr;\n\n        if (needlelen <= selflen) {\n            if (needlelen <= 32) {\n                bytes32 mask;\n                if (needlelen > 0) {\n                    mask = bytes32(~(2 ** (8 * (32 - needlelen)) - 1));\n                }\n\n                bytes32 needledata;\n                assembly { needledata := and(mload(needleptr), mask) }\n\n                ptr = selfptr + selflen - needlelen;\n                bytes32 ptrdata;\n                assembly { ptrdata := and(mload(ptr), mask) }\n\n                while (ptrdata != needledata) {\n                    if (ptr <= selfptr)\n                        return selfptr;\n                    ptr--;\n                    assembly { ptrdata := and(mload(ptr), mask) }\n                }\n                return ptr + needlelen;\n            } else {\n                // For long needles, use hashing\n                bytes32 hash;\n                assembly { hash := keccak256(needleptr, needlelen) }\n                ptr = selfptr + (selflen - needlelen);\n                while (ptr >= selfptr) {\n                    bytes32 testHash;\n                    assembly { testHash := keccak256(ptr, needlelen) }\n                    if (hash == testHash)\n                        return ptr + needlelen;\n                    ptr -= 1;\n                }\n            }\n        }\n        return selfptr;\n    }\n\n    /*\n     * @dev Modifies `self` to contain everything from the first occurrence of\n     *      `needle` to the end of the slice. `self` is set to the empty slice\n     *      if `needle` is not found.\n     * @param self The slice to search and modify.\n     * @param needle The text to search for.\n     * @return `self`.\n     */\n    function find(slice memory self, slice memory needle) internal pure returns (slice memory) {\n        uint ptr = findPtr(self._len, self._ptr, needle._len, needle._ptr);\n        self._len -= ptr - self._ptr;\n        self._ptr = ptr;\n        return self;\n    }\n\n    /*\n     * @dev Modifies `self` to contain the part of the string from the start of\n     *      `self` to the end of the first occurrence of `needle`. If `needle`\n     *      is not found, `self` is set to the empty slice.\n     * @param self The slice to search and modify.\n     * @param needle The text to search for.\n     * @return `self`.\n     */\n    function rfind(slice memory self, slice memory needle) internal pure returns (slice memory) {\n        uint ptr = rfindPtr(self._len, self._ptr, needle._len, needle._ptr);\n        self._len = ptr - self._ptr;\n        return self;\n    }\n\n    /*\n     * @dev Splits the slice, setting `self` to everything after the first\n     *      occurrence of `needle`, and `token` to everything before it. If\n     *      `needle` does not occur in `self`, `self` is set to the empty slice,\n     *      and `token` is set to the entirety of `self`.\n     * @param self The slice to split.\n     * @param needle The text to search for in `self`.\n     * @param token An output parameter to which the first token is written.\n     * @return `token`.\n     */\n    function split(slice memory self, slice memory needle, slice memory token) internal pure returns (slice memory) {\n        uint ptr = findPtr(self._len, self._ptr, needle._len, needle._ptr);\n        token._ptr = self._ptr;\n        token._len = ptr - self._ptr;\n        if (ptr == self._ptr + self._len) {\n            // Not found\n            self._len = 0;\n        } else {\n            self._len -= token._len + needle._len;\n            self._ptr = ptr + needle._len;\n        }\n        return token;\n    }\n\n    /*\n     * @dev Splits the slice, setting `self` to everything after the first\n     *      occurrence of `needle`, and returning everything before it. If\n     *      `needle` does not occur in `self`, `self` is set to the empty slice,\n     *      and the entirety of `self` is returned.\n     * @param self The slice to split.\n     * @param needle The text to search for in `self`.\n     * @return The part of `self` up to the first occurrence of `delim`.\n     */\n    function split(slice memory self, slice memory needle) internal pure returns (slice memory token) {\n        split(self, needle, token);\n    }\n\n    /*\n     * @dev Splits the slice, setting `self` to everything before the last\n     *      occurrence of `needle`, and `token` to everything after it. If\n     *      `needle` does not occur in `self`, `self` is set to the empty slice,\n     *      and `token` is set to the entirety of `self`.\n     * @param self The slice to split.\n     * @param needle The text to search for in `self`.\n     * @param token An output parameter to which the first token is written.\n     * @return `token`.\n     */\n    function rsplit(slice memory self, slice memory needle, slice memory token) internal pure returns (slice memory) {\n        uint ptr = rfindPtr(self._len, self._ptr, needle._len, needle._ptr);\n        token._ptr = ptr;\n        token._len = self._len - (ptr - self._ptr);\n        if (ptr == self._ptr) {\n            // Not found\n            self._len = 0;\n        } else {\n            self._len -= token._len + needle._len;\n        }\n        return token;\n    }\n\n    /*\n     * @dev Splits the slice, setting `self` to everything before the last\n     *      occurrence of `needle`, and returning everything after it. If\n     *      `needle` does not occur in `self`, `self` is set to the empty slice,\n     *      and the entirety of `self` is returned.\n     * @param self The slice to split.\n     * @param needle The text to search for in `self`.\n     * @return The part of `self` after the last occurrence of `delim`.\n     */\n    function rsplit(slice memory self, slice memory needle) internal pure returns (slice memory token) {\n        rsplit(self, needle, token);\n    }\n\n    /*\n     * @dev Counts the number of nonoverlapping occurrences of `needle` in `self`.\n     * @param self The slice to search.\n     * @param needle The text to search for in `self`.\n     * @return The number of occurrences of `needle` found in `self`.\n     */\n    function count(slice memory self, slice memory needle) internal pure returns (uint cnt) {\n        uint ptr = findPtr(self._len, self._ptr, needle._len, needle._ptr) + needle._len;\n        while (ptr <= self._ptr + self._len) {\n            cnt++;\n            ptr = findPtr(self._len - (ptr - self._ptr), ptr, needle._len, needle._ptr) + needle._len;\n        }\n    }\n\n    /*\n     * @dev Returns True if `self` contains `needle`.\n     * @param self The slice to search.\n     * @param needle The text to search for in `self`.\n     * @return True if `needle` is found in `self`, false otherwise.\n     */\n    function contains(slice memory self, slice memory needle) internal pure returns (bool) {\n        return rfindPtr(self._len, self._ptr, needle._len, needle._ptr) != self._ptr;\n    }\n\n    /*\n     * @dev Returns a newly allocated string containing the concatenation of\n     *      `self` and `other`.\n     * @param self The first slice to concatenate.\n     * @param other The second slice to concatenate.\n     * @return The concatenation of the two strings.\n     */\n    function concat(slice memory self, slice memory other) internal pure returns (string memory) {\n        string memory ret = new string(self._len + other._len);\n        uint retptr;\n        assembly { retptr := add(ret, 32) }\n        memcpy(retptr, self._ptr, self._len);\n        memcpy(retptr + self._len, other._ptr, other._len);\n        return ret;\n    }\n\n    /*\n     * @dev Joins an array of slices, using `self` as a delimiter, returning a\n     *      newly allocated string.\n     * @param self The delimiter to use.\n     * @param parts A list of slices to join.\n     * @return A newly allocated string containing all the slices in `parts`,\n     *         joined with `self`.\n     */\n    function join(slice memory self, slice[] memory parts) internal pure returns (string memory) {\n        if (parts.length == 0)\n            return \"\";\n\n        uint length = self._len * (parts.length - 1);\n        for(uint i = 0; i < parts.length; i++)\n            length += parts[i]._len;\n\n        string memory ret = new string(length);\n        uint retptr;\n        assembly { retptr := add(ret, 32) }\n\n        for(uint i = 0; i < parts.length; i++) {\n            memcpy(retptr, parts[i]._ptr, parts[i]._len);\n            retptr += parts[i]._len;\n            if (i < parts.length - 1) {\n                memcpy(retptr, self._ptr, self._len);\n                retptr += self._len;\n            }\n        }\n\n        return ret;\n    }\n}\n"
      },
      "lib/openzeppelin-foundry-upgrades/src/Defender.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport {Options, DefenderOptions} from \"./Options.sol\";\nimport {Upgrades} from \"./Upgrades.sol\";\nimport {DefenderDeploy} from \"./internal/DefenderDeploy.sol\";\n\n/**\n * @dev Library for interacting with OpenZeppelin Defender from Forge scripts or tests.\n */\nlibrary Defender {\n    /**\n     * @dev Deploys a contract to the current network using OpenZeppelin Defender.\n     *\n     * WARNING: Do not use this function directly if you are deploying an upgradeable contract. This function does not validate whether the contract is upgrade safe.\n     *\n     * NOTE: If using an EOA or Safe to deploy, go to https://defender.openzeppelin.com/v2/#/deploy[Defender deploy] to submit the pending deployment while the script is running.\n     * The script waits for the deployment to complete before it continues.\n     *\n     * @param contractName Name of the contract to deploy, e.g. \"MyContract.sol\" or \"MyContract.sol:MyContract\" or artifact path relative to the project root directory\n     * @return Address of the deployed contract\n     */\n    function deployContract(string memory contractName) internal returns (address) {\n        return deployContract(contractName, \"\");\n    }\n\n    /**\n     * @dev Deploys a contract to the current network using OpenZeppelin Defender.\n     *\n     * WARNING: Do not use this function directly if you are deploying an upgradeable contract. This function does not validate whether the contract is upgrade safe.\n     *\n     * NOTE: If using an EOA or Safe to deploy, go to https://defender.openzeppelin.com/v2/#/deploy[Defender deploy] to submit the pending deployment while the script is running.\n     * The script waits for the deployment to complete before it continues.\n     *\n     * @param contractName Name of the contract to deploy, e.g. \"MyContract.sol\" or \"MyContract.sol:MyContract\" or artifact path relative to the project root directory\n     * @param defenderOpts Defender deployment options. Note that the `useDefenderDeploy` option is always treated as `true` when called from this function.\n     * @return Address of the deployed contract\n     */\n    function deployContract(\n        string memory contractName,\n        DefenderOptions memory defenderOpts\n    ) internal returns (address) {\n        return deployContract(contractName, \"\", defenderOpts);\n    }\n\n    /**\n     * @dev Deploys a contract with constructor arguments to the current network using OpenZeppelin Defender.\n     *\n     * WARNING: Do not use this function directly if you are deploying an upgradeable contract. This function does not validate whether the contract is upgrade safe.\n     *\n     * NOTE: If using an EOA or Safe to deploy, go to https://defender.openzeppelin.com/v2/#/deploy[Defender deploy] to submit the pending deployment while the script is running.\n     * The script waits for the deployment to complete before it continues.\n     *\n     * @param contractName Name of the contract to deploy, e.g. \"MyContract.sol\" or \"MyContract.sol:MyContract\" or artifact path relative to the project root directory\n     * @param constructorData Encoded constructor arguments\n     * @return Address of the deployed contract\n     */\n    function deployContract(string memory contractName, bytes memory constructorData) internal returns (address) {\n        DefenderOptions memory defenderOpts;\n        return deployContract(contractName, constructorData, defenderOpts);\n    }\n\n    /**\n     * @dev Deploys a contract with constructor arguments to the current network using OpenZeppelin Defender.\n     *\n     * WARNING: Do not use this function directly if you are deploying an upgradeable contract. This function does not validate whether the contract is upgrade safe.\n     *\n     * NOTE: If using an EOA or Safe to deploy, go to https://defender.openzeppelin.com/v2/#/deploy[Defender deploy] to submit the pending deployment while the script is running.\n     * The script waits for the deployment to complete before it continues.\n     *\n     * @param contractName Name of the contract to deploy, e.g. \"MyContract.sol\" or \"MyContract.sol:MyContract\" or artifact path relative to the project root directory\n     * @param constructorData Encoded constructor arguments\n     * @param defenderOpts Defender deployment options. Note that the `useDefenderDeploy` option is always treated as `true` when called from this function.\n     * @return Address of the deployed contract\n     */\n    function deployContract(\n        string memory contractName,\n        bytes memory constructorData,\n        DefenderOptions memory defenderOpts\n    ) internal returns (address) {\n        return DefenderDeploy.deploy(contractName, constructorData, defenderOpts);\n    }\n\n    /**\n     * @dev Proposes an upgrade to an upgradeable proxy using OpenZeppelin Defender.\n     *\n     * This function validates a new implementation contract in comparison with a reference contract, deploys the new implementation contract using Defender,\n     * and proposes an upgrade to the new implementation contract using an upgrade approval process on Defender.\n     *\n     * Supported for UUPS or Transparent proxies. Not currently supported for beacon proxies or beacons.\n     * For beacons, use `Upgrades.prepareUpgrade` along with a transaction proposal on Defender to upgrade the beacon to the deployed implementation.\n     *\n     * Requires that either the `referenceContract` option is set, or the contract has a `@custom:oz-upgrades-from <reference>` annotation.\n     *\n     * WARNING: Ensure that the reference contract is the same as the current implementation contract that the proxy is pointing to.\n     * This function does not validate that the reference contract is the current implementation.\n     *\n     * NOTE: If using an EOA or Safe to deploy, go to https://defender.openzeppelin.com/v2/#/deploy[Defender deploy] to submit the pending deployment of the new implementation contract while the script is running.\n     * The script waits for the deployment to complete before it continues.\n     *\n     * @param proxyAddress The proxy address\n     * @param newImplementationContractName Name of the new implementation contract to upgrade to, e.g. \"MyContract.sol\" or \"MyContract.sol:MyContract\" or artifact path relative to the project root directory\n     * @param opts Common options. Note that the `defender.useDefenderDeploy` option is always treated as `true` when called from this function.\n     * @return Struct containing the proposal ID and URL for the upgrade proposal\n     */\n    function proposeUpgrade(\n        address proxyAddress,\n        string memory newImplementationContractName,\n        Options memory opts\n    ) internal returns (ProposeUpgradeResponse memory) {\n        opts.defender.useDefenderDeploy = true;\n        address proxyAdminAddress = Upgrades.getAdminAddress(proxyAddress);\n        address newImplementationAddress = Upgrades.prepareUpgrade(newImplementationContractName, opts);\n        return\n            DefenderDeploy.proposeUpgrade(\n                proxyAddress,\n                proxyAdminAddress,\n                newImplementationAddress,\n                newImplementationContractName,\n                opts\n            );\n    }\n\n    /**\n     * @dev Gets the default deploy approval process configured for your deployment environment on OpenZeppelin Defender.\n     *\n     * @return Struct with the default deploy approval process ID and the associated address, such as a Relayer, EOA, or multisig wallet address.\n     */\n    function getDeployApprovalProcess() internal returns (ApprovalProcessResponse memory) {\n        return DefenderDeploy.getApprovalProcess(\"getDeployApprovalProcess\");\n    }\n\n    /**\n     * @dev Gets the default upgrade approval process configured for your deployment environment on OpenZeppelin Defender.\n     * For example, this is useful for determining the default multisig wallet that you can use in your scripts to assign as the owner of your proxy.\n     *\n     * @return Struct with the default upgrade approval process ID and the associated address, such as a multisig or governor contract address.\n     */\n    function getUpgradeApprovalProcess() internal returns (ApprovalProcessResponse memory) {\n        return DefenderDeploy.getApprovalProcess(\"getUpgradeApprovalProcess\");\n    }\n}\n\nstruct ProposeUpgradeResponse {\n    string proposalId;\n    string url;\n}\n\nstruct ApprovalProcessResponse {\n    string approvalProcessId;\n    address via;\n    string viaType;\n}\n"
      },
      "lib/openzeppelin-foundry-upgrades/src/Options.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nstruct Options {\n    /**\n     * The reference contract to use for storage layout comparisons, e.g. \"ContractV1.sol\" or \"ContractV1.sol:ContractV1\".\n     * If not set, attempts to use the `@custom:oz-upgrades-from <reference>` annotation from the contract.\n     */\n    string referenceContract;\n    /**\n     * Encoded constructor arguments for the implementation contract.\n     * Note that these are different from initializer arguments, and will be used in the deployment of the implementation contract itself.\n     * Can be used to initialize immutable variables.\n     */\n    bytes constructorData;\n    /**\n     * Selectively disable one or more validation errors. Comma-separated list that must be compatible with the\n     * --unsafeAllow option described in https://docs.openzeppelin.com/upgrades-plugins/1.x/api-core#usage\n     */\n    string unsafeAllow;\n    /**\n     * Configure storage layout check to allow variable renaming\n     */\n    bool unsafeAllowRenames;\n    /**\n     * Skips checking for storage layout compatibility errors. This is a dangerous option meant to be used as a last resort.\n     */\n    bool unsafeSkipStorageCheck;\n    /**\n     * Skips all upgrade safety checks. This is a dangerous option meant to be used as a last resort.\n     */\n    bool unsafeSkipAllChecks;\n    /**\n     * Options for OpenZeppelin Defender deployments.\n     */\n    DefenderOptions defender;\n}\n\nstruct DefenderOptions {\n    /**\n     * Deploys contracts using OpenZeppelin Defender instead of broadcasting deployments through Forge. Defaults to `false`. See DEFENDER.md.\n     *\n     * NOTE: If using an EOA or Safe to deploy, go to https://defender.openzeppelin.com/v2/#/deploy[Defender deploy] to submit the pending deployment(s) while the script is running.\n     * The script waits for each deployment to complete before it continues.\n     */\n    bool useDefenderDeploy;\n    /**\n     * When using OpenZeppelin Defender deployments, whether to skip verifying source code on block explorers. Defaults to `false`.\n     */\n    bool skipVerifySourceCode;\n    /**\n     * When using OpenZeppelin Defender deployments, the ID of the relayer to use for the deployment. Defaults to the relayer configured for your deployment environment on Defender.\n     */\n    string relayerId;\n    /**\n     * Applies to OpenZeppelin Defender deployments only.\n     * If this is not set, deployments will be performed using the CREATE opcode.\n     * If this is set, deployments will be performed using the CREATE2 opcode with the provided salt.\n     * Note that deployments using a Safe are done using CREATE2 and require a salt.\n     *\n     * WARNING: CREATE2 affects `msg.sender` behavior. See https://docs.openzeppelin.com/defender/v2/tutorial/deploy#deploy-caveat for more information.\n     */\n    bytes32 salt;\n    /**\n     * The ID of the upgrade approval process to use when proposing an upgrade.\n     * Defaults to the upgrade approval process configured for your deployment environment on Defender.\n     */\n    string upgradeApprovalProcessId;\n}\n"
      },
      "lib/openzeppelin-foundry-upgrades/src/Upgrades.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport {ERC1967Proxy} from \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\";\nimport {ERC1967Utils} from \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\";\nimport {ITransparentUpgradeableProxy, TransparentUpgradeableProxy} from \"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\";\nimport {ProxyAdmin} from \"@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol\";\nimport {UpgradeableBeacon} from \"@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol\";\nimport {BeaconProxy} from \"@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol\";\n\nimport {Vm} from \"forge-std/Vm.sol\";\nimport {console} from \"forge-std/console.sol\";\nimport {strings} from \"solidity-stringutils/src/strings.sol\";\n\nimport {Options} from \"./Options.sol\";\nimport {Versions} from \"./internal/Versions.sol\";\nimport {Utils} from \"./internal/Utils.sol\";\nimport {DefenderDeploy} from \"./internal/DefenderDeploy.sol\";\n\n/**\n * @dev Library for deploying and managing upgradeable contracts from Forge scripts or tests.\n */\nlibrary Upgrades {\n    /**\n     * @dev Deploys a UUPS proxy using the given contract as the implementation.\n     *\n     * @param contractName Name of the contract to use as the implementation, e.g. \"MyContract.sol\" or \"MyContract.sol:MyContract\" or artifact path relative to the project root directory\n     * @param initializerData Encoded call data of the initializer function to call during creation of the proxy, or empty if no initialization is required\n     * @param opts Common options\n     * @return Proxy address\n     */\n    function deployUUPSProxy(\n        string memory contractName,\n        bytes memory initializerData,\n        Options memory opts\n    ) internal returns (address) {\n        address impl = deployImplementation(contractName, opts);\n        return address(_deploy(\"ERC1967Proxy.sol:ERC1967Proxy\", abi.encode(impl, initializerData), opts));\n    }\n\n    /**\n     * @dev Deploys a UUPS proxy using the given contract as the implementation.\n     *\n     * @param contractName Name of the contract to use as the implementation, e.g. \"MyContract.sol\" or \"MyContract.sol:MyContract\" or artifact path relative to the project root directory\n     * @param initializerData Encoded call data of the initializer function to call during creation of the proxy, or empty if no initialization is required\n     * @return Proxy address\n     */\n    function deployUUPSProxy(string memory contractName, bytes memory initializerData) internal returns (address) {\n        Options memory opts;\n        return deployUUPSProxy(contractName, initializerData, opts);\n    }\n\n    /**\n     * @dev Deploys a transparent proxy using the given contract as the implementation.\n     *\n     * @param contractName Name of the contract to use as the implementation, e.g. \"MyContract.sol\" or \"MyContract.sol:MyContract\" or artifact path relative to the project root directory\n     * @param initialOwner Address to set as the owner of the ProxyAdmin contract which gets deployed by the proxy\n     * @param initializerData Encoded call data of the initializer function to call during creation of the proxy, or empty if no initialization is required\n     * @param opts Common options\n     * @return Proxy address\n     */\n    function deployTransparentProxy(\n        string memory contractName,\n        address initialOwner,\n        bytes memory initializerData,\n        Options memory opts\n    ) internal returns (address) {\n        address impl = deployImplementation(contractName, opts);\n        return\n            address(\n                _deploy(\n                    \"TransparentUpgradeableProxy.sol:TransparentUpgradeableProxy\",\n                    abi.encode(impl, initialOwner, initializerData),\n                    opts\n                )\n            );\n    }\n\n    /**\n     * @dev Deploys a transparent proxy using the given contract as the implementation.\n     *\n     * @param contractName Name of the contract to use as the implementation, e.g. \"MyContract.sol\" or \"MyContract.sol:MyContract\" or artifact path relative to the project root directory\n     * @param initialOwner Address to set as the owner of the ProxyAdmin contract which gets deployed by the proxy\n     * @param initializerData Encoded call data of the initializer function to call during creation of the proxy, or empty if no initialization is required\n     * @return Proxy address\n     */\n    function deployTransparentProxy(\n        string memory contractName,\n        address initialOwner,\n        bytes memory initializerData\n    ) internal returns (address) {\n        Options memory opts;\n        return deployTransparentProxy(contractName, initialOwner, initializerData, opts);\n    }\n\n    /**\n     * @dev Upgrades a proxy to a new implementation contract. Only supported for UUPS or transparent proxies.\n     *\n     * Requires that either the `referenceContract` option is set, or the new implementation contract has a `@custom:oz-upgrades-from <reference>` annotation.\n     *\n     * @param proxy Address of the proxy to upgrade\n     * @param contractName Name of the new implementation contract to upgrade to, e.g. \"MyContract.sol\" or \"MyContract.sol:MyContract\" or artifact path relative to the project root directory\n     * @param data Encoded call data of an arbitrary function to call during the upgrade process, or empty if no function needs to be called during the upgrade\n     * @param opts Common options\n     */\n    function upgradeProxy(address proxy, string memory contractName, bytes memory data, Options memory opts) internal {\n        address newImpl = prepareUpgrade(contractName, opts);\n\n        Vm vm = Vm(CHEATCODE_ADDRESS);\n\n        bytes32 adminSlot = vm.load(proxy, ERC1967Utils.ADMIN_SLOT);\n        if (adminSlot == bytes32(0)) {\n            // No admin contract: upgrade directly using interface\n            ITransparentUpgradeableProxy(proxy).upgradeToAndCall(newImpl, data);\n        } else {\n            ProxyAdmin admin = ProxyAdmin(address(uint160(uint256(adminSlot))));\n            admin.upgradeAndCall(ITransparentUpgradeableProxy(proxy), newImpl, data);\n        }\n    }\n\n    /**\n     * @dev Upgrades a proxy to a new implementation contract. Only supported for UUPS or transparent proxies.\n     *\n     * Requires that either the `referenceContract` option is set, or the new implementation contract has a `@custom:oz-upgrades-from <reference>` annotation.\n     *\n     * @param proxy Address of the proxy to upgrade\n     * @param contractName Name of the new implementation contract to upgrade to, e.g. \"MyContract.sol\" or \"MyContract.sol:MyContract\" or artifact path relative to the project root directory\n     * @param data Encoded call data of an arbitrary function to call during the upgrade process, or empty if no function needs to be called during the upgrade\n     */\n    function upgradeProxy(address proxy, string memory contractName, bytes memory data) internal {\n        Options memory opts;\n        upgradeProxy(proxy, contractName, data, opts);\n    }\n\n    /**\n     * @notice For tests only. If broadcasting in scripts, use the `--sender <ADDRESS>` option with `forge script` instead.\n     *\n     * @dev Upgrades a proxy to a new implementation contract. Only supported for UUPS or transparent proxies.\n     *\n     * Requires that either the `referenceContract` option is set, or the new implementation contract has a `@custom:oz-upgrades-from <reference>` annotation.\n     *\n     * This function provides an additional `tryCaller` parameter to test an upgrade using a specific caller address.\n     * Use this if you encounter `OwnableUnauthorizedAccount` errors in your tests.\n     *\n     * @param proxy Address of the proxy to upgrade\n     * @param contractName Name of the new implementation contract to upgrade to, e.g. \"MyContract.sol\" or \"MyContract.sol:MyContract\" or artifact path relative to the project root directory\n     * @param data Encoded call data of an arbitrary function to call during the upgrade process, or empty if no function needs to be called during the upgrade\n     * @param opts Common options\n     * @param tryCaller Address to use as the caller of the upgrade function. This should be the address that owns the proxy or its ProxyAdmin.\n     */\n    function upgradeProxy(\n        address proxy,\n        string memory contractName,\n        bytes memory data,\n        Options memory opts,\n        address tryCaller\n    ) internal tryPrank(tryCaller) {\n        upgradeProxy(proxy, contractName, data, opts);\n    }\n\n    /**\n     * @notice For tests only. If broadcasting in scripts, use the `--sender <ADDRESS>` option with `forge script` instead.\n     *\n     * @dev Upgrades a proxy to a new implementation contract. Only supported for UUPS or transparent proxies.\n     *\n     * Requires that either the `referenceContract` option is set, or the new implementation contract has a `@custom:oz-upgrades-from <reference>` annotation.\n     *\n     * This function provides an additional `tryCaller` parameter to test an upgrade using a specific caller address.\n     * Use this if you encounter `OwnableUnauthorizedAccount` errors in your tests.\n     *\n     * @param proxy Address of the proxy to upgrade\n     * @param contractName Name of the new implementation contract to upgrade to, e.g. \"MyContract.sol\" or \"MyContract.sol:MyContract\" or artifact path relative to the project root directory\n     * @param data Encoded call data of an arbitrary function to call during the upgrade process, or empty if no function needs to be called during the upgrade\n     * @param tryCaller Address to use as the caller of the upgrade function. This should be the address that owns the proxy or its ProxyAdmin.\n     */\n    function upgradeProxy(\n        address proxy,\n        string memory contractName,\n        bytes memory data,\n        address tryCaller\n    ) internal tryPrank(tryCaller) {\n        Options memory opts;\n        upgradeProxy(proxy, contractName, data, opts, tryCaller);\n    }\n\n    /**\n     * @dev Deploys an upgradeable beacon using the given contract as the implementation.\n     *\n     * @param contractName Name of the contract to use as the implementation, e.g. \"MyContract.sol\" or \"MyContract.sol:MyContract\" or artifact path relative to the project root directory\n     * @param initialOwner Address to set as the owner of the UpgradeableBeacon contract which gets deployed\n     * @param opts Common options\n     * @return Beacon address\n     */\n    function deployBeacon(\n        string memory contractName,\n        address initialOwner,\n        Options memory opts\n    ) internal returns (address) {\n        address impl = deployImplementation(contractName, opts);\n        return _deploy(\"UpgradeableBeacon.sol:UpgradeableBeacon\", abi.encode(impl, initialOwner), opts);\n    }\n\n    /**\n     * @dev Deploys an upgradeable beacon using the given contract as the implementation.\n     *\n     * @param contractName Name of the contract to use as the implementation, e.g. \"MyContract.sol\" or \"MyContract.sol:MyContract\" or artifact path relative to the project root directory\n     * @param initialOwner Address to set as the owner of the UpgradeableBeacon contract which gets deployed\n     * @return Beacon address\n     */\n    function deployBeacon(string memory contractName, address initialOwner) internal returns (address) {\n        Options memory opts;\n        return deployBeacon(contractName, initialOwner, opts);\n    }\n\n    /**\n     * @dev Upgrades a beacon to a new implementation contract.\n     *\n     * Requires that either the `referenceContract` option is set, or the new implementation contract has a `@custom:oz-upgrades-from <reference>` annotation.\n     *\n     * @param beacon Address of the beacon to upgrade\n     * @param contractName Name of the new implementation contract to upgrade to, e.g. \"MyContract.sol\" or \"MyContract.sol:MyContract\" or artifact path relative to the project root directory\n     * @param opts Common options\n     */\n    function upgradeBeacon(address beacon, string memory contractName, Options memory opts) internal {\n        address newImpl = prepareUpgrade(contractName, opts);\n        UpgradeableBeacon(beacon).upgradeTo(newImpl);\n    }\n\n    /**\n     * @dev Upgrades a beacon to a new implementation contract.\n     *\n     * Requires that either the `referenceContract` option is set, or the new implementation contract has a `@custom:oz-upgrades-from <reference>` annotation.\n     *\n     * @param beacon Address of the beacon to upgrade\n     * @param contractName Name of the new implementation contract to upgrade to, e.g. \"MyContract.sol\" or \"MyContract.sol:MyContract\" or artifact path relative to the project root directory\n     */\n    function upgradeBeacon(address beacon, string memory contractName) internal {\n        Options memory opts;\n        upgradeBeacon(beacon, contractName, opts);\n    }\n\n    /**\n     * @notice For tests only. If broadcasting in scripts, use the `--sender <ADDRESS>` option with `forge script` instead.\n     *\n     * @dev Upgrades a beacon to a new implementation contract.\n     *\n     * Requires that either the `referenceContract` option is set, or the new implementation contract has a `@custom:oz-upgrades-from <reference>` annotation.\n     *\n     * This function provides an additional `tryCaller` parameter to test an upgrade using a specific caller address.\n     * Use this if you encounter `OwnableUnauthorizedAccount` errors in your tests.\n     *\n     * @param beacon Address of the beacon to upgrade\n     * @param contractName Name of the new implementation contract to upgrade to, e.g. \"MyContract.sol\" or \"MyContract.sol:MyContract\" or artifact path relative to the project root directory\n     * @param opts Common options\n     * @param tryCaller Address to use as the caller of the upgrade function. This should be the address that owns the beacon.\n     */\n    function upgradeBeacon(\n        address beacon,\n        string memory contractName,\n        Options memory opts,\n        address tryCaller\n    ) internal tryPrank(tryCaller) {\n        upgradeBeacon(beacon, contractName, opts);\n    }\n\n    /**\n     * @notice For tests only. If broadcasting in scripts, use the `--sender <ADDRESS>` option with `forge script` instead.\n     *\n     * @dev Upgrades a beacon to a new implementation contract.\n     *\n     * Requires that either the `referenceContract` option is set, or the new implementation contract has a `@custom:oz-upgrades-from <reference>` annotation.\n     *\n     * This function provides an additional `tryCaller` parameter to test an upgrade using a specific caller address.\n     * Use this if you encounter `OwnableUnauthorizedAccount` errors in your tests.\n     *\n     * @param beacon Address of the beacon to upgrade\n     * @param contractName Name of the new implementation contract to upgrade to, e.g. \"MyContract.sol\" or \"MyContract.sol:MyContract\" or artifact path relative to the project root directory\n     * @param tryCaller Address to use as the caller of the upgrade function. This should be the address that owns the beacon.\n     */\n    function upgradeBeacon(address beacon, string memory contractName, address tryCaller) internal tryPrank(tryCaller) {\n        Options memory opts;\n        upgradeBeacon(beacon, contractName, opts, tryCaller);\n    }\n\n    /**\n     * @dev Deploys a beacon proxy using the given beacon and call data.\n     *\n     * @param beacon Address of the beacon to use\n     * @param data Encoded call data of the initializer function to call during creation of the proxy, or empty if no initialization is required\n     * @return Proxy address\n     */\n    function deployBeaconProxy(address beacon, bytes memory data) internal returns (address) {\n        Options memory opts;\n        return deployBeaconProxy(beacon, data, opts);\n    }\n\n    /**\n     * @dev Deploys a beacon proxy using the given beacon and call data.\n     *\n     * @param beacon Address of the beacon to use\n     * @param data Encoded call data of the initializer function to call during creation of the proxy, or empty if no initialization is required\n     * @param opts Common options\n     * @return Proxy address\n     */\n    function deployBeaconProxy(address beacon, bytes memory data, Options memory opts) internal returns (address) {\n        return _deploy(\"BeaconProxy.sol:BeaconProxy\", abi.encode(beacon, data), opts);\n    }\n\n    /**\n     * @dev Validates an implementation contract, but does not deploy it.\n     *\n     * @param contractName Name of the contract to validate, e.g. \"MyContract.sol\" or \"MyContract.sol:MyContract\" or artifact path relative to the project root directory\n     * @param opts Common options\n     */\n    function validateImplementation(string memory contractName, Options memory opts) internal {\n        _validate(contractName, opts, false);\n    }\n\n    /**\n     * @dev Validates and deploys an implementation contract, and returns its address.\n     *\n     * @param contractName Name of the contract to deploy, e.g. \"MyContract.sol\" or \"MyContract.sol:MyContract\" or artifact path relative to the project root directory\n     * @param opts Common options\n     * @return Address of the implementation contract\n     */\n    function deployImplementation(string memory contractName, Options memory opts) internal returns (address) {\n        validateImplementation(contractName, opts);\n        return _deploy(contractName, opts.constructorData, opts);\n    }\n\n    /**\n     * @dev Validates a new implementation contract in comparison with a reference contract, but does not deploy it.\n     *\n     * Requires that either the `referenceContract` option is set, or the contract has a `@custom:oz-upgrades-from <reference>` annotation.\n     *\n     * @param contractName Name of the contract to validate, e.g. \"MyContract.sol\" or \"MyContract.sol:MyContract\" or artifact path relative to the project root directory\n     * @param opts Common options\n     */\n    function validateUpgrade(string memory contractName, Options memory opts) internal {\n        _validate(contractName, opts, true);\n    }\n\n    /**\n     * @dev Validates a new implementation contract in comparison with a reference contract, deploys the new implementation contract,\n     * and returns its address.\n     *\n     * Requires that either the `referenceContract` option is set, or the contract has a `@custom:oz-upgrades-from <reference>` annotation.\n     *\n     * Use this method to prepare an upgrade to be run from an admin address you do not control directly or cannot use from your deployment environment.\n     *\n     * @param contractName Name of the contract to deploy, e.g. \"MyContract.sol\" or \"MyContract.sol:MyContract\" or artifact path relative to the project root directory\n     * @param opts Common options\n     * @return Address of the new implementation contract\n     */\n    function prepareUpgrade(string memory contractName, Options memory opts) internal returns (address) {\n        validateUpgrade(contractName, opts);\n        return _deploy(contractName, opts.constructorData, opts);\n    }\n\n    /**\n     * @dev Gets the admin address of a transparent proxy from its ERC1967 admin storage slot.\n     *\n     * @param proxy Address of a transparent proxy\n     * @return Admin address\n     */\n    function getAdminAddress(address proxy) internal view returns (address) {\n        Vm vm = Vm(CHEATCODE_ADDRESS);\n\n        bytes32 adminSlot = vm.load(proxy, ERC1967Utils.ADMIN_SLOT);\n        return address(uint160(uint256(adminSlot)));\n    }\n\n    /**\n     * @dev Gets the implementation address of a transparent or UUPS proxy from its ERC1967 implementation storage slot.\n     *\n     * @param proxy Address of a transparent or UUPS proxy\n     * @return Implementation address\n     */\n    function getImplementationAddress(address proxy) internal view returns (address) {\n        Vm vm = Vm(CHEATCODE_ADDRESS);\n\n        bytes32 implSlot = vm.load(proxy, ERC1967Utils.IMPLEMENTATION_SLOT);\n        return address(uint160(uint256(implSlot)));\n    }\n\n    /**\n     * @dev Gets the beacon address of a beacon proxy from its ERC1967 beacon storage slot.\n     *\n     * @param proxy Address of a beacon proxy\n     * @return Beacon address\n     */\n    function getBeaconAddress(address proxy) internal view returns (address) {\n        Vm vm = Vm(CHEATCODE_ADDRESS);\n\n        bytes32 beaconSlot = vm.load(proxy, ERC1967Utils.BEACON_SLOT);\n        return address(uint160(uint256(beaconSlot)));\n    }\n\n    /**\n     * @notice For tests only. If broadcasting in scripts, use the `--sender <ADDRESS>` option with `forge script` instead.\n     *\n     * @dev Runs a function as a prank, or just runs the function normally if the prank could not be started.\n     */\n    modifier tryPrank(address deployer) {\n        Vm vm = Vm(CHEATCODE_ADDRESS);\n\n        try vm.startPrank(deployer) {\n            _;\n            vm.stopPrank();\n        } catch {\n            _;\n        }\n    }\n\n    using strings for *;\n    address constant CHEATCODE_ADDRESS = 0x7109709ECfa91a80626fF3989D68f67F5b1DD12D;\n\n    function _validate(string memory contractName, Options memory opts, bool requireReference) private {\n        if (opts.unsafeSkipAllChecks) {\n            return;\n        }\n\n        string[] memory inputs = _buildValidateCommand(contractName, opts, requireReference);\n        Vm.FfiResult memory result = Utils.runAsBashCommand(inputs);\n        string memory stdout = string(result.stdout);\n\n        // CLI validate command uses exit code to indicate if the validation passed or failed.\n        // As an extra precaution, we also check stdout for \"SUCCESS\" to ensure it actually ran.\n        if (result.exitCode == 0 && stdout.toSlice().contains(\"SUCCESS\".toSlice())) {\n            return;\n        } else if (result.stderr.length > 0) {\n            // Validations failed to run\n            revert(string.concat(\"Failed to run upgrade safety validation: \", string(result.stderr)));\n        } else {\n            // Validations ran but some contracts were not upgrade safe\n            revert(string.concat(\"Upgrade safety validation failed:\\n\", stdout));\n        }\n    }\n\n    function _buildValidateCommand(\n        string memory contractName,\n        Options memory opts,\n        bool requireReference\n    ) private view returns (string[] memory) {\n        string memory outDir = Utils.getOutDir();\n\n        string[] memory inputBuilder = new string[](255);\n\n        uint8 i = 0;\n\n        inputBuilder[i++] = \"npx\";\n        inputBuilder[i++] = string.concat(\"@openzeppelin/upgrades-core@\", Versions.UPGRADES_CORE);\n        inputBuilder[i++] = \"validate\";\n        inputBuilder[i++] = string.concat(outDir, \"/build-info\");\n        inputBuilder[i++] = \"--contract\";\n        inputBuilder[i++] = Utils.getFullyQualifiedName(contractName, outDir);\n\n        if (bytes(opts.referenceContract).length != 0) {\n            inputBuilder[i++] = \"--reference\";\n            inputBuilder[i++] = Utils.getFullyQualifiedName(opts.referenceContract, outDir);\n        }\n\n        if (opts.unsafeSkipStorageCheck) {\n            inputBuilder[i++] = \"--unsafeSkipStorageCheck\";\n        } else if (requireReference) {\n            inputBuilder[i++] = \"--requireReference\";\n        }\n\n        if (bytes(opts.unsafeAllow).length != 0) {\n            inputBuilder[i++] = \"--unsafeAllow\";\n            inputBuilder[i++] = opts.unsafeAllow;\n        }\n\n        if (opts.unsafeAllowRenames) {\n            inputBuilder[i++] = \"--unsafeAllowRenames\";\n        }\n\n        // Create a copy of inputs but with the correct length\n        string[] memory inputs = new string[](i);\n        for (uint8 j = 0; j < i; j++) {\n            inputs[j] = inputBuilder[j];\n        }\n\n        return inputs;\n    }\n\n    function _deploy(\n        string memory contractName,\n        bytes memory constructorData,\n        Options memory opts\n    ) private returns (address) {\n        if (opts.defender.useDefenderDeploy) {\n            return DefenderDeploy.deploy(contractName, constructorData, opts.defender);\n        } else {\n            bytes memory creationCode = Vm(CHEATCODE_ADDRESS).getCode(contractName);\n            address deployedAddress = _deployFromBytecode(abi.encodePacked(creationCode, constructorData));\n            if (deployedAddress == address(0)) {\n                revert(\n                    string.concat(\n                        \"Failed to deploy contract \",\n                        contractName,\n                        ' using constructor data \"',\n                        string(constructorData),\n                        '\"'\n                    )\n                );\n            }\n            return deployedAddress;\n        }\n    }\n\n    function _deployFromBytecode(bytes memory bytecode) private returns (address) {\n        address addr;\n        assembly {\n            addr := create(0, add(bytecode, 32), mload(bytecode))\n        }\n        return addr;\n    }\n\n    /**\n     * @dev Precompile proxy contracts so that they can be deployed by name via the `_deploy` function.\n     *\n     * NOTE: This function is never called and has no effect, but must be kept to ensure that the proxy contracts are included in the compilation.\n     */\n    function _precompileProxyContracts() private pure {\n        bytes memory dummy;\n        dummy = type(ERC1967Proxy).creationCode;\n        dummy = type(TransparentUpgradeableProxy).creationCode;\n        dummy = type(UpgradeableBeacon).creationCode;\n        dummy = type(BeaconProxy).creationCode;\n    }\n}\n"
      },
      "lib/openzeppelin-foundry-upgrades/src/internal/DefenderDeploy.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport {Vm} from \"forge-std/Vm.sol\";\nimport {console} from \"forge-std/console.sol\";\nimport {strings} from \"solidity-stringutils/src/strings.sol\";\n\nimport {Strings} from \"@openzeppelin/contracts/utils/Strings.sol\";\n\nimport {Utils, ContractInfo} from \"./Utils.sol\";\nimport {Versions} from \"./Versions.sol\";\nimport {Options, DefenderOptions} from \"../Options.sol\";\nimport {ProposeUpgradeResponse, ApprovalProcessResponse} from \"../Defender.sol\";\n\n/**\n * @dev Internal helper methods for Defender deployments.\n *\n * DO NOT USE DIRECTLY. Use Defender.sol instead.\n */\nlibrary DefenderDeploy {\n    using strings for *;\n\n    function deploy(\n        string memory contractName,\n        bytes memory constructorData,\n        DefenderOptions memory defenderOpts\n    ) internal returns (address) {\n        string memory outDir = Utils.getOutDir();\n        ContractInfo memory contractInfo = Utils.getContractInfo(contractName, outDir);\n        string memory buildInfoFile = Utils.getBuildInfoFile(\n            contractInfo.sourceCodeHash,\n            contractInfo.shortName,\n            outDir\n        );\n\n        string[] memory inputs = buildDeployCommand(contractInfo, buildInfoFile, constructorData, defenderOpts);\n\n        Vm.FfiResult memory result = Utils.runAsBashCommand(inputs);\n        string memory stdout = string(result.stdout);\n\n        if (result.exitCode != 0) {\n            revert(string.concat(\"Failed to deploy contract \", contractName, \": \", string(result.stderr)));\n        }\n\n        string memory deployedAddress = _parseLine(\"Deployed to address: \", stdout, true);\n        return Vm(Utils.CHEATCODE_ADDRESS).parseAddress(deployedAddress);\n    }\n\n    function buildDeployCommand(\n        ContractInfo memory contractInfo,\n        string memory buildInfoFile,\n        bytes memory constructorData,\n        DefenderOptions memory defenderOpts\n    ) internal view returns (string[] memory) {\n        Vm vm = Vm(Utils.CHEATCODE_ADDRESS);\n\n        string[] memory inputBuilder = new string[](255);\n\n        uint8 i = 0;\n\n        inputBuilder[i++] = \"npx\";\n        inputBuilder[i++] = string.concat(\n            \"@openzeppelin/defender-deploy-client-cli@\",\n            Versions.DEFENDER_DEPLOY_CLIENT_CLI\n        );\n        inputBuilder[i++] = \"deploy\";\n        inputBuilder[i++] = \"--contractName\";\n        inputBuilder[i++] = contractInfo.shortName;\n        inputBuilder[i++] = \"--contractPath\";\n        inputBuilder[i++] = contractInfo.contractPath;\n        inputBuilder[i++] = \"--chainId\";\n        inputBuilder[i++] = Strings.toString(block.chainid);\n        inputBuilder[i++] = \"--buildInfoFile\";\n        inputBuilder[i++] = buildInfoFile;\n        inputBuilder[i++] = \"--licenseType\";\n        inputBuilder[i++] = contractInfo.license;\n        if (constructorData.length > 0) {\n            inputBuilder[i++] = \"--constructorBytecode\";\n            inputBuilder[i++] = vm.toString(constructorData);\n        }\n        if (defenderOpts.skipVerifySourceCode) {\n            inputBuilder[i++] = \"--verifySourceCode\";\n            inputBuilder[i++] = \"false\";\n        }\n        if (!(defenderOpts.relayerId).toSlice().empty()) {\n            inputBuilder[i++] = \"--relayerId\";\n            inputBuilder[i++] = defenderOpts.relayerId;\n        }\n        if (defenderOpts.salt != 0) {\n            inputBuilder[i++] = \"--salt\";\n            inputBuilder[i++] = vm.toString(defenderOpts.salt);\n        }\n\n        // Create a copy of inputs but with the correct length\n        string[] memory inputs = new string[](i);\n        for (uint8 j = 0; j < i; j++) {\n            inputs[j] = inputBuilder[j];\n        }\n\n        return inputs;\n    }\n\n    function proposeUpgrade(\n        address proxyAddress,\n        address proxyAdminAddress,\n        address newImplementationAddress,\n        string memory newImplementationContractName,\n        Options memory opts\n    ) internal returns (ProposeUpgradeResponse memory) {\n        Vm vm = Vm(Utils.CHEATCODE_ADDRESS);\n\n        string memory outDir = Utils.getOutDir();\n        ContractInfo memory contractInfo = Utils.getContractInfo(newImplementationContractName, outDir);\n\n        string[] memory inputs = buildProposeUpgradeCommand(\n            proxyAddress,\n            proxyAdminAddress,\n            newImplementationAddress,\n            contractInfo,\n            opts\n        );\n\n        Vm.FfiResult memory result = Utils.runAsBashCommand(inputs);\n        string memory stdout = string(result.stdout);\n\n        if (result.exitCode != 0) {\n            revert(\n                string.concat(\n                    \"Failed to propose upgrade for proxy \",\n                    vm.toString(proxyAddress),\n                    \": \",\n                    string(result.stderr)\n                )\n            );\n        }\n\n        return parseProposeUpgradeResponse(stdout);\n    }\n\n    function parseProposeUpgradeResponse(string memory stdout) internal pure returns (ProposeUpgradeResponse memory) {\n        ProposeUpgradeResponse memory response;\n        response.proposalId = _parseLine(\"Proposal ID: \", stdout, true);\n        response.url = _parseLine(\"Proposal URL: \", stdout, false);\n        return response;\n    }\n\n    function _parseLine(\n        string memory expectedPrefix,\n        string memory stdout,\n        bool required\n    ) private pure returns (string memory) {\n        strings.slice memory delim = expectedPrefix.toSlice();\n        if (stdout.toSlice().contains(delim)) {\n            strings.slice memory slice = stdout.toSlice().copy().find(delim).beyond(delim);\n            // Remove any following lines\n            if (slice.contains(\"\\n\".toSlice())) {\n                slice = slice.split(\"\\n\".toSlice());\n            }\n            return slice.toString();\n        } else if (required) {\n            revert(string.concat(\"Failed to find line with prefix '\", expectedPrefix, \"' in output: \", stdout));\n        } else {\n            return \"\";\n        }\n    }\n\n    function buildProposeUpgradeCommand(\n        address proxyAddress,\n        address proxyAdminAddress,\n        address newImplementationAddress,\n        ContractInfo memory contractInfo,\n        Options memory opts\n    ) internal view returns (string[] memory) {\n        Vm vm = Vm(Utils.CHEATCODE_ADDRESS);\n\n        string[] memory inputBuilder = new string[](255);\n\n        uint8 i = 0;\n\n        inputBuilder[i++] = \"npx\";\n        inputBuilder[i++] = string.concat(\n            \"@openzeppelin/defender-deploy-client-cli@\",\n            Versions.DEFENDER_DEPLOY_CLIENT_CLI\n        );\n        inputBuilder[i++] = \"proposeUpgrade\";\n        inputBuilder[i++] = \"--proxyAddress\";\n        inputBuilder[i++] = vm.toString(proxyAddress);\n        inputBuilder[i++] = \"--newImplementationAddress\";\n        inputBuilder[i++] = vm.toString(newImplementationAddress);\n        inputBuilder[i++] = \"--chainId\";\n        inputBuilder[i++] = Strings.toString(block.chainid);\n        inputBuilder[i++] = \"--contractArtifactFile\";\n        inputBuilder[i++] = contractInfo.artifactPath;\n        if (proxyAdminAddress != address(0)) {\n            inputBuilder[i++] = \"--proxyAdminAddress\";\n            inputBuilder[i++] = vm.toString(proxyAdminAddress);\n        }\n        if (!(opts.defender.upgradeApprovalProcessId).toSlice().empty()) {\n            inputBuilder[i++] = \"--approvalProcessId\";\n            inputBuilder[i++] = opts.defender.upgradeApprovalProcessId;\n        }\n\n        // Create a copy of inputs but with the correct length\n        string[] memory inputs = new string[](i);\n        for (uint8 j = 0; j < i; j++) {\n            inputs[j] = inputBuilder[j];\n        }\n\n        return inputs;\n    }\n\n    function getApprovalProcess(string memory command) internal returns (ApprovalProcessResponse memory) {\n        string[] memory inputs = buildGetApprovalProcessCommand(command);\n\n        Vm.FfiResult memory result = Utils.runAsBashCommand(inputs);\n        string memory stdout = string(result.stdout);\n\n        if (result.exitCode != 0) {\n            revert(string.concat(\"Failed to get approval process: \", string(result.stderr)));\n        }\n\n        return parseApprovalProcessResponse(stdout);\n    }\n\n    function parseApprovalProcessResponse(string memory stdout) internal pure returns (ApprovalProcessResponse memory) {\n        Vm vm = Vm(Utils.CHEATCODE_ADDRESS);\n\n        ApprovalProcessResponse memory response;\n\n        response.approvalProcessId = _parseLine(\"Approval process ID: \", stdout, true);\n\n        string memory viaString = _parseLine(\"Via: \", stdout, false);\n        if (viaString.toSlice().len() != 0) {\n            response.via = vm.parseAddress(viaString);\n        }\n\n        response.viaType = _parseLine(\"Via type: \", stdout, false);\n\n        return response;\n    }\n\n    function buildGetApprovalProcessCommand(string memory command) internal view returns (string[] memory) {\n        string[] memory inputBuilder = new string[](255);\n\n        uint8 i = 0;\n\n        inputBuilder[i++] = \"npx\";\n        inputBuilder[i++] = string.concat(\n            \"@openzeppelin/defender-deploy-client-cli@\",\n            Versions.DEFENDER_DEPLOY_CLIENT_CLI\n        );\n        inputBuilder[i++] = command;\n        inputBuilder[i++] = \"--chainId\";\n        inputBuilder[i++] = Strings.toString(block.chainid);\n\n        // Create a copy of inputs but with the correct length\n        string[] memory inputs = new string[](i);\n        for (uint8 j = 0; j < i; j++) {\n            inputs[j] = inputBuilder[j];\n        }\n\n        return inputs;\n    }\n}\n"
      },
      "lib/openzeppelin-foundry-upgrades/src/internal/Utils.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport {Vm} from \"forge-std/Vm.sol\";\nimport {console} from \"forge-std/console.sol\";\nimport {strings} from \"solidity-stringutils/src/strings.sol\";\n\nstruct ContractInfo {\n    /**\n     * Contract path, e.g. \"src/MyContract.sol\"\n     */\n    string contractPath;\n    /**\n     * Contract short name, e.g. \"MyContract\"\n     */\n    string shortName;\n    /**\n     * License identifier from the compiled artifact\n     */\n    string license;\n    /**\n     * keccak256 hash of the source code from metadata\n     */\n    string sourceCodeHash;\n    /**\n     * Artifact file path e.g. the path of the file 'out/MyContract.sol/MyContract.json'\n     */\n    string artifactPath;\n}\n\n/**\n * @dev Internal helper methods used by Upgrades and Defender libraries.\n */\nlibrary Utils {\n    address constant CHEATCODE_ADDRESS = 0x7109709ECfa91a80626fF3989D68f67F5b1DD12D;\n\n    /**\n     * @dev Gets the fully qualified name of a contract.\n     *\n     * @param contractName Contract name in the format \"MyContract.sol\" or \"MyContract.sol:MyContract\" or artifact path relative to the project root directory\n     * @param outDir Foundry output directory to search in if contractName is not an artifact path\n     * @return Fully qualified name of the contract, e.g. \"src/MyContract.sol:MyContract\"\n     */\n    function getFullyQualifiedName(\n        string memory contractName,\n        string memory outDir\n    ) internal view returns (string memory) {\n        ContractInfo memory info = getContractInfo(contractName, outDir);\n        return string.concat(info.contractPath, \":\", info.shortName);\n    }\n\n    /**\n     * @dev Gets information about a contract from its Foundry artifact.\n     *\n     * @param contractName Contract name in the format \"MyContract.sol\" or \"MyContract.sol:MyContract\" or artifact path relative to the project root directory\n     * @param outDir Foundry output directory to search in if contractName is not an artifact path\n     * @return ContractInfo struct containing information about the contract\n     */\n    function getContractInfo(\n        string memory contractName,\n        string memory outDir\n    ) internal view returns (ContractInfo memory) {\n        Vm vm = Vm(CHEATCODE_ADDRESS);\n\n        ContractInfo memory info;\n\n        info.shortName = _toShortName(contractName);\n\n        string memory fileName = _toFileName(contractName);\n\n        string memory artifactPath = string.concat(\n            vm.projectRoot(),\n            \"/\",\n            outDir,\n            \"/\",\n            fileName,\n            \"/\",\n            info.shortName,\n            \".json\"\n        );\n        string memory artifactJson = vm.readFile(artifactPath);\n\n        if (!vm.keyExistsJson(artifactJson, \".ast\")) {\n            revert(\n                string.concat(\"Could not find AST in artifact \", artifactPath, \". Set `ast = true` in foundry.toml\")\n            );\n        }\n        info.contractPath = vm.parseJsonString(artifactJson, \".ast.absolutePath\");\n        info.license = vm.parseJsonString(artifactJson, \".ast.license\");\n        info.sourceCodeHash = vm.parseJsonString(\n            artifactJson,\n            string.concat(\".metadata.sources.['\", info.contractPath, \"'].keccak256\")\n        );\n        info.artifactPath = artifactPath;\n\n        return info;\n    }\n\n    using strings for *;\n\n    /**\n     * Gets the path to the build-info file that contains the given bytecode.\n     *\n     * @param sourceCodeHash keccak256 hash of the source code from metadata\n     * @param contractName Contract name to display in error message if build-info file is not found\n     * @param outDir Foundry output directory that contains a build-info directory\n     * @return The path to the build-info file that contains the given bytecode\n     */\n    function getBuildInfoFile(\n        string memory sourceCodeHash,\n        string memory contractName,\n        string memory outDir\n    ) internal returns (string memory) {\n        string[] memory inputs = new string[](4);\n        inputs[0] = \"grep\";\n        inputs[1] = \"-rl\";\n        inputs[2] = string.concat('\"', sourceCodeHash, '\"');\n        inputs[3] = string.concat(outDir, \"/build-info\");\n\n        Vm.FfiResult memory result = runAsBashCommand(inputs);\n        string memory stdout = string(result.stdout);\n\n        if (!stdout.toSlice().endsWith(\".json\".toSlice())) {\n            revert(\n                string.concat(\n                    \"Could not find build-info file with matching source code hash for contract \",\n                    contractName\n                )\n            );\n        }\n\n        return stdout;\n    }\n\n    /**\n     * @dev Gets the output directory from the FOUNDRY_OUT environment variable, or defaults to \"out\" if not set.\n     */\n    function getOutDir() internal view returns (string memory) {\n        Vm vm = Vm(CHEATCODE_ADDRESS);\n\n        string memory defaultOutDir = \"out\";\n        return vm.envOr(\"FOUNDRY_OUT\", defaultOutDir);\n    }\n\n    function _split(\n        strings.slice memory inputSlice,\n        strings.slice memory delimSlice\n    ) private pure returns (string[] memory) {\n        string[] memory parts = new string[](inputSlice.count(delimSlice) + 1);\n        for (uint i = 0; i < parts.length; i++) {\n            parts[i] = inputSlice.split(delimSlice).toString();\n        }\n        return parts;\n    }\n\n    function _toFileName(string memory contractName) private pure returns (string memory) {\n        strings.slice memory name = contractName.toSlice();\n        if (name.endsWith(\".sol\".toSlice())) {\n            return name.toString();\n        } else if (name.count(\":\".toSlice()) == 1) {\n            return name.split(\":\".toSlice()).toString();\n        } else {\n            if (name.endsWith(\".json\".toSlice())) {\n                string[] memory parts = _split(name, \"/\".toSlice());\n                if (parts.length > 1) {\n                    return parts[parts.length - 2];\n                }\n            }\n\n            revert(\n                string.concat(\n                    \"Contract name \",\n                    contractName,\n                    \" must be in the format MyContract.sol:MyContract or MyContract.sol or out/MyContract.sol/MyContract.json\"\n                )\n            );\n        }\n    }\n\n    function _toShortName(string memory contractName) private pure returns (string memory) {\n        strings.slice memory name = contractName.toSlice();\n        if (name.endsWith(\".sol\".toSlice())) {\n            return name.until(\".sol\".toSlice()).toString();\n        } else if (name.count(\":\".toSlice()) == 1) {\n            name.split(\":\".toSlice());\n            return name.split(\":\".toSlice()).toString();\n        } else if (name.endsWith(\".json\".toSlice())) {\n            string[] memory parts = _split(name, \"/\".toSlice());\n            string memory jsonName = parts[parts.length - 1];\n            return jsonName.toSlice().until(\".json\".toSlice()).toString();\n        } else {\n            revert(\n                string.concat(\n                    \"Contract name \",\n                    contractName,\n                    \" must be in the format MyContract.sol:MyContract or MyContract.sol or out/MyContract.sol/MyContract.json\"\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Converts an array of inputs to a bash command.\n     * @param inputs Inputs for a command, e.g. [\"grep\", \"-rl\", \"0x1234\", \"out/build-info\"]\n     * @param bashPath Path to the bash executable or just \"bash\" if it is in the PATH\n     * @return A bash command that runs the given inputs, e.g. [\"bash\", \"-c\", \"grep -rl 0x1234 out/build-info\"]\n     */\n    function toBashCommand(string[] memory inputs, string memory bashPath) internal pure returns (string[] memory) {\n        string memory commandString;\n        for (uint i = 0; i < inputs.length; i++) {\n            commandString = string.concat(commandString, inputs[i]);\n            if (i != inputs.length - 1) {\n                commandString = string.concat(commandString, \" \");\n            }\n        }\n\n        string[] memory result = new string[](3);\n        result[0] = bashPath;\n        result[1] = \"-c\";\n        result[2] = commandString;\n        return result;\n    }\n\n    /**\n     * @dev Runs an arbitrary command using bash.\n     * @param inputs Inputs for a command, e.g. [\"grep\", \"-rl\", \"0x1234\", \"out/build-info\"]\n     * @return The result of the corresponding bash command as a Vm.FfiResult struct\n     */\n    function runAsBashCommand(string[] memory inputs) internal returns (Vm.FfiResult memory) {\n        Vm vm = Vm(CHEATCODE_ADDRESS);\n        string memory defaultBashPath = \"bash\";\n        string memory bashPath = vm.envOr(\"OPENZEPPELIN_BASH_PATH\", defaultBashPath);\n\n        string[] memory bashCommand = toBashCommand(inputs, bashPath);\n        Vm.FfiResult memory result = vm.tryFfi(bashCommand);\n        if (result.exitCode != 0 && result.stdout.length == 0 && result.stderr.length == 0) {\n            // On Windows, using the bash executable from WSL leads to a non-zero exit code and no output\n            revert(\n                string.concat(\n                    'Failed to run bash command with \"',\n                    bashCommand[0],\n                    '\". If you are using Windows, set the OPENZEPPELIN_BASH_PATH environment variable to the fully qualified path of the bash executable. For example, if you are using Git for Windows, add the following line in the .env file of your project (using forward slashes):\\nOPENZEPPELIN_BASH_PATH=\"C:/Program Files/Git/bin/bash\"'\n                )\n            );\n        } else {\n            return result;\n        }\n    }\n}\n"
      },
      "lib/openzeppelin-foundry-upgrades/src/internal/Versions.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nlibrary Versions {\n    // TODO add a workflow to update this automatically based on package.json\n    string constant UPGRADES_CORE = \"^1.32.3\";\n    string constant DEFENDER_DEPLOY_CLIENT_CLI = \"0.0.1-alpha.5\";\n}\n"
      },
      "script/00_ZFI.s.sol": {
        "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.13;\n\nimport {Script, console2} from \"forge-std/Script.sol\";\nimport {Upgrades} from \"openzeppelin-foundry-upgrades/Upgrades.sol\";\nimport {ERC1967Proxy} from \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\";\nimport {ZFIToken} from \"../src/ZFI/ZFIToken.sol\";\n\ncontract ZfiScript is Script {\n    address GOV_ADDRESS;\n    address PROXY;\n    uint256 deployerPrivateKey;\n\n    function setUp() public {\n        GOV_ADDRESS = vm.envAddress(\"GOV_ADDRESS\");\n        deployerPrivateKey = vm.envUint(\"PRIVATE_KEY\");\n    }\n\n    function run() public {\n        \n        vm.startBroadcast(deployerPrivateKey);\n\n        PROXY = Upgrades.deployUUPSProxy(\"ZFIToken.sol\", abi.encodeCall(ZFIToken.initialize2, (GOV_ADDRESS)));\n\n        // address ZFITokenImplementation = address(new ZFIToken());\n        // PROXY = address(new ERC1967Proxy(ZFITokenImplementation, abi.encodeCall(ZFIToken.initialize2, (GOV_ADDRESS))));\n\n        console2.log(\"Token address is: \");\n        console2.log(PROXY);\n\n        vm.stopBroadcast();\n    }\n\n    // function run_old() public {\n        \n    //     vm.startBroadcast(deployerPrivateKey);\n\n    //     //TODO: fix the deployement via openzeppelin Upgrades\n    //     // address proxy = Upgrades.deployUUPSProxy(\n    //     // \"ZFIToken.sol\",\n    //     // abi.encodeCall(ZFIToken.initialize2, (TEAM_ADDRESS)));\n\n    //     // In the meantime, unsafe deployment:\n    //     address ZFITokenImplementation = address(new ZFIToken());\n    //     PROXY = address(new ERC1967Proxy(ZFITokenImplementation, abi.encodeCall(ZFIToken.initialize2, (GOV_ADDRESS))));\n\n    //     //export ZFY_TOKEN_IMPLEMENTATION = ZFITokenImplementation;\n    //     console2.log(\"Token address is: \");\n    //     console2.log(PROXY);\n\n    //     vm.stopBroadcast();\n    // }\n}\n"
      },
      "src/ZFI/ZFIToken.sol": {
        "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\nimport \"../tokens/ERC20MinterPauserPermitUpgradeable.sol\";\n\n/**\n * @notice ZYFIToken token contract\n */\ncontract ZFIToken is ERC20MinterPauserPermitUpgradeable {\n    /**\n     * @notice Intializer\n     * @param _ONDEFYDAO the address of the owner\n     */\n    function initialize2(address _ONDEFYDAO) public initializer {\n        super.initialize(\"Zyfi Token\", \"ZFI\");\n        _grantRole(DEFAULT_ADMIN_ROLE, _ONDEFYDAO);\n    }\n\n    \n}"
      },
      "src/tokens/ERC20MinterPauserPermitUpgradeable.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\";\n\ncontract ERC20MinterPauserPermitUpgradeable is\n    Initializable,\n    ERC20Upgradeable,\n    ERC20BurnableUpgradeable,\n    PausableUpgradeable,\n    AccessControlUpgradeable,\n    ERC20PermitUpgradeable,\n    UUPSUpgradeable\n{\n    event PrivateTransferModeSet(bool value);\n\n    bytes32 public constant PAUSER_ROLE = keccak256(\"PAUSER_ROLE\");\n    bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n    bytes32 public constant TRANSFERRER_ROLE = keccak256(\"TRANSFERRER_ROLE\");\n\n    bool private _inPrivateTransferMode;\n\n    function initialize(\n        string memory name,\n        string memory symbol\n    ) public initializer {\n        __ERC20_init(name, symbol);\n        __ERC20Burnable_init();\n        __Pausable_init();\n        __AccessControl_init();\n        __ERC20Permit_init(name);\n        __UUPSUpgradeable_init();\n\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\n        _grantRole(PAUSER_ROLE, msg.sender);\n        _grantRole(MINTER_ROLE, msg.sender);\n    }\n\n    function _authorizeUpgrade(address newImplementation) internal override onlyRole(DEFAULT_ADMIN_ROLE) {}\n\n    /**\n     * @dev Returns whether the token is in private transfer mode\n     */\n    function inPrivateTransferMode() public view virtual returns (bool) {\n        return _inPrivateTransferMode;\n    }\n\n    /**\n     * @dev Sets the values for {inPrivateTransferMode}.\n     */\n    function setInPrivateTransferMode(\n        bool inPrivateTransferMode_\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\n        _inPrivateTransferMode = inPrivateTransferMode_;\n        emit PrivateTransferModeSet(inPrivateTransferMode_);\n    }\n\n    /**\n     * @dev overrides transfer method to restrict use to accounts with TRANSFERRER_ROLE while in private transfer mode\n     */\n    function transfer(\n        address to,\n        uint256 amount\n    ) public virtual override whenNotPaused returns (bool) {\n        if (_inPrivateTransferMode) {\n            require(\n                hasRole(TRANSFERRER_ROLE, _msgSender()),\n                \"AccessControl: account is missing transferrer role to transfer in private transfer mode\"\n            );\n        }\n        return super.transfer(to, amount);\n    }\n\n    /**\n     * @dev overrides transferFrom to allow addresses with TRANSFERRER_ROLE to bypass allowance check\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override whenNotPaused returns (bool) {\n        if (hasRole(TRANSFERRER_ROLE, _msgSender())) {\n            _transfer(from, to, amount);\n            return true;\n        } else if (_inPrivateTransferMode) {\n            revert(\n                \"AccessControl: account is missing transferrer role to transfer in private transfer mode\"\n            );\n        }\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev overrides burnFrom to remove allowance check and to only be callable by accounts with MINTER_ROLE\n     */\n    function burnFrom(\n        address account,\n        uint256 amount\n    ) public virtual override onlyRole(MINTER_ROLE) {\n        _burn(account, amount);\n    }\n\n    function pause() public onlyRole(PAUSER_ROLE) {\n        _pause();\n    }\n\n    function unpause() public onlyRole(PAUSER_ROLE) {\n        _unpause();\n    }\n\n    function mint(address to, uint256 amount) public onlyRole(MINTER_ROLE) {\n        _mint(to, amount);\n    }\n}\n"
      }
    },
    "settings": {
      "remappings": [
        "@openzeppelin/contracts/=lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/",
        "@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/",
        "ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/",
        "erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/",
        "forge-std/=lib/forge-std/src/",
        "openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/",
        "openzeppelin-contracts/=lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/",
        "openzeppelin-foundry-upgrades/=lib/openzeppelin-foundry-upgrades/src/",
        "solidity-stringutils/=lib/openzeppelin-foundry-upgrades/lib/solidity-stringutils/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "useLiteralContent": false,
        "bytecodeHash": "ipfs",
        "appendCBOR": true
      },
      "outputSelection": {
        "lib/forge-std/src/Base.sol": {
          "*": []
        },
        "lib/forge-std/src/Script.sol": {
          "*": []
        },
        "lib/forge-std/src/StdChains.sol": {
          "*": []
        },
        "lib/forge-std/src/StdCheats.sol": {
          "*": []
        },
        "lib/forge-std/src/StdJson.sol": {
          "*": []
        },
        "lib/forge-std/src/StdMath.sol": {
          "*": []
        },
        "lib/forge-std/src/StdStorage.sol": {
          "*": []
        },
        "lib/forge-std/src/StdStyle.sol": {
          "*": []
        },
        "lib/forge-std/src/StdUtils.sol": {
          "*": []
        },
        "lib/forge-std/src/Vm.sol": {
          "*": []
        },
        "lib/forge-std/src/console.sol": {
          "*": []
        },
        "lib/forge-std/src/console2.sol": {
          "*": []
        },
        "lib/forge-std/src/interfaces/IERC165.sol": {
          "*": []
        },
        "lib/forge-std/src/interfaces/IERC20.sol": {
          "*": []
        },
        "lib/forge-std/src/interfaces/IERC721.sol": {
          "*": []
        },
        "lib/forge-std/src/interfaces/IMulticall3.sol": {
          "*": []
        },
        "lib/forge-std/src/mocks/MockERC20.sol": {
          "*": []
        },
        "lib/forge-std/src/mocks/MockERC721.sol": {
          "*": []
        },
        "lib/forge-std/src/safeconsole.sol": {
          "*": []
        },
        "lib/openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol": {
          "*": []
        },
        "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol": {
          "*": []
        },
        "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol": {
          "*": []
        },
        "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol": {
          "*": []
        },
        "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/ERC20BurnableUpgradeable.sol": {
          "*": []
        },
        "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/ERC20PermitUpgradeable.sol": {
          "*": []
        },
        "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol": {
          "*": []
        },
        "lib/openzeppelin-contracts-upgradeable/contracts/utils/NoncesUpgradeable.sol": {
          "*": []
        },
        "lib/openzeppelin-contracts-upgradeable/contracts/utils/PausableUpgradeable.sol": {
          "*": []
        },
        "lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/EIP712Upgradeable.sol": {
          "*": []
        },
        "lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/ERC165Upgradeable.sol": {
          "*": []
        },
        "lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/access/IAccessControl.sol": {
          "*": []
        },
        "lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/access/Ownable.sol": {
          "*": []
        },
        "lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/interfaces/IERC1967.sol": {
          "*": []
        },
        "lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/interfaces/IERC5267.sol": {
          "*": []
        },
        "lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/interfaces/draft-IERC1822.sol": {
          "*": []
        },
        "lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/interfaces/draft-IERC6093.sol": {
          "*": []
        },
        "lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Proxy.sol": {
          "*": []
        },
        "lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Utils.sol": {
          "*": []
        },
        "lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/proxy/Proxy.sol": {
          "*": []
        },
        "lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/proxy/beacon/BeaconProxy.sol": {
          "*": []
        },
        "lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol": {
          "*": []
        },
        "lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/proxy/beacon/UpgradeableBeacon.sol": {
          "*": []
        },
        "lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/proxy/transparent/ProxyAdmin.sol": {
          "*": []
        },
        "lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/proxy/transparent/TransparentUpgradeableProxy.sol": {
          "*": []
        },
        "lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol": {
          "*": []
        },
        "lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
          "*": []
        },
        "lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol": {
          "*": []
        },
        "lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/Address.sol": {
          "*": []
        },
        "lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/Context.sol": {
          "*": []
        },
        "lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol": {
          "*": []
        },
        "lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/Strings.sol": {
          "*": []
        },
        "lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol": {
          "*": []
        },
        "lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/MessageHashUtils.sol": {
          "*": []
        },
        "lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol": {
          "*": []
        },
        "lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/math/Math.sol": {
          "*": []
        },
        "lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol": {
          "*": []
        },
        "lib/openzeppelin-foundry-upgrades/lib/solidity-stringutils/src/strings.sol": {
          "*": []
        },
        "lib/openzeppelin-foundry-upgrades/src/Defender.sol": {
          "*": []
        },
        "lib/openzeppelin-foundry-upgrades/src/Options.sol": {
          "*": []
        },
        "lib/openzeppelin-foundry-upgrades/src/Upgrades.sol": {
          "*": []
        },
        "lib/openzeppelin-foundry-upgrades/src/internal/DefenderDeploy.sol": {
          "*": []
        },
        "lib/openzeppelin-foundry-upgrades/src/internal/Utils.sol": {
          "*": []
        },
        "lib/openzeppelin-foundry-upgrades/src/internal/Versions.sol": {
          "*": []
        },
        "script/00_ZFI.s.sol": {
          "": [
            "ast"
          ],
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata",
            "storageLayout"
          ]
        },
        "src/ZFI/ZFIToken.sol": {
          "*": []
        },
        "src/tokens/ERC20MinterPauserPermitUpgradeable.sol": {
          "*": []
        }
      },
      "evmVersion": "paris",
      "viaIR": false,
      "libraries": {}
    }
  },
  "id": "29c7df4ebd1dc4f721fd09de11d67240",
  "output": {
    "errors": [
      {
        "sourceLocation": {
          "file": "lib/openzeppelin-foundry-upgrades/lib/solidity-stringutils/src/strings.sol",
          "start": -1,
          "end": -1
        },
        "type": "Warning",
        "component": "general",
        "severity": "warning",
        "errorCode": "1878",
        "message": "SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.",
        "formattedMessage": "Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n--> lib/openzeppelin-foundry-upgrades/lib/solidity-stringutils/src/strings.sol\n\n"
      }
    ],
    "sources": {
      "lib/forge-std/src/Base.sol": {
        "id": 0,
        "ast": {}
      },
      "lib/forge-std/src/Script.sol": {
        "id": 1,
        "ast": {}
      },
      "lib/forge-std/src/StdChains.sol": {
        "id": 2,
        "ast": {}
      },
      "lib/forge-std/src/StdCheats.sol": {
        "id": 3,
        "ast": {}
      },
      "lib/forge-std/src/StdJson.sol": {
        "id": 4,
        "ast": {}
      },
      "lib/forge-std/src/StdMath.sol": {
        "id": 5,
        "ast": {}
      },
      "lib/forge-std/src/StdStorage.sol": {
        "id": 6,
        "ast": {}
      },
      "lib/forge-std/src/StdStyle.sol": {
        "id": 7,
        "ast": {}
      },
      "lib/forge-std/src/StdUtils.sol": {
        "id": 8,
        "ast": {}
      },
      "lib/forge-std/src/Vm.sol": {
        "id": 9,
        "ast": {}
      },
      "lib/forge-std/src/console.sol": {
        "id": 10,
        "ast": {}
      },
      "lib/forge-std/src/console2.sol": {
        "id": 11,
        "ast": {}
      },
      "lib/forge-std/src/interfaces/IERC165.sol": {
        "id": 12,
        "ast": {}
      },
      "lib/forge-std/src/interfaces/IERC20.sol": {
        "id": 13,
        "ast": {}
      },
      "lib/forge-std/src/interfaces/IERC721.sol": {
        "id": 14,
        "ast": {}
      },
      "lib/forge-std/src/interfaces/IMulticall3.sol": {
        "id": 15,
        "ast": {}
      },
      "lib/forge-std/src/mocks/MockERC20.sol": {
        "id": 16,
        "ast": {}
      },
      "lib/forge-std/src/mocks/MockERC721.sol": {
        "id": 17,
        "ast": {}
      },
      "lib/forge-std/src/safeconsole.sol": {
        "id": 18,
        "ast": {}
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol": {
        "id": 19,
        "ast": {}
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol": {
        "id": 20,
        "ast": {}
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol": {
        "id": 21,
        "ast": {}
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol": {
        "id": 22,
        "ast": {}
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/ERC20BurnableUpgradeable.sol": {
        "id": 23,
        "ast": {}
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/ERC20PermitUpgradeable.sol": {
        "id": 24,
        "ast": {}
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol": {
        "id": 25,
        "ast": {}
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/NoncesUpgradeable.sol": {
        "id": 26,
        "ast": {}
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/PausableUpgradeable.sol": {
        "id": 27,
        "ast": {}
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/EIP712Upgradeable.sol": {
        "id": 28,
        "ast": {}
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/ERC165Upgradeable.sol": {
        "id": 29,
        "ast": {}
      },
      "lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/access/IAccessControl.sol": {
        "id": 30,
        "ast": {}
      },
      "lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/access/Ownable.sol": {
        "id": 31,
        "ast": {}
      },
      "lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/interfaces/IERC1967.sol": {
        "id": 32,
        "ast": {}
      },
      "lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/interfaces/IERC5267.sol": {
        "id": 33,
        "ast": {}
      },
      "lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/interfaces/draft-IERC1822.sol": {
        "id": 34,
        "ast": {}
      },
      "lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/interfaces/draft-IERC6093.sol": {
        "id": 35,
        "ast": {}
      },
      "lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Proxy.sol": {
        "id": 36,
        "ast": {}
      },
      "lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Utils.sol": {
        "id": 37,
        "ast": {}
      },
      "lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/proxy/Proxy.sol": {
        "id": 38,
        "ast": {}
      },
      "lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/proxy/beacon/BeaconProxy.sol": {
        "id": 39,
        "ast": {}
      },
      "lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol": {
        "id": 40,
        "ast": {}
      },
      "lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/proxy/beacon/UpgradeableBeacon.sol": {
        "id": 41,
        "ast": {}
      },
      "lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/proxy/transparent/ProxyAdmin.sol": {
        "id": 42,
        "ast": {}
      },
      "lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/proxy/transparent/TransparentUpgradeableProxy.sol": {
        "id": 43,
        "ast": {}
      },
      "lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol": {
        "id": 44,
        "ast": {}
      },
      "lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
        "id": 45,
        "ast": {}
      },
      "lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol": {
        "id": 46,
        "ast": {}
      },
      "lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/Address.sol": {
        "id": 47,
        "ast": {}
      },
      "lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/Context.sol": {
        "id": 48,
        "ast": {}
      },
      "lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol": {
        "id": 49,
        "ast": {}
      },
      "lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/Strings.sol": {
        "id": 50,
        "ast": {}
      },
      "lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol": {
        "id": 51,
        "ast": {}
      },
      "lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/MessageHashUtils.sol": {
        "id": 52,
        "ast": {}
      },
      "lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol": {
        "id": 53,
        "ast": {}
      },
      "lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/math/Math.sol": {
        "id": 54,
        "ast": {}
      },
      "lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol": {
        "id": 55,
        "ast": {}
      },
      "lib/openzeppelin-foundry-upgrades/lib/solidity-stringutils/src/strings.sol": {
        "id": 56,
        "ast": {}
      },
      "lib/openzeppelin-foundry-upgrades/src/Defender.sol": {
        "id": 57,
        "ast": {}
      },
      "lib/openzeppelin-foundry-upgrades/src/Options.sol": {
        "id": 58,
        "ast": {}
      },
      "lib/openzeppelin-foundry-upgrades/src/Upgrades.sol": {
        "id": 59,
        "ast": {}
      },
      "lib/openzeppelin-foundry-upgrades/src/internal/DefenderDeploy.sol": {
        "id": 60,
        "ast": {}
      },
      "lib/openzeppelin-foundry-upgrades/src/internal/Utils.sol": {
        "id": 61,
        "ast": {}
      },
      "lib/openzeppelin-foundry-upgrades/src/internal/Versions.sol": {
        "id": 62,
        "ast": {}
      },
      "script/00_ZFI.s.sol": {
        "id": 63,
        "ast": {
          "absolutePath": "script/00_ZFI.s.sol",
          "id": 53995,
          "exportedSymbols": {
            "ERC1967Proxy": [
              45862
            ],
            "Script": [
              113
            ],
            "Upgrades": [
              52101
            ],
            "ZFIToken": [
              54022
            ],
            "ZfiScript": [
              53994
            ],
            "console2": [
              28311
            ]
          },
          "nodeType": "SourceUnit",
          "src": "39:1790:63",
          "nodes": [
            {
              "id": 53917,
              "nodeType": "PragmaDirective",
              "src": "39:24:63",
              "nodes": [],
              "literals": [
                "solidity",
                "^",
                "0.8",
                ".13"
              ]
            },
            {
              "id": 53920,
              "nodeType": "ImportDirective",
              "src": "65:54:63",
              "nodes": [],
              "absolutePath": "lib/forge-std/src/Script.sol",
              "file": "forge-std/Script.sol",
              "nameLocation": "-1:-1:-1",
              "scope": 53995,
              "sourceUnit": 114,
              "symbolAliases": [
                {
                  "foreign": {
                    "id": 53918,
                    "name": "Script",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 113,
                    "src": "73:6:63",
                    "typeDescriptions": {}
                  },
                  "nameLocation": "-1:-1:-1"
                },
                {
                  "foreign": {
                    "id": 53919,
                    "name": "console2",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 28311,
                    "src": "81:8:63",
                    "typeDescriptions": {}
                  },
                  "nameLocation": "-1:-1:-1"
                }
              ],
              "unitAlias": ""
            },
            {
              "id": 53922,
              "nodeType": "ImportDirective",
              "src": "120:68:63",
              "nodes": [],
              "absolutePath": "lib/openzeppelin-foundry-upgrades/src/Upgrades.sol",
              "file": "openzeppelin-foundry-upgrades/Upgrades.sol",
              "nameLocation": "-1:-1:-1",
              "scope": 53995,
              "sourceUnit": 52102,
              "symbolAliases": [
                {
                  "foreign": {
                    "id": 53921,
                    "name": "Upgrades",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 52101,
                    "src": "128:8:63",
                    "typeDescriptions": {}
                  },
                  "nameLocation": "-1:-1:-1"
                }
              ],
              "unitAlias": ""
            },
            {
              "id": 53924,
              "nodeType": "ImportDirective",
              "src": "189:84:63",
              "nodes": [],
              "absolutePath": "lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Proxy.sol",
              "file": "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol",
              "nameLocation": "-1:-1:-1",
              "scope": 53995,
              "sourceUnit": 45863,
              "symbolAliases": [
                {
                  "foreign": {
                    "id": 53923,
                    "name": "ERC1967Proxy",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 45862,
                    "src": "197:12:63",
                    "typeDescriptions": {}
                  },
                  "nameLocation": "-1:-1:-1"
                }
              ],
              "unitAlias": ""
            },
            {
              "id": 53926,
              "nodeType": "ImportDirective",
              "src": "274:49:63",
              "nodes": [],
              "absolutePath": "src/ZFI/ZFIToken.sol",
              "file": "../src/ZFI/ZFIToken.sol",
              "nameLocation": "-1:-1:-1",
              "scope": 53995,
              "sourceUnit": 54023,
              "symbolAliases": [
                {
                  "foreign": {
                    "id": 53925,
                    "name": "ZFIToken",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 54022,
                    "src": "282:8:63",
                    "typeDescriptions": {}
                  },
                  "nameLocation": "-1:-1:-1"
                }
              ],
              "unitAlias": ""
            },
            {
              "id": 53994,
              "nodeType": "ContractDefinition",
              "src": "325:1503:63",
              "nodes": [
                {
                  "id": 53930,
                  "nodeType": "VariableDeclaration",
                  "src": "360:19:63",
                  "nodes": [],
                  "constant": false,
                  "mutability": "mutable",
                  "name": "GOV_ADDRESS",
                  "nameLocation": "368:11:63",
                  "scope": 53994,
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 53929,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "360:7:63",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "id": 53932,
                  "nodeType": "VariableDeclaration",
                  "src": "385:13:63",
                  "nodes": [],
                  "constant": false,
                  "mutability": "mutable",
                  "name": "PROXY",
                  "nameLocation": "393:5:63",
                  "scope": 53994,
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 53931,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "385:7:63",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "id": 53934,
                  "nodeType": "VariableDeclaration",
                  "src": "404:26:63",
                  "nodes": [],
                  "constant": false,
                  "mutability": "mutable",
                  "name": "deployerPrivateKey",
                  "nameLocation": "412:18:63",
                  "scope": 53994,
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 53933,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "404:7:63",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "id": 53952,
                  "nodeType": "FunctionDefinition",
                  "src": "437:139:63",
                  "nodes": [],
                  "body": {
                    "id": 53951,
                    "nodeType": "Block",
                    "src": "461:115:63",
                    "nodes": [],
                    "statements": [
                      {
                        "expression": {
                          "id": 53942,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 53937,
                            "name": "GOV_ADDRESS",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 53930,
                            "src": "471:11:63",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "arguments": [
                              {
                                "hexValue": "474f565f41444452455353",
                                "id": 53940,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "string",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "499:13:63",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_stringliteral_47f5c9ccb1f88a7d09e89263cb3ed348d4673e8f555074bf0b0996dc8143e7bc",
                                  "typeString": "literal_string \"GOV_ADDRESS\""
                                },
                                "value": "GOV_ADDRESS"
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_stringliteral_47f5c9ccb1f88a7d09e89263cb3ed348d4673e8f555074bf0b0996dc8143e7bc",
                                  "typeString": "literal_string \"GOV_ADDRESS\""
                                }
                              ],
                              "expression": {
                                "id": 53938,
                                "name": "vm",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 58,
                                "src": "485:2:63",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_contract$_Vm_$12122",
                                  "typeString": "contract Vm"
                                }
                              },
                              "id": 53939,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "488:10:63",
                              "memberName": "envAddress",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 8642,
                              "src": "485:13:63",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_external_view$_t_string_memory_ptr_$returns$_t_address_$",
                                "typeString": "function (string memory) view external returns (address)"
                              }
                            },
                            "id": 53941,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "485:28:63",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "471:42:63",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "id": 53943,
                        "nodeType": "ExpressionStatement",
                        "src": "471:42:63"
                      },
                      {
                        "expression": {
                          "id": 53949,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 53944,
                            "name": "deployerPrivateKey",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 53934,
                            "src": "523:18:63",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "arguments": [
                              {
                                "hexValue": "505249564154455f4b4559",
                                "id": 53947,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "string",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "555:13:63",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_stringliteral_2ef6555c4d06f7a53d2dd092327f3256a8d6f18aff592d5349c12226686be6c5",
                                  "typeString": "literal_string \"PRIVATE_KEY\""
                                },
                                "value": "PRIVATE_KEY"
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_stringliteral_2ef6555c4d06f7a53d2dd092327f3256a8d6f18aff592d5349c12226686be6c5",
                                  "typeString": "literal_string \"PRIVATE_KEY\""
                                }
                              ],
                              "expression": {
                                "id": 53945,
                                "name": "vm",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 58,
                                "src": "544:2:63",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_contract$_Vm_$12122",
                                  "typeString": "contract Vm"
                                }
                              },
                              "id": 53946,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "547:7:63",
                              "memberName": "envUint",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 8924,
                              "src": "544:10:63",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_external_view$_t_string_memory_ptr_$returns$_t_uint256_$",
                                "typeString": "function (string memory) view external returns (uint256)"
                              }
                            },
                            "id": 53948,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "544:25:63",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "523:46:63",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 53950,
                        "nodeType": "ExpressionStatement",
                        "src": "523:46:63"
                      }
                    ]
                  },
                  "functionSelector": "0a9254e4",
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "setUp",
                  "nameLocation": "446:5:63",
                  "parameters": {
                    "id": 53935,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "451:2:63"
                  },
                  "returnParameters": {
                    "id": 53936,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "461:0:63"
                  },
                  "scope": 53994,
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "id": 53993,
                  "nodeType": "FunctionDefinition",
                  "src": "582:493:63",
                  "nodes": [],
                  "body": {
                    "id": 53992,
                    "nodeType": "Block",
                    "src": "604:471:63",
                    "nodes": [],
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 53958,
                              "name": "deployerPrivateKey",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 53934,
                              "src": "641:18:63",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "id": 53955,
                              "name": "vm",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 58,
                              "src": "623:2:63",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_Vm_$12122",
                                "typeString": "contract Vm"
                              }
                            },
                            "id": 53957,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "626:14:63",
                            "memberName": "startBroadcast",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 9767,
                            "src": "623:17:63",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_nonpayable$_t_uint256_$returns$__$",
                              "typeString": "function (uint256) external"
                            }
                          },
                          "id": 53959,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "623:37:63",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 53960,
                        "nodeType": "ExpressionStatement",
                        "src": "623:37:63"
                      },
                      {
                        "expression": {
                          "id": 53973,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 53961,
                            "name": "PROXY",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 53932,
                            "src": "671:5:63",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "arguments": [
                              {
                                "hexValue": "5a4649546f6b656e2e736f6c",
                                "id": 53964,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "string",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "704:14:63",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_stringliteral_76ab2ab89e63beca90a3ec4374483407646781788b9681738bf037fd61abc8c4",
                                  "typeString": "literal_string \"ZFIToken.sol\""
                                },
                                "value": "ZFIToken.sol"
                              },
                              {
                                "arguments": [
                                  {
                                    "expression": {
                                      "id": 53967,
                                      "name": "ZFIToken",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 54022,
                                      "src": "735:8:63",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_type$_t_contract$_ZFIToken_$54022_$",
                                        "typeString": "type(contract ZFIToken)"
                                      }
                                    },
                                    "id": 53968,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "lValueRequested": false,
                                    "memberLocation": "744:11:63",
                                    "memberName": "initialize2",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 54021,
                                    "src": "735:20:63",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_declaration_nonpayable$_t_address_$returns$__$",
                                      "typeString": "function ZFIToken.initialize2(address)"
                                    }
                                  },
                                  {
                                    "components": [
                                      {
                                        "id": 53969,
                                        "name": "GOV_ADDRESS",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 53930,
                                        "src": "758:11:63",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_address",
                                          "typeString": "address"
                                        }
                                      }
                                    ],
                                    "id": 53970,
                                    "isConstant": false,
                                    "isInlineArray": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "TupleExpression",
                                    "src": "757:13:63",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_function_declaration_nonpayable$_t_address_$returns$__$",
                                      "typeString": "function ZFIToken.initialize2(address)"
                                    },
                                    {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  ],
                                  "expression": {
                                    "id": 53965,
                                    "name": "abi",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": -1,
                                    "src": "720:3:63",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_magic_abi",
                                      "typeString": "abi"
                                    }
                                  },
                                  "id": 53966,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "memberLocation": "724:10:63",
                                  "memberName": "encodeCall",
                                  "nodeType": "MemberAccess",
                                  "src": "720:14:63",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_abiencodecall_pure$__$returns$_t_bytes_memory_ptr_$",
                                    "typeString": "function () pure returns (bytes memory)"
                                  }
                                },
                                "id": 53971,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "720:51:63",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes_memory_ptr",
                                  "typeString": "bytes memory"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_stringliteral_76ab2ab89e63beca90a3ec4374483407646781788b9681738bf037fd61abc8c4",
                                  "typeString": "literal_string \"ZFIToken.sol\""
                                },
                                {
                                  "typeIdentifier": "t_bytes_memory_ptr",
                                  "typeString": "bytes memory"
                                }
                              ],
                              "expression": {
                                "id": 53962,
                                "name": "Upgrades",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 52101,
                                "src": "679:8:63",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_contract$_Upgrades_$52101_$",
                                  "typeString": "type(library Upgrades)"
                                }
                              },
                              "id": 53963,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "688:15:63",
                              "memberName": "deployUUPSProxy",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 51048,
                              "src": "679:24:63",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_nonpayable$_t_string_memory_ptr_$_t_bytes_memory_ptr_$returns$_t_address_$",
                                "typeString": "function (string memory,bytes memory) returns (address)"
                              }
                            },
                            "id": 53972,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "679:93:63",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "671:101:63",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "id": 53974,
                        "nodeType": "ExpressionStatement",
                        "src": "671:101:63"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "hexValue": "546f6b656e20616464726573732069733a20",
                              "id": 53978,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "989:20:63",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_6fc8cea671a7ca9f633c8ecaa34151d72c24ddb58d564713887554206757a4f5",
                                "typeString": "literal_string \"Token address is: \""
                              },
                              "value": "Token address is: "
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_stringliteral_6fc8cea671a7ca9f633c8ecaa34151d72c24ddb58d564713887554206757a4f5",
                                "typeString": "literal_string \"Token address is: \""
                              }
                            ],
                            "expression": {
                              "id": 53975,
                              "name": "console2",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 28311,
                              "src": "976:8:63",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_contract$_console2_$28311_$",
                                "typeString": "type(library console2)"
                              }
                            },
                            "id": 53977,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "985:3:63",
                            "memberName": "log",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 20825,
                            "src": "976:12:63",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (string memory) pure"
                            }
                          },
                          "id": 53979,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "976:34:63",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 53980,
                        "nodeType": "ExpressionStatement",
                        "src": "976:34:63"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 53984,
                              "name": "PROXY",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 53932,
                              "src": "1033:5:63",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "expression": {
                              "id": 53981,
                              "name": "console2",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 28311,
                              "src": "1020:8:63",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_contract$_console2_$28311_$",
                                "typeString": "type(library console2)"
                              }
                            },
                            "id": 53983,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "1029:3:63",
                            "memberName": "log",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 20853,
                            "src": "1020:12:63",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_address_$returns$__$",
                              "typeString": "function (address) pure"
                            }
                          },
                          "id": 53985,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1020:19:63",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 53986,
                        "nodeType": "ExpressionStatement",
                        "src": "1020:19:63"
                      },
                      {
                        "expression": {
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "expression": {
                              "id": 53987,
                              "name": "vm",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 58,
                              "src": "1050:2:63",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_Vm_$12122",
                                "typeString": "contract Vm"
                              }
                            },
                            "id": 53989,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "1053:13:63",
                            "memberName": "stopBroadcast",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 9771,
                            "src": "1050:16:63",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_nonpayable$__$returns$__$",
                              "typeString": "function () external"
                            }
                          },
                          "id": 53990,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1050:18:63",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 53991,
                        "nodeType": "ExpressionStatement",
                        "src": "1050:18:63"
                      }
                    ]
                  },
                  "functionSelector": "c0406226",
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "run",
                  "nameLocation": "591:3:63",
                  "parameters": {
                    "id": 53953,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "594:2:63"
                  },
                  "returnParameters": {
                    "id": 53954,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "604:0:63"
                  },
                  "scope": 53994,
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "public"
                }
              ],
              "abstract": false,
              "baseContracts": [
                {
                  "baseName": {
                    "id": 53927,
                    "name": "Script",
                    "nameLocations": [
                      "347:6:63"
                    ],
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 113,
                    "src": "347:6:63"
                  },
                  "id": 53928,
                  "nodeType": "InheritanceSpecifier",
                  "src": "347:6:63"
                }
              ],
              "canonicalName": "ZfiScript",
              "contractDependencies": [],
              "contractKind": "contract",
              "fullyImplemented": true,
              "internalFunctionIDs": {
                "20240": 1
              },
              "linearizedBaseContracts": [
                53994,
                113,
                8476,
                2955,
                895,
                74,
                62
              ],
              "name": "ZfiScript",
              "nameLocation": "334:9:63",
              "scope": 53995,
              "usedErrors": [],
              "usedEvents": []
            }
          ],
          "license": "UNLICENSED"
        }
      },
      "src/ZFI/ZFIToken.sol": {
        "id": 64,
        "ast": {}
      },
      "src/tokens/ERC20MinterPauserPermitUpgradeable.sol": {
        "id": 65,
        "ast": {}
      }
    },
    "contracts": {
      "script/00_ZFI.s.sol": {
        "ZfiScript": {
          "abi": [
            {
              "type": "function",
              "name": "IS_SCRIPT",
              "inputs": [],
              "outputs": [
                {
                  "name": "",
                  "type": "bool",
                  "internalType": "bool"
                }
              ],
              "stateMutability": "view"
            },
            {
              "type": "function",
              "name": "run",
              "inputs": [],
              "outputs": [],
              "stateMutability": "nonpayable"
            },
            {
              "type": "function",
              "name": "setUp",
              "inputs": [],
              "outputs": [],
              "stateMutability": "nonpayable"
            }
          ],
          "metadata": "{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"IS_SCRIPT\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"run\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setUp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"script/00_ZFI.s.sol\":\"ZfiScript\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/\",\":openzeppelin-foundry-upgrades/=lib/openzeppelin-foundry-upgrades/src/\",\":solidity-stringutils/=lib/openzeppelin-foundry-upgrades/lib/solidity-stringutils/\"]},\"sources\":{\"lib/forge-std/src/Base.sol\":{\"keccak256\":\"0x4ff1a785311017d1eedb1b4737956fa383067ad34eb439abfec1d989754dde1c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f553622969b9fdb930246704a4c10dfaee6b1a4468c142fa7eb9dc292a438224\",\"dweb:/ipfs/QmcxqHnqdQsMVtgsfH9VNLmZ3g7GhgNagfq7yvNCDcCHFK\"]},\"lib/forge-std/src/Script.sol\":{\"keccak256\":\"0x2315be74cc2826f9da401bea3da46a10ad6a6efdf73176d79160b453286d0ed2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://af0d4dc826911d6cb4d6272ed5cbdb6950e1476141cca328e178b808d848789c\",\"dweb:/ipfs/QmV2ytjUEkV84VtdMs1nZqQTBoVE987cHboQMpiha5yo3e\"]},\"lib/forge-std/src/StdChains.sol\":{\"keccak256\":\"0x9cc29c28f49d0b7f7b2f1aa32d8273f8a087bf62eb3fb22d893df824052c25ef\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://42dcb36cb10b878a0d5b20ce3a4a3ba4f51f44d7731a66ac1133c699bc80b31b\",\"dweb:/ipfs/QmY6q7SaHQMLBb3rS6xZdArPaXoskWeqF6oJwUeZ3gKLZj\"]},\"lib/forge-std/src/StdCheats.sol\":{\"keccak256\":\"0xb72f3519e0bf7d31df5d68557525f4fc55d861c3fb3b0f7793144ef7c94cbeb7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f3456d0f78e6f61203fa7871ba2df0d35925f10db3baee14be623ce2a35b84e2\",\"dweb:/ipfs/QmWE6QQSBvJifHMraisBTrf1x4WCwrDoTPLX8UKajTiApc\"]},\"lib/forge-std/src/StdJson.sol\":{\"keccak256\":\"0x62bed173cb126f6d5006706cf249bac8a2d51bfa18f773f314784ff18adc622d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5acc33dddbf2492e37dc32e89cd56ce917272d303a6874805f3a5768a6bfbf54\",\"dweb:/ipfs/QmTsgFhcpUf16gAVazUXU3WspgX8nHke2hzVCvoqS25WEp\"]},\"lib/forge-std/src/StdMath.sol\":{\"keccak256\":\"0xd90ad4fd8aeaeb8929964e686e769fdedd5eded3fc3815df194a0ab9f91a3fb2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7919b70f636c7b805223992f28ad1ad0145d6c1385b5931a3589aface5fe6c92\",\"dweb:/ipfs/QmY7FRaULwoGgFteF8GawjQJRfasNgpWnU2aiMsFrYpuTC\"]},\"lib/forge-std/src/StdStorage.sol\":{\"keccak256\":\"0x651d84d948832f0ef45686417aa68ffb871378fa788a4123dbf37844903c66f3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ff20f5ac9de3dc3ba86b1bf1f2723174e82ce3499ad67cb0ccfa7d28baeee678\",\"dweb:/ipfs/QmRZkUFKz7AmF7yk6o317sk822HHhGVPXZQgX8G4LfYfft\"]},\"lib/forge-std/src/StdStyle.sol\":{\"keccak256\":\"0x43e2a8a9b9c2574dabe74f11adf6f782df218f463540e3b5b563609fe108597d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://51363ca97404cf4128e1141428949768c31929e75e014b02c85e887fbbb4f1b8\",\"dweb:/ipfs/QmVhtbQc2fU4rRmbcfBtz34mAgG4BAZBsbna1Ca4SkoPsK\"]},\"lib/forge-std/src/StdUtils.sol\":{\"keccak256\":\"0x502b18a4becda6ecd91fa8b419d8034946bfa80e6cc7f6497f51f8565bfadae0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bf499ee483a1dfd02023d4ce78ed4029a49794ccd5b849aaab912faea0d2ba61\",\"dweb:/ipfs/QmP6hwNZW7sYbQK9fBzuZWxfLm6Swx2nKzvZ54qWNqQkzX\"]},\"lib/forge-std/src/Vm.sol\":{\"keccak256\":\"0x30d73c4fea34a791ad7334dd701df60fbb565c643556aadd6621e49e48895d1f\",\"license\":\"MIT OR Apache-2.0\",\"urls\":[\"bzz-raw://be9cf80e55eff0f49ad0ab3c44214e56a3e53b5ecafe311a521f5472fa4bbf59\",\"dweb:/ipfs/QmQHrZZoscvkfKSD2m6jhktrh8ieSLV2fg9DHGDHJiBkjT\"]},\"lib/forge-std/src/console.sol\":{\"keccak256\":\"0x91d5413c2434ca58fd278b6e1e79fd98d10c83931cc2596a6038eee4daeb34ba\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://91ccea707361e48b9b7a161fe81f496b9932bc471e9c4e4e1e9c283f2453cc70\",\"dweb:/ipfs/QmcB66sZhQ6Kz7MUHcLE78YXRUZxoZnnxZjN6yATsbB2ec\"]},\"lib/forge-std/src/console2.sol\":{\"keccak256\":\"0x954646445d1014c3cd85c7918f5e7adeeca5ee44b68c00bafa237e597a4e35ea\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://516fa3be52da4763147175bfba4be0aa011fadbb0c1afb01f97265bd4cee7973\",\"dweb:/ipfs/QmdixAyMJefx7qePChgdxcBH5MxhmN7vsqPuPLx3CgrVmF\"]},\"lib/forge-std/src/interfaces/IERC165.sol\":{\"keccak256\":\"0x414b2861b1acbf816ccb7346d3f16cf6c1e002e9e5e40d2f1f26fa5ddc2ea600\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://698352fb240868ea8f1d1fe389993035eeab930f10d06934f80ccfb2b6ccbfbc\",\"dweb:/ipfs/QmT6WLHAgXxFhh12kWym895oTzXid1326iZiwT3pyfggoT\"]},\"lib/forge-std/src/interfaces/IERC20.sol\":{\"keccak256\":\"0x4cab887298790f908c27de107e4e2907ca5413aee482ef776f8d2f353c5ef947\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bb715e0c4a2bdbe432bb624501506041f06e878e0b72675aebba30ad2c2b72e7\",\"dweb:/ipfs/QmWhhLSvkxS2NrukJJHqFY8gDVE5r9rD4PfHvR24pwdKv9\"]},\"lib/forge-std/src/interfaces/IERC721.sol\":{\"keccak256\":\"0xf069262a264fdb69f8f37a10d2df7374649e9ba73f8414c9c8a3b51184625f15\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://924a41ca82a68ffbd503a5faf2f76d13e9938f10501a71094716f12bb64b4b7f\",\"dweb:/ipfs/QmdWnqfKc5ZGhmxNPTde4zrFchnv9Yk9MpCMb2rdhXE5gm\"]},\"lib/forge-std/src/interfaces/IMulticall3.sol\":{\"keccak256\":\"0x7aac1389150499a922d1f9ef5749c908cef127cb2075b92fa17e9cb611263d0a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d95ebb7c7c463e08ebc12dab639945752fb2480acfc6e86da32f72732a7fd0c0\",\"dweb:/ipfs/QmNXK8P8oPWwajsQHvAHw3JPyQidPLCGQN3hWu1Lk6PBL2\"]},\"lib/forge-std/src/mocks/MockERC20.sol\":{\"keccak256\":\"0xadbdfc6639edec00ba94bb1133a0fd8de31ccafe45c2ef5df9b3ca61b60b559b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bc766f01bccf669abac8cc7b2096cc1352a66471ca3772ae61b1801dedc4ed4f\",\"dweb:/ipfs/QmNigaPj1LYkP7Z5xr4ijkUxr2K66fDGeoifG3WoM9ruyw\"]},\"lib/forge-std/src/mocks/MockERC721.sol\":{\"keccak256\":\"0x3293dcbb7acd28df553c954e4e39e288bf10aab7ecda8d50ef21b4f4a91a28d9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9eb374daf6df34f4392f8926f1fddbce9f22c423066aeaefdfbe77395f77967b\",\"dweb:/ipfs/QmWR81zBJRX2uyRjveGzikYPj6ZwKppWsU49YEQXTLWUsN\"]},\"lib/forge-std/src/safeconsole.sol\":{\"keccak256\":\"0xbaf41fdc6c54297e7cd8250e48b0f20eaac918e342a1028cef3f9a52ac086381\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a500ad81dea226f9910e6b50f99a9ff930105e393a692cbfb2185e4cdb4424ae\",\"dweb:/ipfs/QmVbUQpXNMmMWRiy4FvBNczzq46BMGfUoBikvSHNiCxVTq\"]},\"lib/openzeppelin-contracts-upgradeable/contracts/access/AccessControlUpgradeable.sol\":{\"keccak256\":\"0x6662ec4e5cefca03eeadd073e9469df8d2944bb2ee8ec8f7622c2c46aab5f225\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4d8544c6f8daa4d1bc215c6a72fe0acdb748664a105b0e5efc19295667521d45\",\"dweb:/ipfs/QmdGWqdnXT8S3RgCR6aV8XHZrsybieMQLLnug1NtpSjEXN\"]},\"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":{\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7a61054ae84cd6c4d04c0c4450ba1d6de41e27e0a2c4f1bcdf58f796b401c609\",\"dweb:/ipfs/QmUvtdp7X1mRVyC3CsHrtPbgoqWaXHp3S1ZR24tpAQYJWM\"]},\"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol\":{\"keccak256\":\"0x3f13b947637c4969c0644cab4ef399cdc4b67f101463b8775c5a43b118558e53\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c6683e6ade6985d394d32baaef5eea0d8b9ff0b3eca86ae413d6cdde114a9930\",\"dweb:/ipfs/QmdBE8T1BTddZxpdECMsb3KiCFyjNWmxcCddYrWFTXmWPj\"]},\"lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/ERC20Upgradeable.sol\":{\"keccak256\":\"0x9a1766b1921bf91b3e61eb53c7a6e70725254befd4bdcbbcd3af40bd9f66856f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://29bf2fa41a172086a665c9738377b93655aa4b1ffda9fe839c8bdf646f185040\",\"dweb:/ipfs/QmeB21qDuo8WPQSrqXJbQmWHKsdeocGNSUWLhCwniVejrt\"]},\"lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\":{\"keccak256\":\"0xe74dd150d031e8ecf9755893a2aae02dec954158140424f11c28ff689a48492f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://554e0934aecff6725e10d4aeb2e70ff214384b68782b1ba9f9322a0d16105a2f\",\"dweb:/ipfs/QmVvmHc7xPftEkWvJRNAqv7mXihKLEAVXpiebG7RT5rhMW\"]},\"lib/openzeppelin-contracts-upgradeable/contracts/token/ERC20/extensions/ERC20PermitUpgradeable.sol\":{\"keccak256\":\"0x8a97653aeba40e9f0c2e8df1a1379b29b927b6dc3534040c668e71ad9ae89d88\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6e529c294c9d634eb68a1e4aeb66eb8381de5a08ccd2c0bfeebd48a6b28fcff7\",\"dweb:/ipfs/QmWCezuxfZb68nM3Hs6XzQNNiW7VJsymU4sajy2DW1CKbp\"]},\"lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol\":{\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://08e39f23d5b4692f9a40803e53a8156b72b4c1f9902a88cd65ba964db103dab9\",\"dweb:/ipfs/QmPKn6EYDgpga7KtpkA8wV2yJCYGMtc9K4LkJfhKX2RVSV\"]},\"lib/openzeppelin-contracts-upgradeable/contracts/utils/NoncesUpgradeable.sol\":{\"keccak256\":\"0x778f4a1546a1c6c726ecc8e2348a2789690fb8f26e12bd9d89537669167b79a4\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://851d3dfe724e918ff0a064b206e1ef46b27ab0df2aa2c8af976973a22ef59827\",\"dweb:/ipfs/Qmd4wb7zX8ueYhMVBy5PJjfsANK3Ra3pKPN7qQkNsdwGHn\"]},\"lib/openzeppelin-contracts-upgradeable/contracts/utils/PausableUpgradeable.sol\":{\"keccak256\":\"0x92915b7f7f642c6be3f65bfd1522feb5d5b6ef25f755f4dbb51df32c868f2f97\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://85ad36d5cc7e190e1ee6c94b24659bc3a31396c4c36b6ffa6a509e10661f8007\",\"dweb:/ipfs/QmPFyc4zMh2zo6YWZt25gjm3YdR2hg6wGETaWw256fMmJJ\"]},\"lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/EIP712Upgradeable.sol\":{\"keccak256\":\"0x85462422a22578744581e012e9aa0a391958cb360288b0b63f29bf0431d70327\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2bc529e2b9b28da5d26da451058250d85afcaa3c5083ee273ac68fa6bf956b78\",\"dweb:/ipfs/Qmd3Aq59ztmoVmHigsaR4YjkXWKERVpjfQ4a2PHk7Ke6Rx\"]},\"lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/ERC165Upgradeable.sol\":{\"keccak256\":\"0xdaba3f7c42c55b2896353f32bd27d4d5f8bae741b3b05d4c53f67abc4dc47ce8\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1fa2e61141c602510bcd2cd936ed9561922ac8772a9b9c9a9db091a74e354a45\",\"dweb:/ipfs/QmcHQDDoEBwJmwUbzoVkytvJsBx3KVHYFFnDkvRGWh9Wmh\"]},\"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/access/IAccessControl.sol\":{\"keccak256\":\"0xb6b36edd6a2999fd243ff226d6cbf84bd71af2432bbd0dfe19392996a1d9cb41\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1fd2f35495652e57e3f99bc6c510bc5f7dd398a176ea2e72d8ed730aebc6ca26\",\"dweb:/ipfs/QmTQV6X4gkikTib49cho5iDX3JvSQbdsoEChoDwrk3CbbH\"]},\"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/access/Ownable.sol\":{\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8ed324d3920bb545059d66ab97d43e43ee85fd3bd52e03e401f020afb0b120f6\",\"dweb:/ipfs/QmfEckWLmZkDDcoWrkEvMWhms66xwTLff9DDhegYpvHo1a\"]},\"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/interfaces/IERC1967.sol\":{\"keccak256\":\"0xb25a4f11fa80c702bf5cd85adec90e6f6f507f32f4a8e6f5dbc31e8c10029486\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6917f8a323e7811f041aecd4d9fd6e92455a6fba38a797ac6f6e208c7912b79d\",\"dweb:/ipfs/QmShuYv55wYHGi4EFkDB8QfF7ZCHoKk2efyz3AWY1ExSq7\"]},\"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/interfaces/IERC5267.sol\":{\"keccak256\":\"0x92aa1df62dc3d33f1656d63bede0923e0df0b706ad4137c8b10b0a8fe549fd92\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c5c0f29195ad64cbe556da8e257dac8f05f78c53f90323c0d2accf8e6922d33a\",\"dweb:/ipfs/QmQ61TED8uaCZwcbh8KkgRSsCav7x7HbcGHwHts3U4DmUP\"]},\"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/interfaces/draft-IERC1822.sol\":{\"keccak256\":\"0x2a1f9944df2015c081d89cd41ba22ffaf10aa6285969f0dc612b235cc448999c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ef381843676aec64421200ee85eaa0b1356a35f28b9fc67e746a6bbb832077d9\",\"dweb:/ipfs/QmY8aorMYA2TeTCnu6ejDjzb4rW4t7TCtW4GZ6LoxTFm7v\"]},\"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ea290300e0efc4d901244949dc4d877fd46e6c5e43dc2b26620e8efab3ab803f\",\"dweb:/ipfs/QmcLLJppxKeJWqHxE2CUkcfhuRTgHSn8J4kijcLa5MYhSt\"]},\"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Proxy.sol\":{\"keccak256\":\"0xbfb6695731de677140fbf76c772ab08c4233a122fb51ac28ac120fc49bbbc4ec\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://68f8fded7cc318efa15874b7c6a983fe17a4a955d72d240353a9a4ca1e1b824c\",\"dweb:/ipfs/QmdcmBL9Qo4Tk3Dby4wFYabGyot9JNeLPxpSXZUgUm92BV\"]},\"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Utils.sol\":{\"keccak256\":\"0x06a78f9b3ee3e6d0eb4e4cd635ba49960bea34cac1db8c0a27c75f2319f1fd65\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://547d21aa17f4f3f1a1a7edf7167beff8dd9496a0348d5588f15cc8a4b29d052a\",\"dweb:/ipfs/QmT16JtRQSWNpLo9W23jr6CzaMuTAcQcjJJcdRd8HLJ6cE\"]},\"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/proxy/Proxy.sol\":{\"keccak256\":\"0xc3f2ec76a3de8ed7a7007c46166f5550c72c7709e3fc7e8bb3111a7191cdedbd\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e73efb4c2ca655882dc237c6b4f234a9bd36d97159d8fcaa837eb01171f726ac\",\"dweb:/ipfs/QmTNnnv7Gu5fs5G1ZMh7Fexp8N4XUs3XrNAngjcxgiss3e\"]},\"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/proxy/beacon/BeaconProxy.sol\":{\"keccak256\":\"0x387ebdcb365b8e620f26645d2b34a161cd39eedfb0219e8baff55630c5ae113c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://744ea187c195e31cb9201e63ca291fca9e623747f54f0ba390b366a6213b8964\",\"dweb:/ipfs/Qmc547qfV4sz65DC9B4okx1HvgxwUzJR7zTfKKbTzL3UQT\"]},\"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol\":{\"keccak256\":\"0xc59a78b07b44b2cf2e8ab4175fca91e8eca1eee2df7357b8d2a8833e5ea1f64c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5aa4f07e65444784c29cd7bfcc2341b34381e4e5b5da9f0c5bd00d7f430e66fa\",\"dweb:/ipfs/QmWRMh4Q9DpaU9GvsiXmDdoNYMyyece9if7hnfLz7uqzWM\"]},\"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/proxy/beacon/UpgradeableBeacon.sol\":{\"keccak256\":\"0x5920bac7215d12961e23b207f6e81a1d64aa4935a4469abe95b64a96a3c3007b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b34bb828c45c3a4ebf6c2c585971abf5089e61357a3818a2900c7e85b74a1299\",\"dweb:/ipfs/QmewGAzKsPXYfSjCKxuH1SekKxtdyzhdbdyxjF5gohLigt\"]},\"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/proxy/transparent/ProxyAdmin.sol\":{\"keccak256\":\"0x371c3467dccfbb2ac03b0edb4fadaacb9ad382772cee7850a3e73f39a56d102c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3574f1cc3ff2cb985a1385949bd3c76888e8dcf59e6a770ccb15c79b145b39bb\",\"dweb:/ipfs/QmXZDrFibUAMqjoRrpKxV3ma5RR9YfJXZyMrLWJ3bix9gi\"]},\"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\":{\"keccak256\":\"0xbc9babed4d136e6cc1e74354aa66538a234f3808645fbe30463b4a7b7d8ca789\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://75fd9323b206da2a87924fca2ca996dbd04ae0963f79f66fb8a0ef94bf283a3d\",\"dweb:/ipfs/QmYSoLcvpq8gRo8doLP4nnB43UAT1D3KvfFJRDSD2y4nYu\"]},\"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]},\"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ad7c8d4d08938c8dfc43d75a148863fb324b80cf53e0a36f7e5a4ac29008850\",\"dweb:/ipfs/QmcrhfPgVNf5mkdhQvy1pMv51TFokD3Y4Wa5WZhFqVh8UV\"]},\"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f5196ec75139918c6c7bb4251b36395e668f1fa6d206beba7e7520e74913940d\",\"dweb:/ipfs/QmSyqjksXxmm2mCG6qRd1yuwLykypkSVBbnBnGqJRcuJMi\"]},\"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/Address.sol\":{\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b7bd24e224f67f65bfadf85dc2929fa965456bb2415478bd0125471b5ce35245\",\"dweb:/ipfs/QmRaydGr8BTHs1kvaZfsNU69pKzUAGFrvABn1KiRSbE51y\"]},\"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]},\"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol\":{\"keccak256\":\"0x32ba59b4b7299237c8ba56319110989d7978a039faf754793064e967e5894418\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1ae50c8b562427df610cc4540c9bf104acca7ef8e2dcae567ae7e52272281e9c\",\"dweb:/ipfs/QmTHiadFCSJUPpRjNegc5SahmeU8bAoY8i9Aq6tVscbcKR\"]},\"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/Strings.sol\":{\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6e52e0a7765c943ef14e5bcf11e46e6139fa044be564881378349236bf2e3453\",\"dweb:/ipfs/QmZEeeXoFPW47amyP35gfzomF9DixqqTEPwzBakv6cZw6i\"]},\"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":{\"keccak256\":\"0xeed0a08b0b091f528356cbc7245891a4c748682d4f6a18055e8e6ca77d12a6cf\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ba80ba06c8e6be852847e4c5f4492cef801feb6558ae09ed705ff2e04ea8b13c\",\"dweb:/ipfs/QmXRJDv3xHLVQCVXg1ZvR35QS9sij5y9NDWYzMfUfAdTHF\"]},\"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/MessageHashUtils.sol\":{\"keccak256\":\"0xba333517a3add42cd35fe877656fc3dfcc9de53baa4f3aabbd6d12a92e4ea435\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2ceacff44c0fdc81e48e0e0b1db87a2076d3c1fb497341de077bf1da9f6b406c\",\"dweb:/ipfs/QmRUo1muMRAewxrKQ7TkXUtknyRoR57AyEkoPpiuZQ8FzX\"]},\"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://87b3541437c8c443ccd36795e56a338ed12855eec17f8da624511b8d1a7e14df\",\"dweb:/ipfs/QmeJQCtZrQjtJLr6u7ZHWeH3pBnjtLWzvRrKViAi7UZqxL\"]},\"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":{\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4ece9f0b9c8daca08c76b6b5405a6446b6f73b3a15fab7ff56e296cbd4a2c875\",\"dweb:/ipfs/QmQyRpyPRL5SQuAgj6SHmbir3foX65FJjbVTTQrA2EFg6L\"]},\"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol\":{\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7d533a1c97cd43a57cd9c465f7ee8dd0e39ae93a8fb8ff8e5303a356b081cdcc\",\"dweb:/ipfs/QmVBEei6aTnvYNZp2CHYVNKyZS4q1KkjANfY39WVXZXVoT\"]},\"lib/openzeppelin-foundry-upgrades/lib/solidity-stringutils/src/strings.sol\":{\"keccak256\":\"0x42cad11a7033f2fe05dd68611d2304407a620ac985b91edf29d5868cfe196223\",\"urls\":[\"bzz-raw://3cbc2333234e1f00eab5e57c4bcaf5115661e5e066a17c70af587a0a96f24669\",\"dweb:/ipfs/QmPHvStqcvZL46LW5N2ExTwAaqNhRCcmAX66aR6oE1WDar\"]},\"lib/openzeppelin-foundry-upgrades/src/Defender.sol\":{\"keccak256\":\"0x4ab3fd0138ce11d5c16dffc7b017c965ba30de55898e91e0f64665f8e275d20e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ae6c5d6fba174dec5c09f86ab4ce1acdb51a0d0f780e56057a177d196e12511d\",\"dweb:/ipfs/QmaajQoYS8nD9GgEiJS6aebwf7pkFBL12Wi1DNHXLzEV9g\"]},\"lib/openzeppelin-foundry-upgrades/src/Options.sol\":{\"keccak256\":\"0x1b7a53fbaba7bd09f3265f97045d1d03670e3fc07fd989eb0243804cad8bdd8f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f451aa6d928f65e2e243862d72a75df605a3ba943ad6e59e8456effc8bd463c1\",\"dweb:/ipfs/Qmee7sbopLbd7N6docCLrGKwSrWGf7YXzXrTftp72oYEGy\"]},\"lib/openzeppelin-foundry-upgrades/src/Upgrades.sol\":{\"keccak256\":\"0xe4238478559e271b46ffcef23b4b22cc58943b8bbc549fd8eb221205704314b6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://45c4d5f02c2263a8db048e11dca37d2dce3e4ea22c85c133c572aa6c3a6a879b\",\"dweb:/ipfs/QmVcEjehjoaKB5VtFnS3gd6swWr274j4KmFh3etJW6sJvx\"]},\"lib/openzeppelin-foundry-upgrades/src/internal/DefenderDeploy.sol\":{\"keccak256\":\"0x2734b2a84b2e8c3f7d1040cdf6a1cb3d9a565201516892e297b8072f6ac44781\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1d0ce30498d61aa9150f2723f4cec7e0129a4b01cf04bbfe60aa4591d21918e8\",\"dweb:/ipfs/QmQtiYoNRuiGgiXJDCYr6jB4ybzeRRHrJ2nob4JfnjKwMf\"]},\"lib/openzeppelin-foundry-upgrades/src/internal/Utils.sol\":{\"keccak256\":\"0xc82c059c342414970ae59474124c23cc3d08485513ce269c0c1a781a1a0eb33a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b93d1847db067a41fd9fb0cee1af8ea72a148d8e38b860b48d2dad8eb00c472b\",\"dweb:/ipfs/QmbGEVvqWv5U56YvwyfjE7z6i5mCvrTK4udS3mSz9udVRw\"]},\"lib/openzeppelin-foundry-upgrades/src/internal/Versions.sol\":{\"keccak256\":\"0x38354f4642f80aefbc2805e934eee0c779d6439be14c86465b8ca18d2a3dc543\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://09b1c891cda7ce69d2c1adad58a3167cf3591efcac68f1225a4e24ecd64b9369\",\"dweb:/ipfs/QmQLnanBWRJKxsBo7xp9qL7qbmsjeubkZkKJ1roSaB4P7v\"]},\"script/00_ZFI.s.sol\":{\"keccak256\":\"0x61be6aa188bb189c6cb01654b3cf69569906d1b512d10e5189deaf2a00f6edf8\",\"license\":\"UNLICENSED\",\"urls\":[\"bzz-raw://ad5171cc7f895760e9d9c3d1846dd9ad2de2fd29a679388a59f657730bfc9583\",\"dweb:/ipfs/QmTsZxYiAuHxjJVhuxGeccfe1Kpmf4akKaVv3xbt1NoeYE\"]},\"src/ZFI/ZFIToken.sol\":{\"keccak256\":\"0x8029f3aa6ccae93b9bedf6d11a3607cf695d5d29f23675b7fa7c0f0d4f04406c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://76c5f658cb2b399109827bc8d9ab3c67f1cb165ad2eba773fb20326c8560b134\",\"dweb:/ipfs/QmYzmBv1K3mWgWnbzVwqZ7TC4xJXVKvqzNar4XhECuWDeS\"]},\"src/tokens/ERC20MinterPauserPermitUpgradeable.sol\":{\"keccak256\":\"0x39aa813c4e998d1bf443b0bee432d17a7a2dbd0e0349cef31c0b426a0c6ba72d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bd8d3e1e03dd8313d984a3d18cfe39c15d7a92758d9789b2c828169ee8f8c4fe\",\"dweb:/ipfs/QmXPyofzX8pwiiUHAtHT6W15UoFtc4ajkYSPbGM87xeYj2\"]}},\"version\":1}",
          "userdoc": {},
          "devdoc": {},
          "storageLayout": {
            "storage": [
              {
                "astId": 61,
                "contract": "script/00_ZFI.s.sol:ZfiScript",
                "label": "stdstore",
                "offset": 0,
                "slot": "0",
                "type": "t_struct(StdStorage)4520_storage"
              },
              {
                "astId": 137,
                "contract": "script/00_ZFI.s.sol:ZfiScript",
                "label": "stdChainsInitialized",
                "offset": 0,
                "slot": "8",
                "type": "t_bool"
              },
              {
                "astId": 158,
                "contract": "script/00_ZFI.s.sol:ZfiScript",
                "label": "chains",
                "offset": 0,
                "slot": "9",
                "type": "t_mapping(t_string_memory_ptr,t_struct(Chain)153_storage)"
              },
              {
                "astId": 162,
                "contract": "script/00_ZFI.s.sol:ZfiScript",
                "label": "defaultRpcUrls",
                "offset": 0,
                "slot": "10",
                "type": "t_mapping(t_string_memory_ptr,t_string_storage)"
              },
              {
                "astId": 166,
                "contract": "script/00_ZFI.s.sol:ZfiScript",
                "label": "idToAlias",
                "offset": 0,
                "slot": "11",
                "type": "t_mapping(t_uint256,t_string_storage)"
              },
              {
                "astId": 169,
                "contract": "script/00_ZFI.s.sol:ZfiScript",
                "label": "fallbackToDefaultRpcUrls",
                "offset": 0,
                "slot": "12",
                "type": "t_bool"
              },
              {
                "astId": 927,
                "contract": "script/00_ZFI.s.sol:ZfiScript",
                "label": "gasMeteringOff",
                "offset": 1,
                "slot": "12",
                "type": "t_bool"
              },
              {
                "astId": 112,
                "contract": "script/00_ZFI.s.sol:ZfiScript",
                "label": "IS_SCRIPT",
                "offset": 2,
                "slot": "12",
                "type": "t_bool"
              },
              {
                "astId": 53930,
                "contract": "script/00_ZFI.s.sol:ZfiScript",
                "label": "GOV_ADDRESS",
                "offset": 3,
                "slot": "12",
                "type": "t_address"
              },
              {
                "astId": 53932,
                "contract": "script/00_ZFI.s.sol:ZfiScript",
                "label": "PROXY",
                "offset": 0,
                "slot": "13",
                "type": "t_address"
              },
              {
                "astId": 53934,
                "contract": "script/00_ZFI.s.sol:ZfiScript",
                "label": "deployerPrivateKey",
                "offset": 0,
                "slot": "14",
                "type": "t_uint256"
              }
            ],
            "types": {
              "t_address": {
                "encoding": "inplace",
                "label": "address",
                "numberOfBytes": "20"
              },
              "t_array(t_bytes32)dyn_storage": {
                "encoding": "dynamic_array",
                "label": "bytes32[]",
                "numberOfBytes": "32",
                "base": "t_bytes32"
              },
              "t_bool": {
                "encoding": "inplace",
                "label": "bool",
                "numberOfBytes": "1"
              },
              "t_bytes32": {
                "encoding": "inplace",
                "label": "bytes32",
                "numberOfBytes": "32"
              },
              "t_bytes4": {
                "encoding": "inplace",
                "label": "bytes4",
                "numberOfBytes": "4"
              },
              "t_bytes_storage": {
                "encoding": "bytes",
                "label": "bytes",
                "numberOfBytes": "32"
              },
              "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_struct(FindData)4495_storage)))": {
                "encoding": "mapping",
                "key": "t_address",
                "label": "mapping(address => mapping(bytes4 => mapping(bytes32 => struct FindData)))",
                "numberOfBytes": "32",
                "value": "t_mapping(t_bytes4,t_mapping(t_bytes32,t_struct(FindData)4495_storage))"
              },
              "t_mapping(t_bytes32,t_struct(FindData)4495_storage)": {
                "encoding": "mapping",
                "key": "t_bytes32",
                "label": "mapping(bytes32 => struct FindData)",
                "numberOfBytes": "32",
                "value": "t_struct(FindData)4495_storage"
              },
              "t_mapping(t_bytes4,t_mapping(t_bytes32,t_struct(FindData)4495_storage))": {
                "encoding": "mapping",
                "key": "t_bytes4",
                "label": "mapping(bytes4 => mapping(bytes32 => struct FindData))",
                "numberOfBytes": "32",
                "value": "t_mapping(t_bytes32,t_struct(FindData)4495_storage)"
              },
              "t_mapping(t_string_memory_ptr,t_string_storage)": {
                "encoding": "mapping",
                "key": "t_string_memory_ptr",
                "label": "mapping(string => string)",
                "numberOfBytes": "32",
                "value": "t_string_storage"
              },
              "t_mapping(t_string_memory_ptr,t_struct(Chain)153_storage)": {
                "encoding": "mapping",
                "key": "t_string_memory_ptr",
                "label": "mapping(string => struct StdChains.Chain)",
                "numberOfBytes": "32",
                "value": "t_struct(Chain)153_storage"
              },
              "t_mapping(t_uint256,t_string_storage)": {
                "encoding": "mapping",
                "key": "t_uint256",
                "label": "mapping(uint256 => string)",
                "numberOfBytes": "32",
                "value": "t_string_storage"
              },
              "t_string_memory_ptr": {
                "encoding": "bytes",
                "label": "string",
                "numberOfBytes": "32"
              },
              "t_string_storage": {
                "encoding": "bytes",
                "label": "string",
                "numberOfBytes": "32"
              },
              "t_struct(Chain)153_storage": {
                "encoding": "inplace",
                "label": "struct StdChains.Chain",
                "numberOfBytes": "128",
                "members": [
                  {
                    "astId": 146,
                    "contract": "script/00_ZFI.s.sol:ZfiScript",
                    "label": "name",
                    "offset": 0,
                    "slot": "0",
                    "type": "t_string_storage"
                  },
                  {
                    "astId": 148,
                    "contract": "script/00_ZFI.s.sol:ZfiScript",
                    "label": "chainId",
                    "offset": 0,
                    "slot": "1",
                    "type": "t_uint256"
                  },
                  {
                    "astId": 150,
                    "contract": "script/00_ZFI.s.sol:ZfiScript",
                    "label": "chainAlias",
                    "offset": 0,
                    "slot": "2",
                    "type": "t_string_storage"
                  },
                  {
                    "astId": 152,
                    "contract": "script/00_ZFI.s.sol:ZfiScript",
                    "label": "rpcUrl",
                    "offset": 0,
                    "slot": "3",
                    "type": "t_string_storage"
                  }
                ]
              },
              "t_struct(FindData)4495_storage": {
                "encoding": "inplace",
                "label": "struct FindData",
                "numberOfBytes": "128",
                "members": [
                  {
                    "astId": 4488,
                    "contract": "script/00_ZFI.s.sol:ZfiScript",
                    "label": "slot",
                    "offset": 0,
                    "slot": "0",
                    "type": "t_uint256"
                  },
                  {
                    "astId": 4490,
                    "contract": "script/00_ZFI.s.sol:ZfiScript",
                    "label": "offsetLeft",
                    "offset": 0,
                    "slot": "1",
                    "type": "t_uint256"
                  },
                  {
                    "astId": 4492,
                    "contract": "script/00_ZFI.s.sol:ZfiScript",
                    "label": "offsetRight",
                    "offset": 0,
                    "slot": "2",
                    "type": "t_uint256"
                  },
                  {
                    "astId": 4494,
                    "contract": "script/00_ZFI.s.sol:ZfiScript",
                    "label": "found",
                    "offset": 0,
                    "slot": "3",
                    "type": "t_bool"
                  }
                ]
              },
              "t_struct(StdStorage)4520_storage": {
                "encoding": "inplace",
                "label": "struct StdStorage",
                "numberOfBytes": "256",
                "members": [
                  {
                    "astId": 4504,
                    "contract": "script/00_ZFI.s.sol:ZfiScript",
                    "label": "finds",
                    "offset": 0,
                    "slot": "0",
                    "type": "t_mapping(t_address,t_mapping(t_bytes4,t_mapping(t_bytes32,t_struct(FindData)4495_storage)))"
                  },
                  {
                    "astId": 4507,
                    "contract": "script/00_ZFI.s.sol:ZfiScript",
                    "label": "_keys",
                    "offset": 0,
                    "slot": "1",
                    "type": "t_array(t_bytes32)dyn_storage"
                  },
                  {
                    "astId": 4509,
                    "contract": "script/00_ZFI.s.sol:ZfiScript",
                    "label": "_sig",
                    "offset": 0,
                    "slot": "2",
                    "type": "t_bytes4"
                  },
                  {
                    "astId": 4511,
                    "contract": "script/00_ZFI.s.sol:ZfiScript",
                    "label": "_depth",
                    "offset": 0,
                    "slot": "3",
                    "type": "t_uint256"
                  },
                  {
                    "astId": 4513,
                    "contract": "script/00_ZFI.s.sol:ZfiScript",
                    "label": "_target",
                    "offset": 0,
                    "slot": "4",
                    "type": "t_address"
                  },
                  {
                    "astId": 4515,
                    "contract": "script/00_ZFI.s.sol:ZfiScript",
                    "label": "_set",
                    "offset": 0,
                    "slot": "5",
                    "type": "t_bytes32"
                  },
                  {
                    "astId": 4517,
                    "contract": "script/00_ZFI.s.sol:ZfiScript",
                    "label": "_enable_packed_slots",
                    "offset": 0,
                    "slot": "6",
                    "type": "t_bool"
                  },
                  {
                    "astId": 4519,
                    "contract": "script/00_ZFI.s.sol:ZfiScript",
                    "label": "_calldata",
                    "offset": 0,
                    "slot": "7",
                    "type": "t_bytes_storage"
                  }
                ]
              },
              "t_uint256": {
                "encoding": "inplace",
                "label": "uint256",
                "numberOfBytes": "32"
              }
            }
          },
          "evm": {
            "bytecode": {
              "object": "6080604052600c805462ff00ff191662010001179055348015602057600080fd5b506139b5806100306000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80630a9254e414610046578063c040622614610050578063f8ccbf4714610058575b600080fd5b61004e61007f565b005b61004e6101cd565b600c5461006b9062010000900460ff1681565b604051901515815260200160405180910390f35b60405163350d56bf60e01b815260206004820152600b60248201526a474f565f4144445245535360a81b6044820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063350d56bf90606401602060405180830381865afa1580156100ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061010e9190612b44565b600c80546001600160a01b03929092166301000000026301000000600160b81b031990921691909117905560405163c1978d1f60e01b815260206004820152600b60248201526a505249564154455f4b455960a81b6044820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063c1978d1f90606401602060405180830381865afa1580156101a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101c89190612b6d565b600e55565b600e5460405163ce817d4760e01b81526004810191909152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ce817d4790602401600060405180830381600087803b15801561021e57600080fd5b505af1158015610232573d6000803e3d6000fd5b5050604080518082018252600c8082526b169192551bdad95b8b9cdbdb60a21b602083015254915163010000009092046001600160a01b031660248301526102a99350915060440160408051601f198184030181529190526020810180516001600160e01b03166326dcff1560e01b179052610388565b600d80546001600160a01b0319166001600160a01b039290921691909117905560408051808201909152601281527102a37b5b2b71030b2323932b9b99034b99d160751b60208201526102fb906103fe565b600d54610310906001600160a01b0316610444565b7f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d60001c6001600160a01b03166376eadd366040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561036e57600080fd5b505af1158015610382573d6000803e3d6000fd5b50505050565b60006103e96040805160e081018252606080825260208083018290528284018290526000828401819052608080850182905260a08086018390528651908101875282815292830182905294820183905281830152928301529060c082015290565b6103f484848361048c565b9150505b92915050565b610441816040516024016104129190612bd6565b60408051601f198184030181529190526020810180516001600160e01b031663104c13eb60e21b179052610507565b50565b6040516001600160a01b03821660248201526104419060440160408051601f198184030181529190526020810180516001600160e01b031663161765e160e11b179052610507565b6000806104998584610510565b90506104fc6040518060400160405280601d81526020017f4552433139363750726f78792e736f6c3a4552433139363750726f787900000081525082866040516020016104e7929190612be9565b60405160208183030381529060405285610527565b9150505b9392505050565b61044181610653565b600061051c8383610674565b610500838360200151845b60c0810151516000901561054b5761054484848460c00151610684565b9050610500565b604051638d1cc92560e01b8152600090737109709ecfa91a80626ff3989d68f67f5b1dd12d90638d1cc92590610585908890600401612bd6565b600060405180830381865afa1580156105a2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526105ca9190810190612ce0565b905060006105f882866040516020016105e4929190612d15565b6040516020818303038152906040526107c0565b90506001600160a01b03811661064a57858560405160200161061b929190612d44565b60408051601f198184030181529082905262461bcd60e51b825261064191600401612bd6565b60405180910390fd5b91506105009050565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b610680828260006107d3565b5050565b60008061068f61088a565b9050600061069d868361092a565b905060006106b48260600151836020015185610ce3565b905060006106c483838989610e74565b905060006106d182611633565b602081015181519192509060030b156106fb5789826040015160405160200161061b929190612dd3565b60006107366040518060400160405280601581526020017402232b83637bcb2b2103a379030b2323932b9b99d1605d1b8152508360016117d0565b60405163c6ce059d60e01b8152909150737109709ecfa91a80626ff3989d68f67f5b1dd12d9063c6ce059d90610770908490600401612bd6565b602060405180830381865afa15801561078d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b19190612b44565b9b9a5050505050505050505050565b6000808251602084016000f09392505050565b8160a00151156107e257505050565b60006107ef8484846118e4565b905060006107fc82611633565b602081015181519192509060030b15801561084c575061084c61083d604051806040016040528060078152602001665355434345535360c81b815250611df1565b61084683611df1565b90611e1e565b1561085957505050505050565b6040820151511561087957816040015160405160200161061b9190612e39565b8060405160200161061b9190612e90565b60408051808201825260038152621bdd5d60ea1b602082015290516334515cdb60e21b8152606091737109709ecfa91a80626ff3989d68f67f5b1dd12d91829063d145736c906108de908490600401612ee0565b600060405180830381865afa1580156108fb573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109239190810190612f15565b9250505090565b61095c6040518060a0016040528060608152602001606081526020016060815260200160608152602001606081525090565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d90506109a76040518060a0016040528060608152602001606081526020016060815260200160608152602001606081525090565b6109b085611e45565b602082015260006109c086612024565b90506000836001600160a01b031663d930a0e66040518163ffffffff1660e01b8152600401600060405180830381865afa158015610a02573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610a2a9190810190612f15565b86838560200151604051602001610a449493929190612f5e565b60408051601f19818403018152908290526360f9bb1160e01b825291506000906001600160a01b038616906360f9bb1190610a83908590600401612bd6565b600060405180830381865afa158015610aa0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610ac89190810190612f15565b604051636da11afb60e11b81529091506001600160a01b0386169063db4235f690610af7908490600401612fe8565b602060405180830381865afa158015610b14573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b389190613021565b610b4d578160405160200161061b9190613043565b6040516309389f5960e31b81526001600160a01b038616906349c4fac890610b799084906004016130ba565b600060405180830381865afa158015610b96573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610bbe9190810190612f15565b84526040516309389f5960e31b81526001600160a01b038616906349c4fac890610bec908490600401613100565b600060405180830381865afa158015610c09573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610c319190810190612f15565b8460400181905250846001600160a01b03166349c4fac8828660000151604051602001610c5e9190613141565b6040516020818303038152906040526040518363ffffffff1660e01b8152600401610c8a929190613193565b600060405180830381865afa158015610ca7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610ccf9190810190612f15565b606085015250608083015250949350505050565b60408051600480825260a0820190925260609160009190816020015b6060815260200190600190039081610cff579050509050604051806040016040528060048152602001630677265760e41b81525081600081518110610d4657610d466131b8565b6020026020010181905250604051806040016040528060038152602001620b5c9b60ea1b81525081600181518110610d8057610d806131b8565b602002602001018190525084604051602001610d9c91906131ce565b60405160208183030381529060405281600281518110610dbe57610dbe6131b8565b602002602001018190525082604051602001610dda91906131fc565b60405160208183030381529060405281600381518110610dfc57610dfc6131b8565b60200260200101819052506000610e1282611633565b9050600081602001519050610e55610e4660405180604001604052806005815260200164173539b7b760d91b815250611df1565b610e4f83611df1565b90612161565b610e6a578560405160200161061b919061322b565b9695505050505050565b6040805160ff8082526120008201909252606091737109709ecfa91a80626ff3989d68f67f5b1dd12d91600091816020015b6060815260200190600190039081610ea65790505090506000604051806040016040528060038152602001620dce0f60eb1b815250828280610ee7906132c0565b935060ff1681518110610efc57610efc6131b8565b60200260200101819052506040518060400160405280600d81526020016c302e302e312d616c7068612e3560981b815250604051602001610f3d91906132df565b604051602081830303815290604052828280610f58906132c0565b935060ff1681518110610f6d57610f6d6131b8565b6020026020010181905250604051806040016040528060068152602001656465706c6f7960d01b815250828280610fa3906132c0565b935060ff1681518110610fb857610fb86131b8565b60200260200101819052506040518060400160405280600e81526020016d2d2d636f6e74726163744e616d6560901b815250828280610ff6906132c0565b935060ff168151811061100b5761100b6131b8565b60200260200101819052508760200151828280611027906132c0565b935060ff168151811061103c5761103c6131b8565b60200260200101819052506040518060400160405280600e81526020016d05a5ac6dedce8e4c2c6e8a0c2e8d60931b81525082828061107a906132c0565b935060ff168151811061108f5761108f6131b8565b6020908102919091010152875182826110a7816132c0565b935060ff16815181106110bc576110bc6131b8565b6020026020010181905250604051806040016040528060098152602001680b4b58da185a5b925960ba1b8152508282806110f5906132c0565b935060ff168151811061110a5761110a6131b8565b602002602001018190525061111e466121c2565b8282611129816132c0565b935060ff168151811061113e5761113e6131b8565b60200260200101819052506040518060400160405280600f81526020016e2d2d6275696c64496e666f46696c6560881b81525082828061117d906132c0565b935060ff1681518110611192576111926131b8565b6020026020010181905250868282806111aa906132c0565b935060ff16815181106111bf576111bf6131b8565b60200260200101819052506040518060400160405280600d81526020016c2d2d6c6963656e73655479706560981b8152508282806111fc906132c0565b935060ff1681518110611211576112116131b8565b6020026020010181905250876040015182828061122d906132c0565b935060ff1681518110611242576112426131b8565b6020908102919091010152855115611348576040805180820190915260158152742d2d636f6e7374727563746f7242797465636f646560581b6020820152828261128b816132c0565b935060ff16815181106112a0576112a06131b8565b60209081029190910101526040516371aad10d60e01b81526001600160a01b038416906371aad10d906112d7908990600401612bd6565b600060405180830381865afa1580156112f4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261131c9190810190612f15565b8282611327816132c0565b935060ff168151811061133c5761133c6131b8565b60200260200101819052505b8460200151156113f1576040805180820190915260128152712d2d766572696679536f75726365436f646560701b60208201528282611386816132c0565b935060ff168151811061139b5761139b6131b8565b60200260200101819052506040518060400160405280600581526020016466616c736560d81b8152508282806113d0906132c0565b935060ff16815181106113e5576113e56131b8565b60200260200101819052505b6114066114018660400151611df1565b511590565b6114895760408051808201909152600b81526a0b4b5c995b185e595c925960aa1b60208201528282611437816132c0565b935060ff168151811061144c5761144c6131b8565b60200260200101819052508460400151828280611468906132c0565b935060ff168151811061147d5761147d6131b8565b60200260200101819052505b60608501511561157a576040805180820190915260068152650b4b5cd85b1d60d21b602082015282826114bb816132c0565b935060ff16815181106114d0576114d06131b8565b60209081029190910101526060850151604051631623433d60e31b815260048101919091526001600160a01b0384169063b11a19e890602401600060405180830381865afa158015611526573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261154e9190810190612f15565b8282611559816132c0565b935060ff168151811061156e5761156e6131b8565b60200260200101819052505b60008160ff1667ffffffffffffffff81111561159857611598612c0d565b6040519080825280602002602001820160405280156115cb57816020015b60608152602001906001900390816115b65790505b50905060005b8260ff168160ff16101561162457838160ff16815181106115f4576115f46131b8565b6020026020010151828260ff1681518110611611576116116131b8565b60209081029190910101526001016115d1565b5093505050505b949350505050565b61165a6040518060600160405280600060030b815260200160608152602001606081525090565b6040805180820182526004808252630c4c2e6d60e31b602083015291516334515cdb60e21b8152737109709ecfa91a80626ff3989d68f67f5b1dd12d92600091849163d145736c916116ae91869101613329565b600060405180830381865afa1580156116cb573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526116f39190810190612f15565b905060006117018683612255565b90506000846001600160a01b031663f45c1ce7836040518263ffffffff1660e01b81526004016117319190613369565b6000604051808303816000875af1158015611750573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261177891908101906133cd565b805190915060030b158015906117915750602081015151155b80156117a05750604081015151155b15610e6a57816000815181106117b8576117b86131b8565b602002602001015160405160200161061b9190613477565b606060006117dd85611df1565b90506117ec8161084686611df1565b156118b55760006118418261183b846118356118078a611df1565b6040805180820182526000808252602091820152815180830190925282518252918201519181019190915290565b9061238f565b906123f1565b905061186f611868604051806040016040528060018152602001600560f91b815250611df1565b8290611e1e565b156118a3576118a0611899604051806040016040528060018152602001600560f91b815250611df1565b8290612476565b90505b6118ac8161249c565b92505050610500565b82156118ce57848460405160200161061b929190613647565b5050604080516020810190915260008152610500565b606060006118f061088a565b6040805160ff808252612000820190925291925060009190816020015b606081526020019060019003908161190d5790505090506000604051806040016040528060038152602001620dce0f60eb1b81525082828061194e906132c0565b935060ff1681518110611963576119636131b8565b6020026020010181905250604051806040016040528060078152602001665e312e33322e3360c81b81525060405160200161199e91906136c2565b6040516020818303038152906040528282806119b9906132c0565b935060ff16815181106119ce576119ce6131b8565b60200260200101819052506040518060400160405280600881526020016776616c696461746560c01b815250828280611a06906132c0565b935060ff1681518110611a1b57611a1b6131b8565b602002602001018190525082604051602001611a3791906131fc565b604051602081830303815290604052828280611a52906132c0565b935060ff1681518110611a6757611a676131b8565b60200260200101819052506040518060400160405280600a8152602001690b4b58dbdb9d1c9858dd60b21b815250828280611aa1906132c0565b935060ff1681518110611ab657611ab66131b8565b6020026020010181905250611acb8784612505565b8282611ad6816132c0565b935060ff1681518110611aeb57611aeb6131b8565b602090810291909101015285515115611b855760408051808201909152600b81526a2d2d7265666572656e636560a81b60208201528282611b2b816132c0565b935060ff1681518110611b4057611b406131b8565b6020026020010181905250611b59866000015184612505565b8282611b64816132c0565b935060ff1681518110611b7957611b796131b8565b60200260200101819052505b856080015115611bf35760408051808201909152601881527f2d2d756e73616665536b697053746f72616765436865636b000000000000000060208201528282611bce816132c0565b935060ff1681518110611be357611be36131b8565b6020026020010181905250611c4e565b8415611c4e576040805180820190915260128152712d2d726571756972655265666572656e636560701b60208201528282611c2d816132c0565b935060ff1681518110611c4257611c426131b8565b60200260200101819052505b60408601515115611cda5760408051808201909152600d81526c2d2d756e73616665416c6c6f7760981b60208201528282611c88816132c0565b935060ff1681518110611c9d57611c9d6131b8565b60200260200101819052508560400151828280611cb9906132c0565b935060ff1681518110611cce57611cce6131b8565b60200260200101819052505b856060015115611d3b576040805180820190915260148152732d2d756e73616665416c6c6f7752656e616d657360601b60208201528282611d1a816132c0565b935060ff1681518110611d2f57611d2f6131b8565b60200260200101819052505b60008160ff1667ffffffffffffffff811115611d5957611d59612c0d565b604051908082528060200260200182016040528015611d8c57816020015b6060815260200190600190039081611d775790505b50905060005b8260ff168160ff161015611de557838160ff1681518110611db557611db56131b8565b6020026020010151828260ff1681518110611dd257611dd26131b8565b6020908102919091010152600101611d92565b50979650505050505050565b60408051808201825260008082526020918201528151808301909252825182529182019181019190915290565b6020808301518351835192840151600093611e3c9291849190612545565b14159392505050565b60606000611e5283611df1565b9050611e83611e7c604051806040016040528060048152602001630b9cdbdb60e21b815250611df1565b8290612161565b15611ebf57610500611eba611eb3604051806040016040528060048152602001630b9cdbdb60e21b815250611df1565b8390612656565b61249c565b611eeb611ee4604051806040016040528060018152602001601d60f91b815250611df1565b82906126e0565b600103611f4757611f17611899604051806040016040528060018152602001601d60f91b815250611df1565b50610500611eba611f40604051806040016040528060018152602001601d60f91b815250611df1565b8390612476565b611f70611e7c60405180604001604052806005815260200164173539b7b760d91b815250611df1565b15612013576000611fa282611f9d604051806040016040528060018152602001602f60f81b815250611df1565b61277a565b905060008160018351611fb59190613707565b81518110611fc557611fc56131b8565b6020026020010151905061200a611eba611ffb60405180604001604052806005815260200164173539b7b760d91b815250611df1565b61200484611df1565b90612656565b95945050505050565b8260405160200161061b919061371a565b6060600061203183611df1565b905061205b611e7c604051806040016040528060048152602001630b9cdbdb60e21b815250611df1565b15612069576105008161249c565b61208e611ee4604051806040016040528060018152602001601d60f91b815250611df1565b6001036120bd57610500611eba611f40604051806040016040528060018152602001601d60f91b815250611df1565b6120e6611e7c60405180604001604052806005815260200164173539b7b760d91b815250611df1565b1561201357600061211382611f9d604051806040016040528060018152602001602f60f81b815250611df1565b905060018151111561214f57806002825161212e9190613707565b8151811061213e5761213e6131b8565b602002602001015192505050919050565b508260405160200161061b919061371a565b805182516000911115612176575060006103f8565b8151835160208501516000929161218c916137d4565b6121969190613707565b9050826020015181036121ad5760019150506103f8565b82516020840151819020912014905092915050565b606060006121cf83612827565b600101905060008167ffffffffffffffff8111156121ef576121ef612c0d565b6040519080825280601f01601f191660200182016040528015612219576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a850494508461222357509392505050565b60608060005b84518110156122e05781858281518110612277576122776131b8565b6020026020010151604051602001612290929190612d15565b6040516020818303038152906040529150600185516122af9190613707565b81146122d857816040516020016122c691906137e7565b60405160208183030381529060405291505b60010161225b565b5060408051600380825260808201909252600091816020015b60608152602001906001900390816122f95790505090508381600081518110612324576123246131b8565b6020026020010181905250604051806040016040528060028152602001612d6360f01b8152508160018151811061235d5761235d6131b8565b6020026020010181905250818160028151811061237c5761237c6131b8565b6020908102919091010152949350505050565b604080518082019091526000808252602082015260006123c184600001518560200151856000015186602001516128ff565b90508360200151816123d39190613707565b845185906123e2908390613707565b90525060208401525090919050565b60408051808201909152600080825260208201528151835110156124165750816103f8565b602080830151908401516001911461243d5750815160208481015190840151829020919020145b801561246e57825184518590612454908390613707565b905250825160208501805161246a9083906137d4565b9052505b509192915050565b6040805180820190915260008082526020820152612495838383612a1f565b5092915050565b60606000826000015167ffffffffffffffff8111156124bd576124bd612c0d565b6040519080825280601f01601f1916602001820160405280156124e7576020820181803683370190505b50905060006020820190506124958185602001518660000151612aca565b60606000612513848461092a565b805160208083015160405193945061252d9390910161380c565b60405160208183030381529060405291505092915050565b60008085841161264c57602084116125f8576000841561259057600161256c866020613707565b612577906008613848565b612582906002613943565b61258c9190613707565b1990505b835181168561259f89896137d4565b6125a99190613707565b805190935082165b8181146125e3578784116125cb578794505050505061162b565b836125d58161394f565b9450508284511690506125b1565b6125ed87856137d4565b94505050505061162b565b8383206126058588613707565b61260f90876137d4565b91505b85821061264a578482208082036126375761262d86846137d4565b935050505061162b565b612642600184613707565b925050612612565b505b5092949350505050565b604080518082019091526000808252602082015281518351101561267b5750816103f8565b81518351602085015160009291612691916137d4565b61269b9190613707565b602084015190915060019082146126bc575082516020840151819020908220145b80156126d7578351855186906126d3908390613707565b9052505b50929392505050565b600080826000015161270485600001518660200151866000015187602001516128ff565b61270e91906137d4565b90505b8351602085015161272291906137d4565b8111612495578161273281613966565b925050826000015161276985602001518361274d9190613707565b86516127599190613707565b83866000015187602001516128ff565b61277391906137d4565b9050612711565b6060600061278884846126e0565b6127939060016137d4565b67ffffffffffffffff8111156127ab576127ab612c0d565b6040519080825280602002602001820160405280156127de57816020015b60608152602001906001900390816127c95790505b50905060005b815181101561281f576127fa611eba8686612476565b82828151811061280c5761280c6131b8565b60209081029190910101526001016127e4565b509392505050565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b83106128665772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310612892576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc1000083106128b057662386f26fc10000830492506010015b6305f5e10083106128c8576305f5e100830492506008015b61271083106128dc57612710830492506004015b606483106128ee576064830492506002015b600a83106103f85760010192915050565b60008381868511612a0a57602085116129b9576000851561294b576001612927876020613707565b612932906008613848565b61293d906002613943565b6129479190613707565b1990505b8451811660008761295c8b8b6137d4565b6129669190613707565b855190915083165b8281146129ab57818610612993576129868b8b6137d4565b965050505050505061162b565b8561299d81613966565b96505083865116905061296e565b85965050505050505061162b565b508383206000905b6129cb8689613707565b8211612a08578583208082036129e7578394505050505061162b565b6129f26001856137d4565b9350508180612a0090613966565b9250506129c1565b505b612a1487876137d4565b979650505050505050565b60408051808201909152600080825260208201526000612a5185600001518660200151866000015187602001516128ff565b602080870180519186019190915251909150612a6d9082613707565b835284516020860151612a8091906137d4565b8103612a8f5760008552612ac1565b83518351612a9d91906137d4565b85518690612aac908390613707565b9052508351612abb90826137d4565b60208601525b50909392505050565b60208110612b025781518352612ae16020846137d4565b9250612aee6020836137d4565b9150612afb602082613707565b9050612aca565b6000198115612b31576001612b18836020613707565b612b2490610100613943565b612b2e9190613707565b90505b9151835183169219169190911790915250565b600060208284031215612b5657600080fd5b81516001600160a01b038116811461050057600080fd5b600060208284031215612b7f57600080fd5b5051919050565b60005b83811015612ba1578181015183820152602001612b89565b50506000910152565b60008151808452612bc2816020860160208601612b86565b601f01601f19169290920160200192915050565b6020815260006105006020830184612baa565b6001600160a01b038316815260406020820181905260009061162b90830184612baa565b634e487b7160e01b600052604160045260246000fd5b6040516060810167ffffffffffffffff81118282101715612c4657612c46612c0d565b60405290565b600067ffffffffffffffff80841115612c6757612c67612c0d565b604051601f8501601f19908116603f01168101908282118183101715612c8f57612c8f612c0d565b81604052809350858152868686011115612ca857600080fd5b612cb6866020830187612b86565b5050509392505050565b600082601f830112612cd157600080fd5b61050083835160208501612c4c565b600060208284031215612cf257600080fd5b815167ffffffffffffffff811115612d0957600080fd5b6103f484828501612cc0565b60008351612d27818460208801612b86565b835190830190612d3b818360208801612b86565b01949350505050565b7f4661696c656420746f206465706c6f7920636f6e747261637420000000000000815260008351612d7c81601a850160208801612b86565b7f207573696e6720636f6e7374727563746f722064617461202200000000000000601a918401918201528351612db9816033840160208801612b86565b601160f91b60339290910191820152603401949350505050565b7f4661696c656420746f206465706c6f7920636f6e747261637420000000000000815260008351612e0b81601a850160208801612b86565b6101d160f51b601a918401918201528351612e2d81601c840160208801612b86565b01601c01949350505050565b7f4661696c656420746f2072756e2075706772616465207361666574792076616c815268034b230ba34b7b71d160bd1b602082015260008251612e83816029850160208701612b86565b9190910160290192915050565b7f55706772616465207361666574792076616c69646174696f6e206661696c65648152611d0560f11b602082015260008251612ed3816022850160208701612b86565b9190910160220192915050565b60408152600b60408201526a1193d55391149657d3d55560aa1b60608201526080602082015260006105006080830184612baa565b600060208284031215612f2757600080fd5b815167ffffffffffffffff811115612f3e57600080fd5b8201601f81018413612f4f57600080fd5b6103f484825160208401612c4c565b60008551612f70818460208a01612b86565b8083019050602f60f81b8082528651612f90816001850160208b01612b86565b600192019182018190528551612fad816002850160208a01612b86565b60029201918201528351612fc8816003840160208801612b86565b64173539b7b760d91b600392909101918201526008019695505050505050565b604081526000612ffb6040830184612baa565b828103602084015260048152630b985cdd60e21b60208201526040810191505092915050565b60006020828403121561303357600080fd5b8151801515811461050057600080fd5b7f436f756c64206e6f742066696e642041535420696e206172746966616374200081526000825161307b81601f850160208701612b86565b7f2e205365742060617374203d20747275656020696e20666f756e6472792e746f601f939091019283015250611b5b60f21b603f820152604101919050565b6040815260006130cd6040830184612baa565b8281036020840152601181527005cc2e6e85cc2c4e6ded8eae8caa0c2e8d607b1b60208201526040810191505092915050565b6040815260006131136040830184612baa565b8281036020840152600c81526b2e6173742e6c6963656e736560a01b60208201526040810191505092915050565b732e6d657461646174612e736f75726365732e5b2760601b815260008251613170816014850160208701612b86565b6b13ae9735b2b1b1b0b5991a9b60a11b6014939091019283015250602001919050565b6040815260006131a66040830185612baa565b82810360208401526104fc8185612baa565b634e487b7160e01b600052603260045260246000fd5b6000601160f91b80835283516131eb816001860160208801612b86565b600193019283015250600201919050565b6000825161320e818460208701612b86565b6a2f6275696c642d696e666f60a81b920191825250600b01919050565b7f436f756c64206e6f742066696e64206275696c642d696e666f2066696c65207781527f697468206d61746368696e6720736f7572636520636f6465206861736820666f60208201526a0391031b7b73a3930b1ba160ad1b60408201526000825161329d81604b850160208701612b86565b91909101604b0192915050565b634e487b7160e01b600052601160045260246000fd5b600060ff821660ff81036132d6576132d66132aa565b60010192915050565b7f406f70656e7a657070656c696e2f646566656e6465722d6465706c6f792d636c81526801a595b9d0b58db1a560be1b602082015260008251612e83816029850160208701612b86565b60408152601660408201527509ea08a9cb48aa0a08a98929cbe8482a690bea082a8960531b60608201526080602082015260006105006080830184612baa565b600060208083016020845280855180835260408601915060408160051b87010192506020870160005b828110156133c057603f198886030184526133ae858351612baa565b94509285019290850190600101613392565b5092979650505050505050565b6000602082840312156133df57600080fd5b815167ffffffffffffffff808211156133f757600080fd5b908301906060828603121561340b57600080fd5b613413612c23565b82518060030b811461342457600080fd5b815260208301518281111561343857600080fd5b61344487828601612cc0565b60208301525060408301518281111561345c57600080fd5b61346887828601612cc0565b60408301525095945050505050565b7f4661696c656420746f2072756e206261736820636f6d6d616e642077697468208152601160f91b6020820152600082516134b9816021850160208701612b86565b7f222e20496620796f7520617265207573696e672057696e646f77732c2073657460219390910192830152507f20746865204f50454e5a455050454c494e5f424153485f5041544820656e766960418201527f726f6e6d656e74207661726961626c6520746f207468652066756c6c7920717560618201527f616c69666965642070617468206f66207468652062617368206578656375746160818201527f626c652e20466f72206578616d706c652c20696620796f75206172652075736960a18201527f6e672047697420666f722057696e646f77732c206164642074686520666f6c6c60c18201527f6f77696e67206c696e6520696e20746865202e656e762066696c65206f66207960e18201527f6f75722070726f6a65637420287573696e6720666f727761726420736c6173686101018201527f6573293a0a4f50454e5a455050454c494e5f424153485f504154483d22433a2f6101218201527f50726f6772616d2046696c65732f4769742f62696e2f6261736822000000000061014182015261015c01919050565b7f4661696c656420746f2066696e64206c696e65207769746820707265666978208152602760f81b602082015260008351613689816021850160208801612b86565b6c0139034b71037baba383aba1d1609d1b60219184019182015283516136b681602e840160208801612b86565b01602e01949350505050565b7f406f70656e7a657070656c696e2f75706772616465732d636f726540000000008152600082516136fa81601c850160208701612b86565b91909101601c0192915050565b818103818111156103f8576103f86132aa565b6d021b7b73a3930b1ba103730b6b2960951b81526000825161374381600e850160208701612b86565b7f206d75737420626520696e2074686520666f726d6174204d79436f6e74726163600e9390910192830152507f742e736f6c3a4d79436f6e7472616374206f72204d79436f6e74726163742e73602e8201527f6f6c206f72206f75742f4d79436f6e74726163742e736f6c2f4d79436f6e7472604e8201526730b1ba173539b7b760c11b606e820152607601919050565b808201808211156103f8576103f86132aa565b600082516137f9818460208701612b86565b600160fd1b920191825250600101919050565b6000835161381e818460208801612b86565b601d60f91b908301908152835161383c816001840160208801612b86565b01600101949350505050565b80820281158282048414176103f8576103f86132aa565b600181815b8085111561389a578160001904821115613880576138806132aa565b8085161561388d57918102915b93841c9390800290613864565b509250929050565b6000826138b1575060016103f8565b816138be575060006103f8565b81600181146138d457600281146138de576138fa565b60019150506103f8565b60ff8411156138ef576138ef6132aa565b50506001821b6103f8565b5060208310610133831016604e8410600b841016171561391d575081810a6103f8565b613927838361385f565b806000190482111561393b5761393b6132aa565b029392505050565b600061050083836138a2565b60008161395e5761395e6132aa565b506000190190565b600060018201613978576139786132aa565b506001019056fea264697066735822122038889c129a1120541618855b868adfc5d08d5f58ca552631f200bc328143200f64736f6c63430008190033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0xC DUP1 SLOAD PUSH3 0xFF00FF NOT AND PUSH3 0x10001 OR SWAP1 SSTORE CALLVALUE DUP1 ISZERO PUSH1 0x20 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x39B5 DUP1 PUSH2 0x30 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x41 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xA9254E4 EQ PUSH2 0x46 JUMPI DUP1 PUSH4 0xC0406226 EQ PUSH2 0x50 JUMPI DUP1 PUSH4 0xF8CCBF47 EQ PUSH2 0x58 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4E PUSH2 0x7F JUMP JUMPDEST STOP JUMPDEST PUSH2 0x4E PUSH2 0x1CD JUMP JUMPDEST PUSH1 0xC SLOAD PUSH2 0x6B SWAP1 PUSH3 0x10000 SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x350D56BF PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xB PUSH1 0x24 DUP3 ADD MSTORE PUSH11 0x474F565F41444452455353 PUSH1 0xA8 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH20 0x7109709ECFA91A80626FF3989D68F67F5B1DD12D SWAP1 PUSH4 0x350D56BF SWAP1 PUSH1 0x64 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xEA JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x10E SWAP2 SWAP1 PUSH2 0x2B44 JUMP JUMPDEST PUSH1 0xC DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND PUSH4 0x1000000 MUL PUSH4 0x1000000 PUSH1 0x1 PUSH1 0xB8 SHL SUB NOT SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH4 0xC1978D1F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xB PUSH1 0x24 DUP3 ADD MSTORE PUSH11 0x505249564154455F4B4559 PUSH1 0xA8 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH20 0x7109709ECFA91A80626FF3989D68F67F5B1DD12D SWAP1 PUSH4 0xC1978D1F SWAP1 PUSH1 0x64 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1A4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1C8 SWAP2 SWAP1 PUSH2 0x2B6D JUMP JUMPDEST PUSH1 0xE SSTORE JUMP JUMPDEST PUSH1 0xE SLOAD PUSH1 0x40 MLOAD PUSH4 0xCE817D47 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH20 0x7109709ECFA91A80626FF3989D68F67F5B1DD12D SWAP1 PUSH4 0xCE817D47 SWAP1 PUSH1 0x24 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x21E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x232 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD DUP3 MSTORE PUSH1 0xC DUP1 DUP3 MSTORE PUSH12 0x169192551BDAD95B8B9CDBDB PUSH1 0xA2 SHL PUSH1 0x20 DUP4 ADD MSTORE SLOAD SWAP2 MLOAD PUSH4 0x1000000 SWAP1 SWAP3 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x24 DUP4 ADD MSTORE PUSH2 0x2A9 SWAP4 POP SWAP2 POP PUSH1 0x44 ADD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0x26DCFF15 PUSH1 0xE0 SHL OR SWAP1 MSTORE PUSH2 0x388 JUMP JUMPDEST PUSH1 0xD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x12 DUP2 MSTORE PUSH18 0x2A37B5B2B71030B2323932B9B99034B99D1 PUSH1 0x75 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x2FB SWAP1 PUSH2 0x3FE JUMP JUMPDEST PUSH1 0xD SLOAD PUSH2 0x310 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x444 JUMP JUMPDEST PUSH32 0x885CB69240A935D632D79C317109709ECFA91A80626FF3989D68F67F5B1DD12D PUSH1 0x0 SHR PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x76EADD36 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x36E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x382 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3E9 PUSH1 0x40 DUP1 MLOAD PUSH1 0xE0 DUP2 ADD DUP3 MSTORE PUSH1 0x60 DUP1 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 ADD DUP3 SWAP1 MSTORE DUP3 DUP5 ADD DUP3 SWAP1 MSTORE PUSH1 0x0 DUP3 DUP5 ADD DUP2 SWAP1 MSTORE PUSH1 0x80 DUP1 DUP6 ADD DUP3 SWAP1 MSTORE PUSH1 0xA0 DUP1 DUP7 ADD DUP4 SWAP1 MSTORE DUP7 MLOAD SWAP1 DUP2 ADD DUP8 MSTORE DUP3 DUP2 MSTORE SWAP3 DUP4 ADD DUP3 SWAP1 MSTORE SWAP5 DUP3 ADD DUP4 SWAP1 MSTORE DUP2 DUP4 ADD MSTORE SWAP3 DUP4 ADD MSTORE SWAP1 PUSH1 0xC0 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH2 0x3F4 DUP5 DUP5 DUP4 PUSH2 0x48C JUMP JUMPDEST SWAP2 POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x441 DUP2 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x412 SWAP2 SWAP1 PUSH2 0x2BD6 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0x104C13EB PUSH1 0xE2 SHL OR SWAP1 MSTORE PUSH2 0x507 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH2 0x441 SWAP1 PUSH1 0x44 ADD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0x161765E1 PUSH1 0xE1 SHL OR SWAP1 MSTORE PUSH2 0x507 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x499 DUP6 DUP5 PUSH2 0x510 JUMP JUMPDEST SWAP1 POP PUSH2 0x4FC PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1D DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x4552433139363750726F78792E736F6C3A4552433139363750726F7879000000 DUP2 MSTORE POP DUP3 DUP7 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x4E7 SWAP3 SWAP2 SWAP1 PUSH2 0x2BE9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP6 PUSH2 0x527 JUMP JUMPDEST SWAP2 POP POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x441 DUP2 PUSH2 0x653 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x51C DUP4 DUP4 PUSH2 0x674 JUMP JUMPDEST PUSH2 0x500 DUP4 DUP4 PUSH1 0x20 ADD MLOAD DUP5 JUMPDEST PUSH1 0xC0 DUP2 ADD MLOAD MLOAD PUSH1 0x0 SWAP1 ISZERO PUSH2 0x54B JUMPI PUSH2 0x544 DUP5 DUP5 DUP5 PUSH1 0xC0 ADD MLOAD PUSH2 0x684 JUMP JUMPDEST SWAP1 POP PUSH2 0x500 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x8D1CC925 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 SWAP1 PUSH20 0x7109709ECFA91A80626FF3989D68F67F5B1DD12D SWAP1 PUSH4 0x8D1CC925 SWAP1 PUSH2 0x585 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x2BD6 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x5A2 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x5CA SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x2CE0 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x5F8 DUP3 DUP7 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x5E4 SWAP3 SWAP2 SWAP1 PUSH2 0x2D15 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH2 0x7C0 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x64A JUMPI DUP6 DUP6 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x61B SWAP3 SWAP2 SWAP1 PUSH2 0x2D44 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP1 DUP3 SWAP1 MSTORE PUSH3 0x461BCD PUSH1 0xE5 SHL DUP3 MSTORE PUSH2 0x641 SWAP2 PUSH1 0x4 ADD PUSH2 0x2BD6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST SWAP2 POP PUSH2 0x500 SWAP1 POP JUMP JUMPDEST DUP1 MLOAD PUSH11 0x636F6E736F6C652E6C6F67 PUSH1 0x20 DUP4 ADD PUSH1 0x0 DUP1 DUP5 DUP4 DUP6 GAS STATICCALL POP POP POP POP POP JUMP JUMPDEST PUSH2 0x680 DUP3 DUP3 PUSH1 0x0 PUSH2 0x7D3 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x68F PUSH2 0x88A JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x69D DUP7 DUP4 PUSH2 0x92A JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x6B4 DUP3 PUSH1 0x60 ADD MLOAD DUP4 PUSH1 0x20 ADD MLOAD DUP6 PUSH2 0xCE3 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x6C4 DUP4 DUP4 DUP10 DUP10 PUSH2 0xE74 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x6D1 DUP3 PUSH2 0x1633 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD MLOAD DUP2 MLOAD SWAP2 SWAP3 POP SWAP1 PUSH1 0x3 SIGNEXTEND ISZERO PUSH2 0x6FB JUMPI DUP10 DUP3 PUSH1 0x40 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x61B SWAP3 SWAP2 SWAP1 PUSH2 0x2DD3 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x736 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x15 DUP2 MSTORE PUSH1 0x20 ADD PUSH21 0x2232B83637BCB2B2103A379030B2323932B9B99D1 PUSH1 0x5D SHL DUP2 MSTORE POP DUP4 PUSH1 0x1 PUSH2 0x17D0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xC6CE059D PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 SWAP2 POP PUSH20 0x7109709ECFA91A80626FF3989D68F67F5B1DD12D SWAP1 PUSH4 0xC6CE059D SWAP1 PUSH2 0x770 SWAP1 DUP5 SWAP1 PUSH1 0x4 ADD PUSH2 0x2BD6 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x78D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x7B1 SWAP2 SWAP1 PUSH2 0x2B44 JUMP JUMPDEST SWAP12 SWAP11 POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 MLOAD PUSH1 0x20 DUP5 ADD PUSH1 0x0 CREATE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP2 PUSH1 0xA0 ADD MLOAD ISZERO PUSH2 0x7E2 JUMPI POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7EF DUP5 DUP5 DUP5 PUSH2 0x18E4 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x7FC DUP3 PUSH2 0x1633 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD MLOAD DUP2 MLOAD SWAP2 SWAP3 POP SWAP1 PUSH1 0x3 SIGNEXTEND ISZERO DUP1 ISZERO PUSH2 0x84C JUMPI POP PUSH2 0x84C PUSH2 0x83D PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x7 DUP2 MSTORE PUSH1 0x20 ADD PUSH7 0x53554343455353 PUSH1 0xC8 SHL DUP2 MSTORE POP PUSH2 0x1DF1 JUMP JUMPDEST PUSH2 0x846 DUP4 PUSH2 0x1DF1 JUMP JUMPDEST SWAP1 PUSH2 0x1E1E JUMP JUMPDEST ISZERO PUSH2 0x859 JUMPI POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MLOAD MLOAD ISZERO PUSH2 0x879 JUMPI DUP2 PUSH1 0x40 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x61B SWAP2 SWAP1 PUSH2 0x2E39 JUMP JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x61B SWAP2 SWAP1 PUSH2 0x2E90 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD DUP3 MSTORE PUSH1 0x3 DUP2 MSTORE PUSH3 0x1BDD5D PUSH1 0xEA SHL PUSH1 0x20 DUP3 ADD MSTORE SWAP1 MLOAD PUSH4 0x34515CDB PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x60 SWAP2 PUSH20 0x7109709ECFA91A80626FF3989D68F67F5B1DD12D SWAP2 DUP3 SWAP1 PUSH4 0xD145736C SWAP1 PUSH2 0x8DE SWAP1 DUP5 SWAP1 PUSH1 0x4 ADD PUSH2 0x2EE0 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x8FB JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x923 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x2F15 JUMP JUMPDEST SWAP3 POP POP POP SWAP1 JUMP JUMPDEST PUSH2 0x95C PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH20 0x7109709ECFA91A80626FF3989D68F67F5B1DD12D SWAP1 POP PUSH2 0x9A7 PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH2 0x9B0 DUP6 PUSH2 0x1E45 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x9C0 DUP7 PUSH2 0x2024 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD930A0E6 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xA02 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0xA2A SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x2F15 JUMP JUMPDEST DUP7 DUP4 DUP6 PUSH1 0x20 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xA44 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2F5E JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP1 DUP3 SWAP1 MSTORE PUSH4 0x60F9BB11 PUSH1 0xE0 SHL DUP3 MSTORE SWAP2 POP PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND SWAP1 PUSH4 0x60F9BB11 SWAP1 PUSH2 0xA83 SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x2BD6 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xAA0 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0xAC8 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x2F15 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x6DA11AFB PUSH1 0xE1 SHL DUP2 MSTORE SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND SWAP1 PUSH4 0xDB4235F6 SWAP1 PUSH2 0xAF7 SWAP1 DUP5 SWAP1 PUSH1 0x4 ADD PUSH2 0x2FE8 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xB14 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xB38 SWAP2 SWAP1 PUSH2 0x3021 JUMP JUMPDEST PUSH2 0xB4D JUMPI DUP2 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x61B SWAP2 SWAP1 PUSH2 0x3043 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x9389F59 PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND SWAP1 PUSH4 0x49C4FAC8 SWAP1 PUSH2 0xB79 SWAP1 DUP5 SWAP1 PUSH1 0x4 ADD PUSH2 0x30BA JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xB96 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0xBBE SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x2F15 JUMP JUMPDEST DUP5 MSTORE PUSH1 0x40 MLOAD PUSH4 0x9389F59 PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND SWAP1 PUSH4 0x49C4FAC8 SWAP1 PUSH2 0xBEC SWAP1 DUP5 SWAP1 PUSH1 0x4 ADD PUSH2 0x3100 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xC09 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0xC31 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x2F15 JUMP JUMPDEST DUP5 PUSH1 0x40 ADD DUP2 SWAP1 MSTORE POP DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x49C4FAC8 DUP3 DUP7 PUSH1 0x0 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xC5E SWAP2 SWAP1 PUSH2 0x3141 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC8A SWAP3 SWAP2 SWAP1 PUSH2 0x3193 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xCA7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0xCCF SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x2F15 JUMP JUMPDEST PUSH1 0x60 DUP6 ADD MSTORE POP PUSH1 0x80 DUP4 ADD MSTORE POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x4 DUP1 DUP3 MSTORE PUSH1 0xA0 DUP3 ADD SWAP1 SWAP3 MSTORE PUSH1 0x60 SWAP2 PUSH1 0x0 SWAP2 SWAP1 DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0xCFF JUMPI SWAP1 POP POP SWAP1 POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x4 DUP2 MSTORE PUSH1 0x20 ADD PUSH4 0x6772657 PUSH1 0xE4 SHL DUP2 MSTORE POP DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xD46 JUMPI PUSH2 0xD46 PUSH2 0x31B8 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x3 DUP2 MSTORE PUSH1 0x20 ADD PUSH3 0xB5C9B PUSH1 0xEA SHL DUP2 MSTORE POP DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0xD80 JUMPI PUSH2 0xD80 PUSH2 0x31B8 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP5 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xD9C SWAP2 SWAP1 PUSH2 0x31CE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 PUSH1 0x2 DUP2 MLOAD DUP2 LT PUSH2 0xDBE JUMPI PUSH2 0xDBE PUSH2 0x31B8 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xDDA SWAP2 SWAP1 PUSH2 0x31FC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 PUSH1 0x3 DUP2 MLOAD DUP2 LT PUSH2 0xDFC JUMPI PUSH2 0xDFC PUSH2 0x31B8 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP PUSH1 0x0 PUSH2 0xE12 DUP3 PUSH2 0x1633 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x20 ADD MLOAD SWAP1 POP PUSH2 0xE55 PUSH2 0xE46 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x5 DUP2 MSTORE PUSH1 0x20 ADD PUSH5 0x173539B7B7 PUSH1 0xD9 SHL DUP2 MSTORE POP PUSH2 0x1DF1 JUMP JUMPDEST PUSH2 0xE4F DUP4 PUSH2 0x1DF1 JUMP JUMPDEST SWAP1 PUSH2 0x2161 JUMP JUMPDEST PUSH2 0xE6A JUMPI DUP6 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x61B SWAP2 SWAP1 PUSH2 0x322B JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xFF DUP1 DUP3 MSTORE PUSH2 0x2000 DUP3 ADD SWAP1 SWAP3 MSTORE PUSH1 0x60 SWAP2 PUSH20 0x7109709ECFA91A80626FF3989D68F67F5B1DD12D SWAP2 PUSH1 0x0 SWAP2 DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0xEA6 JUMPI SWAP1 POP POP SWAP1 POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x3 DUP2 MSTORE PUSH1 0x20 ADD PUSH3 0xDCE0F PUSH1 0xEB SHL DUP2 MSTORE POP DUP3 DUP3 DUP1 PUSH2 0xEE7 SWAP1 PUSH2 0x32C0 JUMP JUMPDEST SWAP4 POP PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0xEFC JUMPI PUSH2 0xEFC PUSH2 0x31B8 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xD DUP2 MSTORE PUSH1 0x20 ADD PUSH13 0x302E302E312D616C7068612E35 PUSH1 0x98 SHL DUP2 MSTORE POP PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xF3D SWAP2 SWAP1 PUSH2 0x32DF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP3 DUP3 DUP1 PUSH2 0xF58 SWAP1 PUSH2 0x32C0 JUMP JUMPDEST SWAP4 POP PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0xF6D JUMPI PUSH2 0xF6D PUSH2 0x31B8 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x6 DUP2 MSTORE PUSH1 0x20 ADD PUSH6 0x6465706C6F79 PUSH1 0xD0 SHL DUP2 MSTORE POP DUP3 DUP3 DUP1 PUSH2 0xFA3 SWAP1 PUSH2 0x32C0 JUMP JUMPDEST SWAP4 POP PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0xFB8 JUMPI PUSH2 0xFB8 PUSH2 0x31B8 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xE DUP2 MSTORE PUSH1 0x20 ADD PUSH14 0x2D2D636F6E74726163744E616D65 PUSH1 0x90 SHL DUP2 MSTORE POP DUP3 DUP3 DUP1 PUSH2 0xFF6 SWAP1 PUSH2 0x32C0 JUMP JUMPDEST SWAP4 POP PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x100B JUMPI PUSH2 0x100B PUSH2 0x31B8 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP8 PUSH1 0x20 ADD MLOAD DUP3 DUP3 DUP1 PUSH2 0x1027 SWAP1 PUSH2 0x32C0 JUMP JUMPDEST SWAP4 POP PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x103C JUMPI PUSH2 0x103C PUSH2 0x31B8 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xE DUP2 MSTORE PUSH1 0x20 ADD PUSH14 0x5A5AC6DEDCE8E4C2C6E8A0C2E8D PUSH1 0x93 SHL DUP2 MSTORE POP DUP3 DUP3 DUP1 PUSH2 0x107A SWAP1 PUSH2 0x32C0 JUMP JUMPDEST SWAP4 POP PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x108F JUMPI PUSH2 0x108F PUSH2 0x31B8 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE DUP8 MLOAD DUP3 DUP3 PUSH2 0x10A7 DUP2 PUSH2 0x32C0 JUMP JUMPDEST SWAP4 POP PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x10BC JUMPI PUSH2 0x10BC PUSH2 0x31B8 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x9 DUP2 MSTORE PUSH1 0x20 ADD PUSH9 0xB4B58DA185A5B9259 PUSH1 0xBA SHL DUP2 MSTORE POP DUP3 DUP3 DUP1 PUSH2 0x10F5 SWAP1 PUSH2 0x32C0 JUMP JUMPDEST SWAP4 POP PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x110A JUMPI PUSH2 0x110A PUSH2 0x31B8 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP PUSH2 0x111E CHAINID PUSH2 0x21C2 JUMP JUMPDEST DUP3 DUP3 PUSH2 0x1129 DUP2 PUSH2 0x32C0 JUMP JUMPDEST SWAP4 POP PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x113E JUMPI PUSH2 0x113E PUSH2 0x31B8 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xF DUP2 MSTORE PUSH1 0x20 ADD PUSH15 0x2D2D6275696C64496E666F46696C65 PUSH1 0x88 SHL DUP2 MSTORE POP DUP3 DUP3 DUP1 PUSH2 0x117D SWAP1 PUSH2 0x32C0 JUMP JUMPDEST SWAP4 POP PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x1192 JUMPI PUSH2 0x1192 PUSH2 0x31B8 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP7 DUP3 DUP3 DUP1 PUSH2 0x11AA SWAP1 PUSH2 0x32C0 JUMP JUMPDEST SWAP4 POP PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x11BF JUMPI PUSH2 0x11BF PUSH2 0x31B8 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xD DUP2 MSTORE PUSH1 0x20 ADD PUSH13 0x2D2D6C6963656E736554797065 PUSH1 0x98 SHL DUP2 MSTORE POP DUP3 DUP3 DUP1 PUSH2 0x11FC SWAP1 PUSH2 0x32C0 JUMP JUMPDEST SWAP4 POP PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x1211 JUMPI PUSH2 0x1211 PUSH2 0x31B8 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP8 PUSH1 0x40 ADD MLOAD DUP3 DUP3 DUP1 PUSH2 0x122D SWAP1 PUSH2 0x32C0 JUMP JUMPDEST SWAP4 POP PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x1242 JUMPI PUSH2 0x1242 PUSH2 0x31B8 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE DUP6 MLOAD ISZERO PUSH2 0x1348 JUMPI PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x15 DUP2 MSTORE PUSH21 0x2D2D636F6E7374727563746F7242797465636F6465 PUSH1 0x58 SHL PUSH1 0x20 DUP3 ADD MSTORE DUP3 DUP3 PUSH2 0x128B DUP2 PUSH2 0x32C0 JUMP JUMPDEST SWAP4 POP PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x12A0 JUMPI PUSH2 0x12A0 PUSH2 0x31B8 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x40 MLOAD PUSH4 0x71AAD10D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x71AAD10D SWAP1 PUSH2 0x12D7 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x2BD6 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x12F4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x131C SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x2F15 JUMP JUMPDEST DUP3 DUP3 PUSH2 0x1327 DUP2 PUSH2 0x32C0 JUMP JUMPDEST SWAP4 POP PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x133C JUMPI PUSH2 0x133C PUSH2 0x31B8 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP JUMPDEST DUP5 PUSH1 0x20 ADD MLOAD ISZERO PUSH2 0x13F1 JUMPI PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x12 DUP2 MSTORE PUSH18 0x2D2D766572696679536F75726365436F6465 PUSH1 0x70 SHL PUSH1 0x20 DUP3 ADD MSTORE DUP3 DUP3 PUSH2 0x1386 DUP2 PUSH2 0x32C0 JUMP JUMPDEST SWAP4 POP PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x139B JUMPI PUSH2 0x139B PUSH2 0x31B8 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x5 DUP2 MSTORE PUSH1 0x20 ADD PUSH5 0x66616C7365 PUSH1 0xD8 SHL DUP2 MSTORE POP DUP3 DUP3 DUP1 PUSH2 0x13D0 SWAP1 PUSH2 0x32C0 JUMP JUMPDEST SWAP4 POP PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x13E5 JUMPI PUSH2 0x13E5 PUSH2 0x31B8 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP JUMPDEST PUSH2 0x1406 PUSH2 0x1401 DUP7 PUSH1 0x40 ADD MLOAD PUSH2 0x1DF1 JUMP JUMPDEST MLOAD ISZERO SWAP1 JUMP JUMPDEST PUSH2 0x1489 JUMPI PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0xB DUP2 MSTORE PUSH11 0xB4B5C995B185E595C9259 PUSH1 0xAA SHL PUSH1 0x20 DUP3 ADD MSTORE DUP3 DUP3 PUSH2 0x1437 DUP2 PUSH2 0x32C0 JUMP JUMPDEST SWAP4 POP PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x144C JUMPI PUSH2 0x144C PUSH2 0x31B8 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP5 PUSH1 0x40 ADD MLOAD DUP3 DUP3 DUP1 PUSH2 0x1468 SWAP1 PUSH2 0x32C0 JUMP JUMPDEST SWAP4 POP PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x147D JUMPI PUSH2 0x147D PUSH2 0x31B8 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP JUMPDEST PUSH1 0x60 DUP6 ADD MLOAD ISZERO PUSH2 0x157A JUMPI PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x6 DUP2 MSTORE PUSH6 0xB4B5CD85B1D PUSH1 0xD2 SHL PUSH1 0x20 DUP3 ADD MSTORE DUP3 DUP3 PUSH2 0x14BB DUP2 PUSH2 0x32C0 JUMP JUMPDEST SWAP4 POP PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x14D0 JUMPI PUSH2 0x14D0 PUSH2 0x31B8 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x60 DUP6 ADD MLOAD PUSH1 0x40 MLOAD PUSH4 0x1623433D PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0xB11A19E8 SWAP1 PUSH1 0x24 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1526 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x154E SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x2F15 JUMP JUMPDEST DUP3 DUP3 PUSH2 0x1559 DUP2 PUSH2 0x32C0 JUMP JUMPDEST SWAP4 POP PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x156E JUMPI PUSH2 0x156E PUSH2 0x31B8 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0xFF AND PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1598 JUMPI PUSH2 0x1598 PUSH2 0x2C0D JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x15CB JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x15B6 JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 PUSH1 0xFF AND DUP2 PUSH1 0xFF AND LT ISZERO PUSH2 0x1624 JUMPI DUP4 DUP2 PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x15F4 JUMPI PUSH2 0x15F4 PUSH2 0x31B8 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP3 DUP3 PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x1611 JUMPI PUSH2 0x1611 PUSH2 0x31B8 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x15D1 JUMP JUMPDEST POP SWAP4 POP POP POP POP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0x165A PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 PUSH1 0x3 SIGNEXTEND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD DUP3 MSTORE PUSH1 0x4 DUP1 DUP3 MSTORE PUSH4 0xC4C2E6D PUSH1 0xE3 SHL PUSH1 0x20 DUP4 ADD MSTORE SWAP2 MLOAD PUSH4 0x34515CDB PUSH1 0xE2 SHL DUP2 MSTORE PUSH20 0x7109709ECFA91A80626FF3989D68F67F5B1DD12D SWAP3 PUSH1 0x0 SWAP2 DUP5 SWAP2 PUSH4 0xD145736C SWAP2 PUSH2 0x16AE SWAP2 DUP7 SWAP2 ADD PUSH2 0x3329 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x16CB JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x16F3 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x2F15 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1701 DUP7 DUP4 PUSH2 0x2255 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xF45C1CE7 DUP4 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1731 SWAP2 SWAP1 PUSH2 0x3369 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1750 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x1778 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x33CD JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP2 POP PUSH1 0x3 SIGNEXTEND ISZERO DUP1 ISZERO SWAP1 PUSH2 0x1791 JUMPI POP PUSH1 0x20 DUP2 ADD MLOAD MLOAD ISZERO JUMPDEST DUP1 ISZERO PUSH2 0x17A0 JUMPI POP PUSH1 0x40 DUP2 ADD MLOAD MLOAD ISZERO JUMPDEST ISZERO PUSH2 0xE6A JUMPI DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x17B8 JUMPI PUSH2 0x17B8 PUSH2 0x31B8 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x61B SWAP2 SWAP1 PUSH2 0x3477 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x17DD DUP6 PUSH2 0x1DF1 JUMP JUMPDEST SWAP1 POP PUSH2 0x17EC DUP2 PUSH2 0x846 DUP7 PUSH2 0x1DF1 JUMP JUMPDEST ISZERO PUSH2 0x18B5 JUMPI PUSH1 0x0 PUSH2 0x1841 DUP3 PUSH2 0x183B DUP5 PUSH2 0x1835 PUSH2 0x1807 DUP11 PUSH2 0x1DF1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 SWAP2 DUP3 ADD MSTORE DUP2 MLOAD DUP1 DUP4 ADD SWAP1 SWAP3 MSTORE DUP3 MLOAD DUP3 MSTORE SWAP2 DUP3 ADD MLOAD SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x238F JUMP JUMPDEST SWAP1 PUSH2 0x23F1 JUMP JUMPDEST SWAP1 POP PUSH2 0x186F PUSH2 0x1868 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x5 PUSH1 0xF9 SHL DUP2 MSTORE POP PUSH2 0x1DF1 JUMP JUMPDEST DUP3 SWAP1 PUSH2 0x1E1E JUMP JUMPDEST ISZERO PUSH2 0x18A3 JUMPI PUSH2 0x18A0 PUSH2 0x1899 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x5 PUSH1 0xF9 SHL DUP2 MSTORE POP PUSH2 0x1DF1 JUMP JUMPDEST DUP3 SWAP1 PUSH2 0x2476 JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH2 0x18AC DUP2 PUSH2 0x249C JUMP JUMPDEST SWAP3 POP POP POP PUSH2 0x500 JUMP JUMPDEST DUP3 ISZERO PUSH2 0x18CE JUMPI DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x61B SWAP3 SWAP2 SWAP1 PUSH2 0x3647 JUMP JUMPDEST POP POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP2 MSTORE PUSH2 0x500 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x18F0 PUSH2 0x88A JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xFF DUP1 DUP3 MSTORE PUSH2 0x2000 DUP3 ADD SWAP1 SWAP3 MSTORE SWAP2 SWAP3 POP PUSH1 0x0 SWAP2 SWAP1 DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x190D JUMPI SWAP1 POP POP SWAP1 POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x3 DUP2 MSTORE PUSH1 0x20 ADD PUSH3 0xDCE0F PUSH1 0xEB SHL DUP2 MSTORE POP DUP3 DUP3 DUP1 PUSH2 0x194E SWAP1 PUSH2 0x32C0 JUMP JUMPDEST SWAP4 POP PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x1963 JUMPI PUSH2 0x1963 PUSH2 0x31B8 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x7 DUP2 MSTORE PUSH1 0x20 ADD PUSH7 0x5E312E33322E33 PUSH1 0xC8 SHL DUP2 MSTORE POP PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x199E SWAP2 SWAP1 PUSH2 0x36C2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP3 DUP3 DUP1 PUSH2 0x19B9 SWAP1 PUSH2 0x32C0 JUMP JUMPDEST SWAP4 POP PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x19CE JUMPI PUSH2 0x19CE PUSH2 0x31B8 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x8 DUP2 MSTORE PUSH1 0x20 ADD PUSH8 0x76616C6964617465 PUSH1 0xC0 SHL DUP2 MSTORE POP DUP3 DUP3 DUP1 PUSH2 0x1A06 SWAP1 PUSH2 0x32C0 JUMP JUMPDEST SWAP4 POP PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x1A1B JUMPI PUSH2 0x1A1B PUSH2 0x31B8 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1A37 SWAP2 SWAP1 PUSH2 0x31FC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP3 DUP3 DUP1 PUSH2 0x1A52 SWAP1 PUSH2 0x32C0 JUMP JUMPDEST SWAP4 POP PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x1A67 JUMPI PUSH2 0x1A67 PUSH2 0x31B8 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xA DUP2 MSTORE PUSH1 0x20 ADD PUSH10 0xB4B58DBDB9D1C9858DD PUSH1 0xB2 SHL DUP2 MSTORE POP DUP3 DUP3 DUP1 PUSH2 0x1AA1 SWAP1 PUSH2 0x32C0 JUMP JUMPDEST SWAP4 POP PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x1AB6 JUMPI PUSH2 0x1AB6 PUSH2 0x31B8 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP PUSH2 0x1ACB DUP8 DUP5 PUSH2 0x2505 JUMP JUMPDEST DUP3 DUP3 PUSH2 0x1AD6 DUP2 PUSH2 0x32C0 JUMP JUMPDEST SWAP4 POP PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x1AEB JUMPI PUSH2 0x1AEB PUSH2 0x31B8 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE DUP6 MLOAD MLOAD ISZERO PUSH2 0x1B85 JUMPI PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0xB DUP2 MSTORE PUSH11 0x2D2D7265666572656E6365 PUSH1 0xA8 SHL PUSH1 0x20 DUP3 ADD MSTORE DUP3 DUP3 PUSH2 0x1B2B DUP2 PUSH2 0x32C0 JUMP JUMPDEST SWAP4 POP PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x1B40 JUMPI PUSH2 0x1B40 PUSH2 0x31B8 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP PUSH2 0x1B59 DUP7 PUSH1 0x0 ADD MLOAD DUP5 PUSH2 0x2505 JUMP JUMPDEST DUP3 DUP3 PUSH2 0x1B64 DUP2 PUSH2 0x32C0 JUMP JUMPDEST SWAP4 POP PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x1B79 JUMPI PUSH2 0x1B79 PUSH2 0x31B8 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP JUMPDEST DUP6 PUSH1 0x80 ADD MLOAD ISZERO PUSH2 0x1BF3 JUMPI PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x18 DUP2 MSTORE PUSH32 0x2D2D756E73616665536B697053746F72616765436865636B0000000000000000 PUSH1 0x20 DUP3 ADD MSTORE DUP3 DUP3 PUSH2 0x1BCE DUP2 PUSH2 0x32C0 JUMP JUMPDEST SWAP4 POP PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x1BE3 JUMPI PUSH2 0x1BE3 PUSH2 0x31B8 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP PUSH2 0x1C4E JUMP JUMPDEST DUP5 ISZERO PUSH2 0x1C4E JUMPI PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x12 DUP2 MSTORE PUSH18 0x2D2D726571756972655265666572656E6365 PUSH1 0x70 SHL PUSH1 0x20 DUP3 ADD MSTORE DUP3 DUP3 PUSH2 0x1C2D DUP2 PUSH2 0x32C0 JUMP JUMPDEST SWAP4 POP PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x1C42 JUMPI PUSH2 0x1C42 PUSH2 0x31B8 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP JUMPDEST PUSH1 0x40 DUP7 ADD MLOAD MLOAD ISZERO PUSH2 0x1CDA JUMPI PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0xD DUP2 MSTORE PUSH13 0x2D2D756E73616665416C6C6F77 PUSH1 0x98 SHL PUSH1 0x20 DUP3 ADD MSTORE DUP3 DUP3 PUSH2 0x1C88 DUP2 PUSH2 0x32C0 JUMP JUMPDEST SWAP4 POP PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x1C9D JUMPI PUSH2 0x1C9D PUSH2 0x31B8 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP6 PUSH1 0x40 ADD MLOAD DUP3 DUP3 DUP1 PUSH2 0x1CB9 SWAP1 PUSH2 0x32C0 JUMP JUMPDEST SWAP4 POP PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x1CCE JUMPI PUSH2 0x1CCE PUSH2 0x31B8 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP JUMPDEST DUP6 PUSH1 0x60 ADD MLOAD ISZERO PUSH2 0x1D3B JUMPI PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x14 DUP2 MSTORE PUSH20 0x2D2D756E73616665416C6C6F7752656E616D6573 PUSH1 0x60 SHL PUSH1 0x20 DUP3 ADD MSTORE DUP3 DUP3 PUSH2 0x1D1A DUP2 PUSH2 0x32C0 JUMP JUMPDEST SWAP4 POP PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x1D2F JUMPI PUSH2 0x1D2F PUSH2 0x31B8 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0xFF AND PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1D59 JUMPI PUSH2 0x1D59 PUSH2 0x2C0D JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1D8C JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x1D77 JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 PUSH1 0xFF AND DUP2 PUSH1 0xFF AND LT ISZERO PUSH2 0x1DE5 JUMPI DUP4 DUP2 PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x1DB5 JUMPI PUSH2 0x1DB5 PUSH2 0x31B8 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP3 DUP3 PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x1DD2 JUMPI PUSH2 0x1DD2 PUSH2 0x31B8 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x1D92 JUMP JUMPDEST POP SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 SWAP2 DUP3 ADD MSTORE DUP2 MLOAD DUP1 DUP4 ADD SWAP1 SWAP3 MSTORE DUP3 MLOAD DUP3 MSTORE SWAP2 DUP3 ADD SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP4 ADD MLOAD DUP4 MLOAD DUP4 MLOAD SWAP3 DUP5 ADD MLOAD PUSH1 0x0 SWAP4 PUSH2 0x1E3C SWAP3 SWAP2 DUP5 SWAP2 SWAP1 PUSH2 0x2545 JUMP JUMPDEST EQ ISZERO SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x1E52 DUP4 PUSH2 0x1DF1 JUMP JUMPDEST SWAP1 POP PUSH2 0x1E83 PUSH2 0x1E7C PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x4 DUP2 MSTORE PUSH1 0x20 ADD PUSH4 0xB9CDBDB PUSH1 0xE2 SHL DUP2 MSTORE POP PUSH2 0x1DF1 JUMP JUMPDEST DUP3 SWAP1 PUSH2 0x2161 JUMP JUMPDEST ISZERO PUSH2 0x1EBF JUMPI PUSH2 0x500 PUSH2 0x1EBA PUSH2 0x1EB3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x4 DUP2 MSTORE PUSH1 0x20 ADD PUSH4 0xB9CDBDB PUSH1 0xE2 SHL DUP2 MSTORE POP PUSH2 0x1DF1 JUMP JUMPDEST DUP4 SWAP1 PUSH2 0x2656 JUMP JUMPDEST PUSH2 0x249C JUMP JUMPDEST PUSH2 0x1EEB PUSH2 0x1EE4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1D PUSH1 0xF9 SHL DUP2 MSTORE POP PUSH2 0x1DF1 JUMP JUMPDEST DUP3 SWAP1 PUSH2 0x26E0 JUMP JUMPDEST PUSH1 0x1 SUB PUSH2 0x1F47 JUMPI PUSH2 0x1F17 PUSH2 0x1899 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1D PUSH1 0xF9 SHL DUP2 MSTORE POP PUSH2 0x1DF1 JUMP JUMPDEST POP PUSH2 0x500 PUSH2 0x1EBA PUSH2 0x1F40 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1D PUSH1 0xF9 SHL DUP2 MSTORE POP PUSH2 0x1DF1 JUMP JUMPDEST DUP4 SWAP1 PUSH2 0x2476 JUMP JUMPDEST PUSH2 0x1F70 PUSH2 0x1E7C PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x5 DUP2 MSTORE PUSH1 0x20 ADD PUSH5 0x173539B7B7 PUSH1 0xD9 SHL DUP2 MSTORE POP PUSH2 0x1DF1 JUMP JUMPDEST ISZERO PUSH2 0x2013 JUMPI PUSH1 0x0 PUSH2 0x1FA2 DUP3 PUSH2 0x1F9D PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x2F PUSH1 0xF8 SHL DUP2 MSTORE POP PUSH2 0x1DF1 JUMP JUMPDEST PUSH2 0x277A JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x1 DUP4 MLOAD PUSH2 0x1FB5 SWAP2 SWAP1 PUSH2 0x3707 JUMP JUMPDEST DUP2 MLOAD DUP2 LT PUSH2 0x1FC5 JUMPI PUSH2 0x1FC5 PUSH2 0x31B8 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH2 0x200A PUSH2 0x1EBA PUSH2 0x1FFB PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x5 DUP2 MSTORE PUSH1 0x20 ADD PUSH5 0x173539B7B7 PUSH1 0xD9 SHL DUP2 MSTORE POP PUSH2 0x1DF1 JUMP JUMPDEST PUSH2 0x2004 DUP5 PUSH2 0x1DF1 JUMP JUMPDEST SWAP1 PUSH2 0x2656 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x61B SWAP2 SWAP1 PUSH2 0x371A JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x2031 DUP4 PUSH2 0x1DF1 JUMP JUMPDEST SWAP1 POP PUSH2 0x205B PUSH2 0x1E7C PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x4 DUP2 MSTORE PUSH1 0x20 ADD PUSH4 0xB9CDBDB PUSH1 0xE2 SHL DUP2 MSTORE POP PUSH2 0x1DF1 JUMP JUMPDEST ISZERO PUSH2 0x2069 JUMPI PUSH2 0x500 DUP2 PUSH2 0x249C JUMP JUMPDEST PUSH2 0x208E PUSH2 0x1EE4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1D PUSH1 0xF9 SHL DUP2 MSTORE POP PUSH2 0x1DF1 JUMP JUMPDEST PUSH1 0x1 SUB PUSH2 0x20BD JUMPI PUSH2 0x500 PUSH2 0x1EBA PUSH2 0x1F40 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1D PUSH1 0xF9 SHL DUP2 MSTORE POP PUSH2 0x1DF1 JUMP JUMPDEST PUSH2 0x20E6 PUSH2 0x1E7C PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x5 DUP2 MSTORE PUSH1 0x20 ADD PUSH5 0x173539B7B7 PUSH1 0xD9 SHL DUP2 MSTORE POP PUSH2 0x1DF1 JUMP JUMPDEST ISZERO PUSH2 0x2013 JUMPI PUSH1 0x0 PUSH2 0x2113 DUP3 PUSH2 0x1F9D PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x2F PUSH1 0xF8 SHL DUP2 MSTORE POP PUSH2 0x1DF1 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 DUP2 MLOAD GT ISZERO PUSH2 0x214F JUMPI DUP1 PUSH1 0x2 DUP3 MLOAD PUSH2 0x212E SWAP2 SWAP1 PUSH2 0x3707 JUMP JUMPDEST DUP2 MLOAD DUP2 LT PUSH2 0x213E JUMPI PUSH2 0x213E PUSH2 0x31B8 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP3 POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST POP DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x61B SWAP2 SWAP1 PUSH2 0x371A JUMP JUMPDEST DUP1 MLOAD DUP3 MLOAD PUSH1 0x0 SWAP2 GT ISZERO PUSH2 0x2176 JUMPI POP PUSH1 0x0 PUSH2 0x3F8 JUMP JUMPDEST DUP2 MLOAD DUP4 MLOAD PUSH1 0x20 DUP6 ADD MLOAD PUSH1 0x0 SWAP3 SWAP2 PUSH2 0x218C SWAP2 PUSH2 0x37D4 JUMP JUMPDEST PUSH2 0x2196 SWAP2 SWAP1 PUSH2 0x3707 JUMP JUMPDEST SWAP1 POP DUP3 PUSH1 0x20 ADD MLOAD DUP2 SUB PUSH2 0x21AD JUMPI PUSH1 0x1 SWAP2 POP POP PUSH2 0x3F8 JUMP JUMPDEST DUP3 MLOAD PUSH1 0x20 DUP5 ADD MLOAD DUP2 SWAP1 KECCAK256 SWAP2 KECCAK256 EQ SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x21CF DUP4 PUSH2 0x2827 JUMP JUMPDEST PUSH1 0x1 ADD SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x21EF JUMPI PUSH2 0x21EF PUSH2 0x2C0D JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2219 JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP DUP2 DUP2 ADD PUSH1 0x20 ADD JUMPDEST PUSH1 0x0 NOT ADD PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL PUSH1 0xA DUP7 MOD BYTE DUP2 MSTORE8 PUSH1 0xA DUP6 DIV SWAP5 POP DUP5 PUSH2 0x2223 JUMPI POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x22E0 JUMPI DUP2 DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2277 JUMPI PUSH2 0x2277 PUSH2 0x31B8 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x2290 SWAP3 SWAP2 SWAP1 PUSH2 0x2D15 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP2 POP PUSH1 0x1 DUP6 MLOAD PUSH2 0x22AF SWAP2 SWAP1 PUSH2 0x3707 JUMP JUMPDEST DUP2 EQ PUSH2 0x22D8 JUMPI DUP2 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x22C6 SWAP2 SWAP1 PUSH2 0x37E7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP2 POP JUMPDEST PUSH1 0x1 ADD PUSH2 0x225B JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x3 DUP1 DUP3 MSTORE PUSH1 0x80 DUP3 ADD SWAP1 SWAP3 MSTORE PUSH1 0x0 SWAP2 DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x22F9 JUMPI SWAP1 POP POP SWAP1 POP DUP4 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x2324 JUMPI PUSH2 0x2324 PUSH2 0x31B8 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x2 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x2D63 PUSH1 0xF0 SHL DUP2 MSTORE POP DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x235D JUMPI PUSH2 0x235D PUSH2 0x31B8 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP2 DUP2 PUSH1 0x2 DUP2 MLOAD DUP2 LT PUSH2 0x237C JUMPI PUSH2 0x237C PUSH2 0x31B8 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x23C1 DUP5 PUSH1 0x0 ADD MLOAD DUP6 PUSH1 0x20 ADD MLOAD DUP6 PUSH1 0x0 ADD MLOAD DUP7 PUSH1 0x20 ADD MLOAD PUSH2 0x28FF JUMP JUMPDEST SWAP1 POP DUP4 PUSH1 0x20 ADD MLOAD DUP2 PUSH2 0x23D3 SWAP2 SWAP1 PUSH2 0x3707 JUMP JUMPDEST DUP5 MLOAD DUP6 SWAP1 PUSH2 0x23E2 SWAP1 DUP4 SWAP1 PUSH2 0x3707 JUMP JUMPDEST SWAP1 MSTORE POP PUSH1 0x20 DUP5 ADD MSTORE POP SWAP1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE DUP2 MLOAD DUP4 MLOAD LT ISZERO PUSH2 0x2416 JUMPI POP DUP2 PUSH2 0x3F8 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP4 ADD MLOAD SWAP1 DUP5 ADD MLOAD PUSH1 0x1 SWAP2 EQ PUSH2 0x243D JUMPI POP DUP2 MLOAD PUSH1 0x20 DUP5 DUP2 ADD MLOAD SWAP1 DUP5 ADD MLOAD DUP3 SWAP1 KECCAK256 SWAP2 SWAP1 KECCAK256 EQ JUMPDEST DUP1 ISZERO PUSH2 0x246E JUMPI DUP3 MLOAD DUP5 MLOAD DUP6 SWAP1 PUSH2 0x2454 SWAP1 DUP4 SWAP1 PUSH2 0x3707 JUMP JUMPDEST SWAP1 MSTORE POP DUP3 MLOAD PUSH1 0x20 DUP6 ADD DUP1 MLOAD PUSH2 0x246A SWAP1 DUP4 SWAP1 PUSH2 0x37D4 JUMP JUMPDEST SWAP1 MSTORE POP JUMPDEST POP SWAP2 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x2495 DUP4 DUP4 DUP4 PUSH2 0x2A1F JUMP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP3 PUSH1 0x0 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x24BD JUMPI PUSH2 0x24BD PUSH2 0x2C0D JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x24E7 JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2495 DUP2 DUP6 PUSH1 0x20 ADD MLOAD DUP7 PUSH1 0x0 ADD MLOAD PUSH2 0x2ACA JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x2513 DUP5 DUP5 PUSH2 0x92A JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP1 DUP4 ADD MLOAD PUSH1 0x40 MLOAD SWAP4 SWAP5 POP PUSH2 0x252D SWAP4 SWAP1 SWAP2 ADD PUSH2 0x380C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP6 DUP5 GT PUSH2 0x264C JUMPI PUSH1 0x20 DUP5 GT PUSH2 0x25F8 JUMPI PUSH1 0x0 DUP5 ISZERO PUSH2 0x2590 JUMPI PUSH1 0x1 PUSH2 0x256C DUP7 PUSH1 0x20 PUSH2 0x3707 JUMP JUMPDEST PUSH2 0x2577 SWAP1 PUSH1 0x8 PUSH2 0x3848 JUMP JUMPDEST PUSH2 0x2582 SWAP1 PUSH1 0x2 PUSH2 0x3943 JUMP JUMPDEST PUSH2 0x258C SWAP2 SWAP1 PUSH2 0x3707 JUMP JUMPDEST NOT SWAP1 POP JUMPDEST DUP4 MLOAD DUP2 AND DUP6 PUSH2 0x259F DUP10 DUP10 PUSH2 0x37D4 JUMP JUMPDEST PUSH2 0x25A9 SWAP2 SWAP1 PUSH2 0x3707 JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP4 POP DUP3 AND JUMPDEST DUP2 DUP2 EQ PUSH2 0x25E3 JUMPI DUP8 DUP5 GT PUSH2 0x25CB JUMPI DUP8 SWAP5 POP POP POP POP POP PUSH2 0x162B JUMP JUMPDEST DUP4 PUSH2 0x25D5 DUP2 PUSH2 0x394F JUMP JUMPDEST SWAP5 POP POP DUP3 DUP5 MLOAD AND SWAP1 POP PUSH2 0x25B1 JUMP JUMPDEST PUSH2 0x25ED DUP8 DUP6 PUSH2 0x37D4 JUMP JUMPDEST SWAP5 POP POP POP POP POP PUSH2 0x162B JUMP JUMPDEST DUP4 DUP4 KECCAK256 PUSH2 0x2605 DUP6 DUP9 PUSH2 0x3707 JUMP JUMPDEST PUSH2 0x260F SWAP1 DUP8 PUSH2 0x37D4 JUMP JUMPDEST SWAP2 POP JUMPDEST DUP6 DUP3 LT PUSH2 0x264A JUMPI DUP5 DUP3 KECCAK256 DUP1 DUP3 SUB PUSH2 0x2637 JUMPI PUSH2 0x262D DUP7 DUP5 PUSH2 0x37D4 JUMP JUMPDEST SWAP4 POP POP POP POP PUSH2 0x162B JUMP JUMPDEST PUSH2 0x2642 PUSH1 0x1 DUP5 PUSH2 0x3707 JUMP JUMPDEST SWAP3 POP POP PUSH2 0x2612 JUMP JUMPDEST POP JUMPDEST POP SWAP3 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE DUP2 MLOAD DUP4 MLOAD LT ISZERO PUSH2 0x267B JUMPI POP DUP2 PUSH2 0x3F8 JUMP JUMPDEST DUP2 MLOAD DUP4 MLOAD PUSH1 0x20 DUP6 ADD MLOAD PUSH1 0x0 SWAP3 SWAP2 PUSH2 0x2691 SWAP2 PUSH2 0x37D4 JUMP JUMPDEST PUSH2 0x269B SWAP2 SWAP1 PUSH2 0x3707 JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD SWAP1 SWAP2 POP PUSH1 0x1 SWAP1 DUP3 EQ PUSH2 0x26BC JUMPI POP DUP3 MLOAD PUSH1 0x20 DUP5 ADD MLOAD DUP2 SWAP1 KECCAK256 SWAP1 DUP3 KECCAK256 EQ JUMPDEST DUP1 ISZERO PUSH2 0x26D7 JUMPI DUP4 MLOAD DUP6 MLOAD DUP7 SWAP1 PUSH2 0x26D3 SWAP1 DUP4 SWAP1 PUSH2 0x3707 JUMP JUMPDEST SWAP1 MSTORE POP JUMPDEST POP SWAP3 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH1 0x0 ADD MLOAD PUSH2 0x2704 DUP6 PUSH1 0x0 ADD MLOAD DUP7 PUSH1 0x20 ADD MLOAD DUP7 PUSH1 0x0 ADD MLOAD DUP8 PUSH1 0x20 ADD MLOAD PUSH2 0x28FF JUMP JUMPDEST PUSH2 0x270E SWAP2 SWAP1 PUSH2 0x37D4 JUMP JUMPDEST SWAP1 POP JUMPDEST DUP4 MLOAD PUSH1 0x20 DUP6 ADD MLOAD PUSH2 0x2722 SWAP2 SWAP1 PUSH2 0x37D4 JUMP JUMPDEST DUP2 GT PUSH2 0x2495 JUMPI DUP2 PUSH2 0x2732 DUP2 PUSH2 0x3966 JUMP JUMPDEST SWAP3 POP POP DUP3 PUSH1 0x0 ADD MLOAD PUSH2 0x2769 DUP6 PUSH1 0x20 ADD MLOAD DUP4 PUSH2 0x274D SWAP2 SWAP1 PUSH2 0x3707 JUMP JUMPDEST DUP7 MLOAD PUSH2 0x2759 SWAP2 SWAP1 PUSH2 0x3707 JUMP JUMPDEST DUP4 DUP7 PUSH1 0x0 ADD MLOAD DUP8 PUSH1 0x20 ADD MLOAD PUSH2 0x28FF JUMP JUMPDEST PUSH2 0x2773 SWAP2 SWAP1 PUSH2 0x37D4 JUMP JUMPDEST SWAP1 POP PUSH2 0x2711 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x2788 DUP5 DUP5 PUSH2 0x26E0 JUMP JUMPDEST PUSH2 0x2793 SWAP1 PUSH1 0x1 PUSH2 0x37D4 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x27AB JUMPI PUSH2 0x27AB PUSH2 0x2C0D JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x27DE JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x27C9 JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP2 MLOAD DUP2 LT ISZERO PUSH2 0x281F JUMPI PUSH2 0x27FA PUSH2 0x1EBA DUP7 DUP7 PUSH2 0x2476 JUMP JUMPDEST DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x280C JUMPI PUSH2 0x280C PUSH2 0x31B8 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x27E4 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH19 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F01 PUSH1 0x40 SHL DUP4 LT PUSH2 0x2866 JUMPI PUSH19 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F01 PUSH1 0x40 SHL DUP4 DIV SWAP3 POP PUSH1 0x40 ADD JUMPDEST PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 LT PUSH2 0x2892 JUMPI PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 DIV SWAP3 POP PUSH1 0x20 ADD JUMPDEST PUSH7 0x2386F26FC10000 DUP4 LT PUSH2 0x28B0 JUMPI PUSH7 0x2386F26FC10000 DUP4 DIV SWAP3 POP PUSH1 0x10 ADD JUMPDEST PUSH4 0x5F5E100 DUP4 LT PUSH2 0x28C8 JUMPI PUSH4 0x5F5E100 DUP4 DIV SWAP3 POP PUSH1 0x8 ADD JUMPDEST PUSH2 0x2710 DUP4 LT PUSH2 0x28DC JUMPI PUSH2 0x2710 DUP4 DIV SWAP3 POP PUSH1 0x4 ADD JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0x28EE JUMPI PUSH1 0x64 DUP4 DIV SWAP3 POP PUSH1 0x2 ADD JUMPDEST PUSH1 0xA DUP4 LT PUSH2 0x3F8 JUMPI PUSH1 0x1 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 DUP7 DUP6 GT PUSH2 0x2A0A JUMPI PUSH1 0x20 DUP6 GT PUSH2 0x29B9 JUMPI PUSH1 0x0 DUP6 ISZERO PUSH2 0x294B JUMPI PUSH1 0x1 PUSH2 0x2927 DUP8 PUSH1 0x20 PUSH2 0x3707 JUMP JUMPDEST PUSH2 0x2932 SWAP1 PUSH1 0x8 PUSH2 0x3848 JUMP JUMPDEST PUSH2 0x293D SWAP1 PUSH1 0x2 PUSH2 0x3943 JUMP JUMPDEST PUSH2 0x2947 SWAP2 SWAP1 PUSH2 0x3707 JUMP JUMPDEST NOT SWAP1 POP JUMPDEST DUP5 MLOAD DUP2 AND PUSH1 0x0 DUP8 PUSH2 0x295C DUP12 DUP12 PUSH2 0x37D4 JUMP JUMPDEST PUSH2 0x2966 SWAP2 SWAP1 PUSH2 0x3707 JUMP JUMPDEST DUP6 MLOAD SWAP1 SWAP2 POP DUP4 AND JUMPDEST DUP3 DUP2 EQ PUSH2 0x29AB JUMPI DUP2 DUP7 LT PUSH2 0x2993 JUMPI PUSH2 0x2986 DUP12 DUP12 PUSH2 0x37D4 JUMP JUMPDEST SWAP7 POP POP POP POP POP POP POP PUSH2 0x162B JUMP JUMPDEST DUP6 PUSH2 0x299D DUP2 PUSH2 0x3966 JUMP JUMPDEST SWAP7 POP POP DUP4 DUP7 MLOAD AND SWAP1 POP PUSH2 0x296E JUMP JUMPDEST DUP6 SWAP7 POP POP POP POP POP POP POP PUSH2 0x162B JUMP JUMPDEST POP DUP4 DUP4 KECCAK256 PUSH1 0x0 SWAP1 JUMPDEST PUSH2 0x29CB DUP7 DUP10 PUSH2 0x3707 JUMP JUMPDEST DUP3 GT PUSH2 0x2A08 JUMPI DUP6 DUP4 KECCAK256 DUP1 DUP3 SUB PUSH2 0x29E7 JUMPI DUP4 SWAP5 POP POP POP POP POP PUSH2 0x162B JUMP JUMPDEST PUSH2 0x29F2 PUSH1 0x1 DUP6 PUSH2 0x37D4 JUMP JUMPDEST SWAP4 POP POP DUP2 DUP1 PUSH2 0x2A00 SWAP1 PUSH2 0x3966 JUMP JUMPDEST SWAP3 POP POP PUSH2 0x29C1 JUMP JUMPDEST POP JUMPDEST PUSH2 0x2A14 DUP8 DUP8 PUSH2 0x37D4 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x2A51 DUP6 PUSH1 0x0 ADD MLOAD DUP7 PUSH1 0x20 ADD MLOAD DUP7 PUSH1 0x0 ADD MLOAD DUP8 PUSH1 0x20 ADD MLOAD PUSH2 0x28FF JUMP JUMPDEST PUSH1 0x20 DUP1 DUP8 ADD DUP1 MLOAD SWAP2 DUP7 ADD SWAP2 SWAP1 SWAP2 MSTORE MLOAD SWAP1 SWAP2 POP PUSH2 0x2A6D SWAP1 DUP3 PUSH2 0x3707 JUMP JUMPDEST DUP4 MSTORE DUP5 MLOAD PUSH1 0x20 DUP7 ADD MLOAD PUSH2 0x2A80 SWAP2 SWAP1 PUSH2 0x37D4 JUMP JUMPDEST DUP2 SUB PUSH2 0x2A8F JUMPI PUSH1 0x0 DUP6 MSTORE PUSH2 0x2AC1 JUMP JUMPDEST DUP4 MLOAD DUP4 MLOAD PUSH2 0x2A9D SWAP2 SWAP1 PUSH2 0x37D4 JUMP JUMPDEST DUP6 MLOAD DUP7 SWAP1 PUSH2 0x2AAC SWAP1 DUP4 SWAP1 PUSH2 0x3707 JUMP JUMPDEST SWAP1 MSTORE POP DUP4 MLOAD PUSH2 0x2ABB SWAP1 DUP3 PUSH2 0x37D4 JUMP JUMPDEST PUSH1 0x20 DUP7 ADD MSTORE JUMPDEST POP SWAP1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 LT PUSH2 0x2B02 JUMPI DUP2 MLOAD DUP4 MSTORE PUSH2 0x2AE1 PUSH1 0x20 DUP5 PUSH2 0x37D4 JUMP JUMPDEST SWAP3 POP PUSH2 0x2AEE PUSH1 0x20 DUP4 PUSH2 0x37D4 JUMP JUMPDEST SWAP2 POP PUSH2 0x2AFB PUSH1 0x20 DUP3 PUSH2 0x3707 JUMP JUMPDEST SWAP1 POP PUSH2 0x2ACA JUMP JUMPDEST PUSH1 0x0 NOT DUP2 ISZERO PUSH2 0x2B31 JUMPI PUSH1 0x1 PUSH2 0x2B18 DUP4 PUSH1 0x20 PUSH2 0x3707 JUMP JUMPDEST PUSH2 0x2B24 SWAP1 PUSH2 0x100 PUSH2 0x3943 JUMP JUMPDEST PUSH2 0x2B2E SWAP2 SWAP1 PUSH2 0x3707 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP2 MLOAD DUP4 MLOAD DUP4 AND SWAP3 NOT AND SWAP2 SWAP1 SWAP2 OR SWAP1 SWAP2 MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2B56 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x500 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2B7F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2BA1 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x2B89 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x2BC2 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x2B86 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x500 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x2BAA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND DUP2 MSTORE PUSH1 0x40 PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x162B SWAP1 DUP4 ADD DUP5 PUSH2 0x2BAA JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x60 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x2C46 JUMPI PUSH2 0x2C46 PUSH2 0x2C0D JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP5 GT ISZERO PUSH2 0x2C67 JUMPI PUSH2 0x2C67 PUSH2 0x2C0D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP6 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP3 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0x2C8F JUMPI PUSH2 0x2C8F PUSH2 0x2C0D JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP1 SWAP4 POP DUP6 DUP2 MSTORE DUP7 DUP7 DUP7 ADD GT ISZERO PUSH2 0x2CA8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2CB6 DUP7 PUSH1 0x20 DUP4 ADD DUP8 PUSH2 0x2B86 JUMP JUMPDEST POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x2CD1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x500 DUP4 DUP4 MLOAD PUSH1 0x20 DUP6 ADD PUSH2 0x2C4C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2CF2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2D09 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3F4 DUP5 DUP3 DUP6 ADD PUSH2 0x2CC0 JUMP JUMPDEST PUSH1 0x0 DUP4 MLOAD PUSH2 0x2D27 DUP2 DUP5 PUSH1 0x20 DUP9 ADD PUSH2 0x2B86 JUMP JUMPDEST DUP4 MLOAD SWAP1 DUP4 ADD SWAP1 PUSH2 0x2D3B DUP2 DUP4 PUSH1 0x20 DUP9 ADD PUSH2 0x2B86 JUMP JUMPDEST ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH32 0x4661696C656420746F206465706C6F7920636F6E747261637420000000000000 DUP2 MSTORE PUSH1 0x0 DUP4 MLOAD PUSH2 0x2D7C DUP2 PUSH1 0x1A DUP6 ADD PUSH1 0x20 DUP9 ADD PUSH2 0x2B86 JUMP JUMPDEST PUSH32 0x207573696E6720636F6E7374727563746F722064617461202200000000000000 PUSH1 0x1A SWAP2 DUP5 ADD SWAP2 DUP3 ADD MSTORE DUP4 MLOAD PUSH2 0x2DB9 DUP2 PUSH1 0x33 DUP5 ADD PUSH1 0x20 DUP9 ADD PUSH2 0x2B86 JUMP JUMPDEST PUSH1 0x11 PUSH1 0xF9 SHL PUSH1 0x33 SWAP3 SWAP1 SWAP2 ADD SWAP2 DUP3 ADD MSTORE PUSH1 0x34 ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH32 0x4661696C656420746F206465706C6F7920636F6E747261637420000000000000 DUP2 MSTORE PUSH1 0x0 DUP4 MLOAD PUSH2 0x2E0B DUP2 PUSH1 0x1A DUP6 ADD PUSH1 0x20 DUP9 ADD PUSH2 0x2B86 JUMP JUMPDEST PUSH2 0x1D1 PUSH1 0xF5 SHL PUSH1 0x1A SWAP2 DUP5 ADD SWAP2 DUP3 ADD MSTORE DUP4 MLOAD PUSH2 0x2E2D DUP2 PUSH1 0x1C DUP5 ADD PUSH1 0x20 DUP9 ADD PUSH2 0x2B86 JUMP JUMPDEST ADD PUSH1 0x1C ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH32 0x4661696C656420746F2072756E2075706772616465207361666574792076616C DUP2 MSTORE PUSH9 0x34B230BA34B7B71D1 PUSH1 0xBD SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 DUP3 MLOAD PUSH2 0x2E83 DUP2 PUSH1 0x29 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x2B86 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD PUSH1 0x29 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x55706772616465207361666574792076616C69646174696F6E206661696C6564 DUP2 MSTORE PUSH2 0x1D05 PUSH1 0xF1 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 DUP3 MLOAD PUSH2 0x2ED3 DUP2 PUSH1 0x22 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x2B86 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD PUSH1 0x22 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 DUP2 MSTORE PUSH1 0xB PUSH1 0x40 DUP3 ADD MSTORE PUSH11 0x1193D55391149657D3D555 PUSH1 0xAA SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x500 PUSH1 0x80 DUP4 ADD DUP5 PUSH2 0x2BAA JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2F27 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2F3E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD PUSH1 0x1F DUP2 ADD DUP5 SGT PUSH2 0x2F4F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3F4 DUP5 DUP3 MLOAD PUSH1 0x20 DUP5 ADD PUSH2 0x2C4C JUMP JUMPDEST PUSH1 0x0 DUP6 MLOAD PUSH2 0x2F70 DUP2 DUP5 PUSH1 0x20 DUP11 ADD PUSH2 0x2B86 JUMP JUMPDEST DUP1 DUP4 ADD SWAP1 POP PUSH1 0x2F PUSH1 0xF8 SHL DUP1 DUP3 MSTORE DUP7 MLOAD PUSH2 0x2F90 DUP2 PUSH1 0x1 DUP6 ADD PUSH1 0x20 DUP12 ADD PUSH2 0x2B86 JUMP JUMPDEST PUSH1 0x1 SWAP3 ADD SWAP2 DUP3 ADD DUP2 SWAP1 MSTORE DUP6 MLOAD PUSH2 0x2FAD DUP2 PUSH1 0x2 DUP6 ADD PUSH1 0x20 DUP11 ADD PUSH2 0x2B86 JUMP JUMPDEST PUSH1 0x2 SWAP3 ADD SWAP2 DUP3 ADD MSTORE DUP4 MLOAD PUSH2 0x2FC8 DUP2 PUSH1 0x3 DUP5 ADD PUSH1 0x20 DUP9 ADD PUSH2 0x2B86 JUMP JUMPDEST PUSH5 0x173539B7B7 PUSH1 0xD9 SHL PUSH1 0x3 SWAP3 SWAP1 SWAP2 ADD SWAP2 DUP3 ADD MSTORE PUSH1 0x8 ADD SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP2 MSTORE PUSH1 0x0 PUSH2 0x2FFB PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x2BAA JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x4 DUP2 MSTORE PUSH4 0xB985CDD PUSH1 0xE2 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3033 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x500 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH32 0x436F756C64206E6F742066696E642041535420696E2061727469666163742000 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD PUSH2 0x307B DUP2 PUSH1 0x1F DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x2B86 JUMP JUMPDEST PUSH32 0x2E205365742060617374203D20747275656020696E20666F756E6472792E746F PUSH1 0x1F SWAP4 SWAP1 SWAP2 ADD SWAP3 DUP4 ADD MSTORE POP PUSH2 0x1B5B PUSH1 0xF2 SHL PUSH1 0x3F DUP3 ADD MSTORE PUSH1 0x41 ADD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 DUP2 MSTORE PUSH1 0x0 PUSH2 0x30CD PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x2BAA JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x11 DUP2 MSTORE PUSH17 0x5CC2E6E85CC2C4E6DED8EAE8CAA0C2E8D PUSH1 0x7B SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 DUP2 MSTORE PUSH1 0x0 PUSH2 0x3113 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x2BAA JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0xC DUP2 MSTORE PUSH12 0x2E6173742E6C6963656E7365 PUSH1 0xA0 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH20 0x2E6D657461646174612E736F75726365732E5B27 PUSH1 0x60 SHL DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD PUSH2 0x3170 DUP2 PUSH1 0x14 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x2B86 JUMP JUMPDEST PUSH12 0x13AE9735B2B1B1B0B5991A9B PUSH1 0xA1 SHL PUSH1 0x14 SWAP4 SWAP1 SWAP2 ADD SWAP3 DUP4 ADD MSTORE POP PUSH1 0x20 ADD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 DUP2 MSTORE PUSH1 0x0 PUSH2 0x31A6 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x2BAA JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x4FC DUP2 DUP6 PUSH2 0x2BAA JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x11 PUSH1 0xF9 SHL DUP1 DUP4 MSTORE DUP4 MLOAD PUSH2 0x31EB DUP2 PUSH1 0x1 DUP7 ADD PUSH1 0x20 DUP9 ADD PUSH2 0x2B86 JUMP JUMPDEST PUSH1 0x1 SWAP4 ADD SWAP3 DUP4 ADD MSTORE POP PUSH1 0x2 ADD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x320E DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x2B86 JUMP JUMPDEST PUSH11 0x2F6275696C642D696E666F PUSH1 0xA8 SHL SWAP3 ADD SWAP2 DUP3 MSTORE POP PUSH1 0xB ADD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x436F756C64206E6F742066696E64206275696C642D696E666F2066696C652077 DUP2 MSTORE PUSH32 0x697468206D61746368696E6720736F7572636520636F6465206861736820666F PUSH1 0x20 DUP3 ADD MSTORE PUSH11 0x391031B7B73A3930B1BA1 PUSH1 0xAD SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x0 DUP3 MLOAD PUSH2 0x329D DUP2 PUSH1 0x4B DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x2B86 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD PUSH1 0x4B ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND PUSH1 0xFF DUP2 SUB PUSH2 0x32D6 JUMPI PUSH2 0x32D6 PUSH2 0x32AA JUMP JUMPDEST PUSH1 0x1 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x406F70656E7A657070656C696E2F646566656E6465722D6465706C6F792D636C DUP2 MSTORE PUSH9 0x1A595B9D0B58DB1A5 PUSH1 0xBE SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 DUP3 MLOAD PUSH2 0x2E83 DUP2 PUSH1 0x29 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x2B86 JUMP JUMPDEST PUSH1 0x40 DUP2 MSTORE PUSH1 0x16 PUSH1 0x40 DUP3 ADD MSTORE PUSH22 0x9EA08A9CB48AA0A08A98929CBE8482A690BEA082A89 PUSH1 0x53 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x500 PUSH1 0x80 DUP4 ADD DUP5 PUSH2 0x2BAA JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 ADD PUSH1 0x20 DUP5 MSTORE DUP1 DUP6 MLOAD DUP1 DUP4 MSTORE PUSH1 0x40 DUP7 ADD SWAP2 POP PUSH1 0x40 DUP2 PUSH1 0x5 SHL DUP8 ADD ADD SWAP3 POP PUSH1 0x20 DUP8 ADD PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x33C0 JUMPI PUSH1 0x3F NOT DUP9 DUP7 SUB ADD DUP5 MSTORE PUSH2 0x33AE DUP6 DUP4 MLOAD PUSH2 0x2BAA JUMP JUMPDEST SWAP5 POP SWAP3 DUP6 ADD SWAP3 SWAP1 DUP6 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x3392 JUMP JUMPDEST POP SWAP3 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x33DF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x33F7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 DUP4 ADD SWAP1 PUSH1 0x60 DUP3 DUP7 SUB SLT ISZERO PUSH2 0x340B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3413 PUSH2 0x2C23 JUMP JUMPDEST DUP3 MLOAD DUP1 PUSH1 0x3 SIGNEXTEND DUP2 EQ PUSH2 0x3424 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP4 ADD MLOAD DUP3 DUP2 GT ISZERO PUSH2 0x3438 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3444 DUP8 DUP3 DUP7 ADD PUSH2 0x2CC0 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0x40 DUP4 ADD MLOAD DUP3 DUP2 GT ISZERO PUSH2 0x345C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3468 DUP8 DUP3 DUP7 ADD PUSH2 0x2CC0 JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH32 0x4661696C656420746F2072756E206261736820636F6D6D616E64207769746820 DUP2 MSTORE PUSH1 0x11 PUSH1 0xF9 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 DUP3 MLOAD PUSH2 0x34B9 DUP2 PUSH1 0x21 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x2B86 JUMP JUMPDEST PUSH32 0x222E20496620796F7520617265207573696E672057696E646F77732C20736574 PUSH1 0x21 SWAP4 SWAP1 SWAP2 ADD SWAP3 DUP4 ADD MSTORE POP PUSH32 0x20746865204F50454E5A455050454C494E5F424153485F5041544820656E7669 PUSH1 0x41 DUP3 ADD MSTORE PUSH32 0x726F6E6D656E74207661726961626C6520746F207468652066756C6C79207175 PUSH1 0x61 DUP3 ADD MSTORE PUSH32 0x616C69666965642070617468206F662074686520626173682065786563757461 PUSH1 0x81 DUP3 ADD MSTORE PUSH32 0x626C652E20466F72206578616D706C652C20696620796F752061726520757369 PUSH1 0xA1 DUP3 ADD MSTORE PUSH32 0x6E672047697420666F722057696E646F77732C206164642074686520666F6C6C PUSH1 0xC1 DUP3 ADD MSTORE PUSH32 0x6F77696E67206C696E6520696E20746865202E656E762066696C65206F662079 PUSH1 0xE1 DUP3 ADD MSTORE PUSH32 0x6F75722070726F6A65637420287573696E6720666F727761726420736C617368 PUSH2 0x101 DUP3 ADD MSTORE PUSH32 0x6573293A0A4F50454E5A455050454C494E5F424153485F504154483D22433A2F PUSH2 0x121 DUP3 ADD MSTORE PUSH32 0x50726F6772616D2046696C65732F4769742F62696E2F62617368220000000000 PUSH2 0x141 DUP3 ADD MSTORE PUSH2 0x15C ADD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4661696C656420746F2066696E64206C696E6520776974682070726566697820 DUP2 MSTORE PUSH1 0x27 PUSH1 0xF8 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 DUP4 MLOAD PUSH2 0x3689 DUP2 PUSH1 0x21 DUP6 ADD PUSH1 0x20 DUP9 ADD PUSH2 0x2B86 JUMP JUMPDEST PUSH13 0x139034B71037BABA383ABA1D1 PUSH1 0x9D SHL PUSH1 0x21 SWAP2 DUP5 ADD SWAP2 DUP3 ADD MSTORE DUP4 MLOAD PUSH2 0x36B6 DUP2 PUSH1 0x2E DUP5 ADD PUSH1 0x20 DUP9 ADD PUSH2 0x2B86 JUMP JUMPDEST ADD PUSH1 0x2E ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH32 0x406F70656E7A657070656C696E2F75706772616465732D636F72654000000000 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD PUSH2 0x36FA DUP2 PUSH1 0x1C DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x2B86 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD PUSH1 0x1C ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x3F8 JUMPI PUSH2 0x3F8 PUSH2 0x32AA JUMP JUMPDEST PUSH14 0x21B7B73A3930B1BA103730B6B29 PUSH1 0x95 SHL DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD PUSH2 0x3743 DUP2 PUSH1 0xE DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x2B86 JUMP JUMPDEST PUSH32 0x206D75737420626520696E2074686520666F726D6174204D79436F6E74726163 PUSH1 0xE SWAP4 SWAP1 SWAP2 ADD SWAP3 DUP4 ADD MSTORE POP PUSH32 0x742E736F6C3A4D79436F6E7472616374206F72204D79436F6E74726163742E73 PUSH1 0x2E DUP3 ADD MSTORE PUSH32 0x6F6C206F72206F75742F4D79436F6E74726163742E736F6C2F4D79436F6E7472 PUSH1 0x4E DUP3 ADD MSTORE PUSH8 0x30B1BA173539B7B7 PUSH1 0xC1 SHL PUSH1 0x6E DUP3 ADD MSTORE PUSH1 0x76 ADD SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x3F8 JUMPI PUSH2 0x3F8 PUSH2 0x32AA JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x37F9 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x2B86 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xFD SHL SWAP3 ADD SWAP2 DUP3 MSTORE POP PUSH1 0x1 ADD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP4 MLOAD PUSH2 0x381E DUP2 DUP5 PUSH1 0x20 DUP9 ADD PUSH2 0x2B86 JUMP JUMPDEST PUSH1 0x1D PUSH1 0xF9 SHL SWAP1 DUP4 ADD SWAP1 DUP2 MSTORE DUP4 MLOAD PUSH2 0x383C DUP2 PUSH1 0x1 DUP5 ADD PUSH1 0x20 DUP9 ADD PUSH2 0x2B86 JUMP JUMPDEST ADD PUSH1 0x1 ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH2 0x3F8 JUMPI PUSH2 0x3F8 PUSH2 0x32AA JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 JUMPDEST DUP1 DUP6 GT ISZERO PUSH2 0x389A JUMPI DUP2 PUSH1 0x0 NOT DIV DUP3 GT ISZERO PUSH2 0x3880 JUMPI PUSH2 0x3880 PUSH2 0x32AA JUMP JUMPDEST DUP1 DUP6 AND ISZERO PUSH2 0x388D JUMPI SWAP2 DUP2 MUL SWAP2 JUMPDEST SWAP4 DUP5 SHR SWAP4 SWAP1 DUP1 MUL SWAP1 PUSH2 0x3864 JUMP JUMPDEST POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x38B1 JUMPI POP PUSH1 0x1 PUSH2 0x3F8 JUMP JUMPDEST DUP2 PUSH2 0x38BE JUMPI POP PUSH1 0x0 PUSH2 0x3F8 JUMP JUMPDEST DUP2 PUSH1 0x1 DUP2 EQ PUSH2 0x38D4 JUMPI PUSH1 0x2 DUP2 EQ PUSH2 0x38DE JUMPI PUSH2 0x38FA JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP PUSH2 0x3F8 JUMP JUMPDEST PUSH1 0xFF DUP5 GT ISZERO PUSH2 0x38EF JUMPI PUSH2 0x38EF PUSH2 0x32AA JUMP JUMPDEST POP POP PUSH1 0x1 DUP3 SHL PUSH2 0x3F8 JUMP JUMPDEST POP PUSH1 0x20 DUP4 LT PUSH2 0x133 DUP4 LT AND PUSH1 0x4E DUP5 LT PUSH1 0xB DUP5 LT AND OR ISZERO PUSH2 0x391D JUMPI POP DUP2 DUP2 EXP PUSH2 0x3F8 JUMP JUMPDEST PUSH2 0x3927 DUP4 DUP4 PUSH2 0x385F JUMP JUMPDEST DUP1 PUSH1 0x0 NOT DIV DUP3 GT ISZERO PUSH2 0x393B JUMPI PUSH2 0x393B PUSH2 0x32AA JUMP JUMPDEST MUL SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x500 DUP4 DUP4 PUSH2 0x38A2 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x395E JUMPI PUSH2 0x395E PUSH2 0x32AA JUMP JUMPDEST POP PUSH1 0x0 NOT ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH2 0x3978 JUMPI PUSH2 0x3978 PUSH2 0x32AA JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CODESIZE DUP9 SWAP13 SLT SWAP11 GT KECCAK256 SLOAD AND XOR DUP6 JUMPDEST DUP7 DUP11 0xDF 0xC5 0xD0 DUP14 PUSH0 PC 0xCA SSTORE 0x26 BALANCE CALLCODE STOP 0xBC ORIGIN DUP2 NUMBER KECCAK256 0xF PUSH5 0x736F6C6343 STOP ADDMOD NOT STOP CALLER ",
              "sourceMap": "325:1503:63:-:0;;;3126:44:2;;;-1:-1:-1;;800:28:1;;;;;325:1503:63;;;;;;;;;;;;;;;;",
              "linkReferences": {}
            },
            "deployedBytecode": {
              "functionDebugData": {
                "@IS_SCRIPT_112": {
                  "entryPoint": null,
                  "id": 112,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "@_buildValidateCommand_51979": {
                  "entryPoint": 6372,
                  "id": 51979,
                  "parameterSlots": 3,
                  "returnSlots": 1
                },
                "@_castLogPayloadViewToPure_20212": {
                  "entryPoint": null,
                  "id": 20212,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "@_deployFromBytecode_52064": {
                  "entryPoint": 1984,
                  "id": 52064,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "@_deploy_52050": {
                  "entryPoint": 1319,
                  "id": 52050,
                  "parameterSlots": 3,
                  "returnSlots": 1
                },
                "@_parseLine_52717": {
                  "entryPoint": 6096,
                  "id": 52717,
                  "parameterSlots": 3,
                  "returnSlots": 1
                },
                "@_sendLogPayloadView_20240": {
                  "entryPoint": 1619,
                  "id": 20240,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "@_sendLogPayload_20224": {
                  "entryPoint": 1287,
                  "id": 20224,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "@_split_53530": {
                  "entryPoint": 10106,
                  "id": 53530,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "@_toFileName_53622": {
                  "entryPoint": 8228,
                  "id": 53622,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "@_toShortName_53734": {
                  "entryPoint": 7749,
                  "id": 53734,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "@_validate_51768": {
                  "entryPoint": 2003,
                  "id": 51768,
                  "parameterSlots": 3,
                  "returnSlots": 0
                },
                "@beyond_49869": {
                  "entryPoint": 9201,
                  "id": 49869,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "@buildDeployCommand_52498": {
                  "entryPoint": 3700,
                  "id": 52498,
                  "parameterSlots": 4,
                  "returnSlots": 1
                },
                "@contains_50587": {
                  "entryPoint": 7710,
                  "id": 50587,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "@copy_49197": {
                  "entryPoint": null,
                  "id": 49197,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "@count_50561": {
                  "entryPoint": 9952,
                  "id": 50561,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "@deployImplementation_51495": {
                  "entryPoint": 1296,
                  "id": 51495,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "@deployUUPSProxy_51027": {
                  "entryPoint": 1164,
                  "id": 51027,
                  "parameterSlots": 3,
                  "returnSlots": 1
                },
                "@deployUUPSProxy_51048": {
                  "entryPoint": 904,
                  "id": 51048,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "@deploy_52231": {
                  "entryPoint": 1668,
                  "id": 52231,
                  "parameterSlots": 3,
                  "returnSlots": 1
                },
                "@empty_49331": {
                  "entryPoint": null,
                  "id": 49331,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "@endsWith_49915": {
                  "entryPoint": 8545,
                  "id": 49915,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "@findPtr_50101": {
                  "entryPoint": 10495,
                  "id": 50101,
                  "parameterSlots": 4,
                  "returnSlots": 1
                },
                "@find_50270": {
                  "entryPoint": 9103,
                  "id": 50270,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "@getBuildInfoFile_53451": {
                  "entryPoint": 3299,
                  "id": 53451,
                  "parameterSlots": 3,
                  "returnSlots": 1
                },
                "@getContractInfo_53351": {
                  "entryPoint": 2346,
                  "id": 53351,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "@getFullyQualifiedName_53226": {
                  "entryPoint": 9477,
                  "id": 53226,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "@getOutDir_53475": {
                  "entryPoint": 2186,
                  "id": 53475,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "@log10_48636": {
                  "entryPoint": 10279,
                  "id": 48636,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "@log_20825": {
                  "entryPoint": 1022,
                  "id": 20825,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "@log_20853": {
                  "entryPoint": 1092,
                  "id": 20853,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "@memcpy_48981": {
                  "entryPoint": 10954,
                  "id": 48981,
                  "parameterSlots": 3,
                  "returnSlots": 0
                },
                "@rfindPtr_50227": {
                  "entryPoint": 9541,
                  "id": 50227,
                  "parameterSlots": 4,
                  "returnSlots": 1
                },
                "@runAsBashCommand_53905": {
                  "entryPoint": 5683,
                  "id": 53905,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "@run_53993": {
                  "entryPoint": 461,
                  "id": 53993,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "@setUp_53952": {
                  "entryPoint": 127,
                  "id": 53952,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "@split_50389": {
                  "entryPoint": 10783,
                  "id": 50389,
                  "parameterSlots": 3,
                  "returnSlots": 1
                },
                "@split_50408": {
                  "entryPoint": 9334,
                  "id": 50408,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "@toBashCommand_53822": {
                  "entryPoint": 8789,
                  "id": 53822,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "@toSlice_49003": {
                  "entryPoint": 7665,
                  "id": 49003,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "@toString_47141": {
                  "entryPoint": 8642,
                  "id": 47141,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "@toString_49228": {
                  "entryPoint": 9372,
                  "id": 49228,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "@until_49971": {
                  "entryPoint": 9814,
                  "id": 49971,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "@validateImplementation_51471": {
                  "entryPoint": 1652,
                  "id": 51471,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "abi_decode_available_length_bytes_fromMemory": {
                  "entryPoint": 11340,
                  "id": null,
                  "parameterSlots": 3,
                  "returnSlots": 1
                },
                "abi_decode_bytes_fromMemory": {
                  "entryPoint": 11456,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_tuple_t_address_fromMemory": {
                  "entryPoint": 11076,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_tuple_t_bool_fromMemory": {
                  "entryPoint": 12321,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_tuple_t_bytes_memory_ptr_fromMemory": {
                  "entryPoint": 11488,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_tuple_t_string_memory_ptr_fromMemory": {
                  "entryPoint": 12053,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_tuple_t_struct$_FfiResult_$8582_memory_ptr_fromMemory": {
                  "entryPoint": 13261,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_tuple_t_uint256_fromMemory": {
                  "entryPoint": 11117,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_string": {
                  "entryPoint": 11178,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_tuple_packed_t_bytes_memory_ptr_t_bytes_memory_ptr__to_t_bytes_memory_ptr_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed": {
                  "entryPoint": 11541,
                  "id": null,
                  "parameterSlots": 3,
                  "returnSlots": 1
                },
                "abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 3,
                  "returnSlots": 1
                },
                "abi_encode_tuple_packed_t_string_memory_ptr_t_stringliteral_681afa780d17da29203322b473d3f210a7d621259a4e6ce9e403f5a266ff719a__to_t_string_memory_ptr_t_bytes1__nonPadded_inplace_fromStack_reversed": {
                  "entryPoint": 14311,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_tuple_packed_t_string_memory_ptr_t_stringliteral_69ae65ff9142d8f87b3884b153358f78dcd4f6339bb046b9a6d16c966fa813af__to_t_string_memory_ptr_t_bytes11__nonPadded_inplace_fromStack_reversed": {
                  "entryPoint": 12796,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_tuple_packed_t_string_memory_ptr_t_stringliteral_96d280011b274d9410ea6c6fc28e2bb076b01d2fac329c49c4b29a719ec4650c_t_string_memory_ptr__to_t_string_memory_ptr_t_bytes1_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed": {
                  "entryPoint": 14348,
                  "id": null,
                  "parameterSlots": 3,
                  "returnSlots": 1
                },
                "abi_encode_tuple_packed_t_string_memory_ptr_t_stringliteral_fba9715e477e68952d3f1df7a185b3708aadad50ec10cc793973864023868527_t_string_memory_ptr_t_stringliteral_fba9715e477e68952d3f1df7a185b3708aadad50ec10cc793973864023868527_t_string_memory_ptr_t_stringliteral_fba9715e477e68952d3f1df7a185b3708aadad50ec10cc793973864023868527_t_string_memory_ptr_t_stringliteral_94311adc0a0cd4e10be11b23bd4316b8cffa4adf693e8f96f5c075aa439a7972__to_t_string_memory_ptr_t_bytes1_t_string_memory_ptr_t_bytes1_t_string_memory_ptr_t_bytes1_t_string_memory_ptr_t_bytes5__nonPadded_inplace_fromStack_reversed": {
                  "entryPoint": 12126,
                  "id": null,
                  "parameterSlots": 5,
                  "returnSlots": 1
                },
                "abi_encode_tuple_packed_t_stringliteral_08801615ab40adc93bf881a8fa998cec8215450529dace7649c906794b645fd9_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed": {
                  "entryPoint": 11920,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_tuple_packed_t_stringliteral_29a2b74f226f0ae680d4b1730e672f85f1c84ce9f2c45ff21557229ab3df8027_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed": {
                  "entryPoint": 11833,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_tuple_packed_t_stringliteral_3b0c29718fa0ccfd3c548e0fdf398a1d76969c362a61df53627e5e4f64fab1e8_t_string_memory_ptr_t_stringliteral_dd0e6e5fb2dfed5daf937831e40458612ea423d5675571cc5b1b64fd260d1245__to_t_bytes31_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed": {
                  "entryPoint": 12355,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_tuple_packed_t_stringliteral_3f120aa75756516f8ad13d558a5b9e5a44bb19eefe0388ce8c7f36f6df8edea5_t_string_memory_ptr_t_stringliteral_9a274a4ef728d0f993bc2f4dc24a093c4d7da9d1cb0dff5da2bf5cfca4271809__to_t_bytes14_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed": {
                  "entryPoint": 14106,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_tuple_packed_t_stringliteral_45942a044068f475a72b247d918918cfb3543fa9d2f925dce5c26b7172dbe289_t_string_memory_ptr_t_stringliteral_aa9d79cc8375f222c2818bc0c013f6b7c3934b6f21aedb1df102a8f780a1b664_t_string_memory_ptr_t_stringliteral_6e9f33448a4153023cdaf3eb759f1afdc24aba433a3e18b683f8c04a6eaa69f0__to_t_bytes26_t_string_memory_ptr_t_bytes25_t_string_memory_ptr_t_bytes1__nonPadded_inplace_fromStack_reversed": {
                  "entryPoint": 11588,
                  "id": null,
                  "parameterSlots": 3,
                  "returnSlots": 1
                },
                "abi_encode_tuple_packed_t_stringliteral_45942a044068f475a72b247d918918cfb3543fa9d2f925dce5c26b7172dbe289_t_string_memory_ptr_t_stringliteral_e64009107d042bdc478cc69a5433e4573ea2e8a23a46646c0ee241e30c888e73_t_string_memory_ptr__to_t_bytes26_t_string_memory_ptr_t_bytes2_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed": {
                  "entryPoint": 11731,
                  "id": null,
                  "parameterSlots": 3,
                  "returnSlots": 1
                },
                "abi_encode_tuple_packed_t_stringliteral_459e684ed08b96f40b9b516154105232b46d6e25e3ebbcc2460d0ad2691a0f84_t_string_memory_ptr__to_t_bytes28_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed": {
                  "entryPoint": 14018,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_tuple_packed_t_stringliteral_47a92f1f2e2401ec3324f84072908fea4ea6788425ad1f8f366b1db3c55810d9_t_string_memory_ptr_t_stringliteral_93bcd8f909ee99a96370a8190ddeafae0a627cb872c93cfdab495c157ddc6c8f_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_bytes13_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed": {
                  "entryPoint": 13895,
                  "id": null,
                  "parameterSlots": 3,
                  "returnSlots": 1
                },
                "abi_encode_tuple_packed_t_stringliteral_6e9f33448a4153023cdaf3eb759f1afdc24aba433a3e18b683f8c04a6eaa69f0_t_string_memory_ptr_t_stringliteral_6e9f33448a4153023cdaf3eb759f1afdc24aba433a3e18b683f8c04a6eaa69f0__to_t_bytes1_t_string_memory_ptr_t_bytes1__nonPadded_inplace_fromStack_reversed": {
                  "entryPoint": 12750,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_tuple_packed_t_stringliteral_911dd02035025c2cb695e87f546c8657a33a4f437472b320b67efab6662a5c76_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed": {
                  "entryPoint": 13023,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_tuple_packed_t_stringliteral_9645b1309bf78e4558cd11f0c8b7c479bbb946c623d04c306a8843ee1cc47506_t_string_memory_ptr_t_stringliteral_3b53890135633717feb8747563f231c42249fa1cfe7d1f04d5790e40902f3b91__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed": {
                  "entryPoint": 13431,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_tuple_packed_t_stringliteral_97996f6d547fd3154e3c44156fcd12ba2952d6646db5187f6bd117ff435085a8_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed": {
                  "entryPoint": 12843,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_tuple_packed_t_stringliteral_9acc65371218b2be388de4c512999c5773d7c7e8cfe55ef8b9c7f869e0e7945b_t_string_memory_ptr_t_stringliteral_aad8893e597421c55956295138eb041c0150d1e2975daa37e4c3a126e8685848__to_t_bytes20_t_string_memory_ptr_t_bytes12__nonPadded_inplace_fromStack_reversed": {
                  "entryPoint": 12609,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_address_t_bytes_memory_ptr__to_t_address_t_bytes_memory_ptr__fromStack_reversed": {
                  "entryPoint": 11241,
                  "id": null,
                  "parameterSlots": 3,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_array$_t_string_memory_ptr_$dyn_memory_ptr__to_t_array$_t_string_memory_ptr_$dyn_memory_ptr__fromStack_reversed": {
                  "entryPoint": 13161,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_bytes_memory_ptr__to_t_bytes_memory_ptr__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
                  "entryPoint": 11222,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__fromStack_reversed": {
                  "entryPoint": 12691,
                  "id": null,
                  "parameterSlots": 3,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_string_memory_ptr_t_stringliteral_0ec1952d7acb1df54d89163ca83f1d7b360061eb9c0c5c501b4eac52c5c807e4__to_t_string_memory_ptr_t_string_memory_ptr__fromStack_reversed": {
                  "entryPoint": 12544,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_string_memory_ptr_t_stringliteral_0f3ac612dde053e2dba53344fdd4fdfcedab8a75b1f141a9e2889b50a75851e1__to_t_string_memory_ptr_t_string_memory_ptr__fromStack_reversed": {
                  "entryPoint": 12474,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_string_memory_ptr_t_stringliteral_94ac7d5548e308c1d3c62d3cec2f12ac4e8340c7ba9c9bd462561ccfdd974d98__to_t_string_memory_ptr_t_string_memory_ptr__fromStack_reversed": {
                  "entryPoint": 12264,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_stringliteral_2ef6555c4d06f7a53d2dd092327f3256a8d6f18aff592d5349c12226686be6c5__to_t_string_memory_ptr__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_stringliteral_47f5c9ccb1f88a7d09e89263cb3ed348d4673e8f555074bf0b0996dc8143e7bc__to_t_string_memory_ptr__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_stringliteral_524873d67beb7637903c52887510c8a7ea71785147c24441a8c36e6df12a4c44_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__fromStack_reversed": {
                  "entryPoint": 13097,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_stringliteral_ae11223e55da1785bb01a018df547ee9df83f6bfc03bcf9ee05fa29541f23f06_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__fromStack_reversed": {
                  "entryPoint": 12000,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "allocate_memory": {
                  "entryPoint": 11299,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "checked_add_t_uint256": {
                  "entryPoint": 14292,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "checked_exp_helper": {
                  "entryPoint": 14431,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 2
                },
                "checked_exp_t_uint256_t_uint256": {
                  "entryPoint": 14659,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "checked_exp_unsigned": {
                  "entryPoint": 14498,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "checked_mul_t_uint256": {
                  "entryPoint": 14408,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "checked_sub_t_uint256": {
                  "entryPoint": 14087,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "copy_memory_to_memory_with_cleanup": {
                  "entryPoint": 11142,
                  "id": null,
                  "parameterSlots": 3,
                  "returnSlots": 0
                },
                "decrement_t_uint256": {
                  "entryPoint": 14671,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "increment_t_uint256": {
                  "entryPoint": 14694,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "increment_t_uint8": {
                  "entryPoint": 12992,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "panic_error_0x11": {
                  "entryPoint": 12970,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "panic_error_0x12": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "panic_error_0x32": {
                  "entryPoint": 12728,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "panic_error_0x41": {
                  "entryPoint": 11277,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "panic_error_0x51": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                }
              },
              "object": "608060405234801561001057600080fd5b50600436106100415760003560e01c80630a9254e414610046578063c040622614610050578063f8ccbf4714610058575b600080fd5b61004e61007f565b005b61004e6101cd565b600c5461006b9062010000900460ff1681565b604051901515815260200160405180910390f35b60405163350d56bf60e01b815260206004820152600b60248201526a474f565f4144445245535360a81b6044820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063350d56bf90606401602060405180830381865afa1580156100ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061010e9190612b44565b600c80546001600160a01b03929092166301000000026301000000600160b81b031990921691909117905560405163c1978d1f60e01b815260206004820152600b60248201526a505249564154455f4b455960a81b6044820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063c1978d1f90606401602060405180830381865afa1580156101a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101c89190612b6d565b600e55565b600e5460405163ce817d4760e01b81526004810191909152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ce817d4790602401600060405180830381600087803b15801561021e57600080fd5b505af1158015610232573d6000803e3d6000fd5b5050604080518082018252600c8082526b169192551bdad95b8b9cdbdb60a21b602083015254915163010000009092046001600160a01b031660248301526102a99350915060440160408051601f198184030181529190526020810180516001600160e01b03166326dcff1560e01b179052610388565b600d80546001600160a01b0319166001600160a01b039290921691909117905560408051808201909152601281527102a37b5b2b71030b2323932b9b99034b99d160751b60208201526102fb906103fe565b600d54610310906001600160a01b0316610444565b7f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d60001c6001600160a01b03166376eadd366040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561036e57600080fd5b505af1158015610382573d6000803e3d6000fd5b50505050565b60006103e96040805160e081018252606080825260208083018290528284018290526000828401819052608080850182905260a08086018390528651908101875282815292830182905294820183905281830152928301529060c082015290565b6103f484848361048c565b9150505b92915050565b610441816040516024016104129190612bd6565b60408051601f198184030181529190526020810180516001600160e01b031663104c13eb60e21b179052610507565b50565b6040516001600160a01b03821660248201526104419060440160408051601f198184030181529190526020810180516001600160e01b031663161765e160e11b179052610507565b6000806104998584610510565b90506104fc6040518060400160405280601d81526020017f4552433139363750726f78792e736f6c3a4552433139363750726f787900000081525082866040516020016104e7929190612be9565b60405160208183030381529060405285610527565b9150505b9392505050565b61044181610653565b600061051c8383610674565b610500838360200151845b60c0810151516000901561054b5761054484848460c00151610684565b9050610500565b604051638d1cc92560e01b8152600090737109709ecfa91a80626ff3989d68f67f5b1dd12d90638d1cc92590610585908890600401612bd6565b600060405180830381865afa1580156105a2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526105ca9190810190612ce0565b905060006105f882866040516020016105e4929190612d15565b6040516020818303038152906040526107c0565b90506001600160a01b03811661064a57858560405160200161061b929190612d44565b60408051601f198184030181529082905262461bcd60e51b825261064191600401612bd6565b60405180910390fd5b91506105009050565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b610680828260006107d3565b5050565b60008061068f61088a565b9050600061069d868361092a565b905060006106b48260600151836020015185610ce3565b905060006106c483838989610e74565b905060006106d182611633565b602081015181519192509060030b156106fb5789826040015160405160200161061b929190612dd3565b60006107366040518060400160405280601581526020017402232b83637bcb2b2103a379030b2323932b9b99d1605d1b8152508360016117d0565b60405163c6ce059d60e01b8152909150737109709ecfa91a80626ff3989d68f67f5b1dd12d9063c6ce059d90610770908490600401612bd6565b602060405180830381865afa15801561078d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b19190612b44565b9b9a5050505050505050505050565b6000808251602084016000f09392505050565b8160a00151156107e257505050565b60006107ef8484846118e4565b905060006107fc82611633565b602081015181519192509060030b15801561084c575061084c61083d604051806040016040528060078152602001665355434345535360c81b815250611df1565b61084683611df1565b90611e1e565b1561085957505050505050565b6040820151511561087957816040015160405160200161061b9190612e39565b8060405160200161061b9190612e90565b60408051808201825260038152621bdd5d60ea1b602082015290516334515cdb60e21b8152606091737109709ecfa91a80626ff3989d68f67f5b1dd12d91829063d145736c906108de908490600401612ee0565b600060405180830381865afa1580156108fb573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109239190810190612f15565b9250505090565b61095c6040518060a0016040528060608152602001606081526020016060815260200160608152602001606081525090565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d90506109a76040518060a0016040528060608152602001606081526020016060815260200160608152602001606081525090565b6109b085611e45565b602082015260006109c086612024565b90506000836001600160a01b031663d930a0e66040518163ffffffff1660e01b8152600401600060405180830381865afa158015610a02573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610a2a9190810190612f15565b86838560200151604051602001610a449493929190612f5e565b60408051601f19818403018152908290526360f9bb1160e01b825291506000906001600160a01b038616906360f9bb1190610a83908590600401612bd6565b600060405180830381865afa158015610aa0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610ac89190810190612f15565b604051636da11afb60e11b81529091506001600160a01b0386169063db4235f690610af7908490600401612fe8565b602060405180830381865afa158015610b14573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b389190613021565b610b4d578160405160200161061b9190613043565b6040516309389f5960e31b81526001600160a01b038616906349c4fac890610b799084906004016130ba565b600060405180830381865afa158015610b96573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610bbe9190810190612f15565b84526040516309389f5960e31b81526001600160a01b038616906349c4fac890610bec908490600401613100565b600060405180830381865afa158015610c09573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610c319190810190612f15565b8460400181905250846001600160a01b03166349c4fac8828660000151604051602001610c5e9190613141565b6040516020818303038152906040526040518363ffffffff1660e01b8152600401610c8a929190613193565b600060405180830381865afa158015610ca7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610ccf9190810190612f15565b606085015250608083015250949350505050565b60408051600480825260a0820190925260609160009190816020015b6060815260200190600190039081610cff579050509050604051806040016040528060048152602001630677265760e41b81525081600081518110610d4657610d466131b8565b6020026020010181905250604051806040016040528060038152602001620b5c9b60ea1b81525081600181518110610d8057610d806131b8565b602002602001018190525084604051602001610d9c91906131ce565b60405160208183030381529060405281600281518110610dbe57610dbe6131b8565b602002602001018190525082604051602001610dda91906131fc565b60405160208183030381529060405281600381518110610dfc57610dfc6131b8565b60200260200101819052506000610e1282611633565b9050600081602001519050610e55610e4660405180604001604052806005815260200164173539b7b760d91b815250611df1565b610e4f83611df1565b90612161565b610e6a578560405160200161061b919061322b565b9695505050505050565b6040805160ff8082526120008201909252606091737109709ecfa91a80626ff3989d68f67f5b1dd12d91600091816020015b6060815260200190600190039081610ea65790505090506000604051806040016040528060038152602001620dce0f60eb1b815250828280610ee7906132c0565b935060ff1681518110610efc57610efc6131b8565b60200260200101819052506040518060400160405280600d81526020016c302e302e312d616c7068612e3560981b815250604051602001610f3d91906132df565b604051602081830303815290604052828280610f58906132c0565b935060ff1681518110610f6d57610f6d6131b8565b6020026020010181905250604051806040016040528060068152602001656465706c6f7960d01b815250828280610fa3906132c0565b935060ff1681518110610fb857610fb86131b8565b60200260200101819052506040518060400160405280600e81526020016d2d2d636f6e74726163744e616d6560901b815250828280610ff6906132c0565b935060ff168151811061100b5761100b6131b8565b60200260200101819052508760200151828280611027906132c0565b935060ff168151811061103c5761103c6131b8565b60200260200101819052506040518060400160405280600e81526020016d05a5ac6dedce8e4c2c6e8a0c2e8d60931b81525082828061107a906132c0565b935060ff168151811061108f5761108f6131b8565b6020908102919091010152875182826110a7816132c0565b935060ff16815181106110bc576110bc6131b8565b6020026020010181905250604051806040016040528060098152602001680b4b58da185a5b925960ba1b8152508282806110f5906132c0565b935060ff168151811061110a5761110a6131b8565b602002602001018190525061111e466121c2565b8282611129816132c0565b935060ff168151811061113e5761113e6131b8565b60200260200101819052506040518060400160405280600f81526020016e2d2d6275696c64496e666f46696c6560881b81525082828061117d906132c0565b935060ff1681518110611192576111926131b8565b6020026020010181905250868282806111aa906132c0565b935060ff16815181106111bf576111bf6131b8565b60200260200101819052506040518060400160405280600d81526020016c2d2d6c6963656e73655479706560981b8152508282806111fc906132c0565b935060ff1681518110611211576112116131b8565b6020026020010181905250876040015182828061122d906132c0565b935060ff1681518110611242576112426131b8565b6020908102919091010152855115611348576040805180820190915260158152742d2d636f6e7374727563746f7242797465636f646560581b6020820152828261128b816132c0565b935060ff16815181106112a0576112a06131b8565b60209081029190910101526040516371aad10d60e01b81526001600160a01b038416906371aad10d906112d7908990600401612bd6565b600060405180830381865afa1580156112f4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261131c9190810190612f15565b8282611327816132c0565b935060ff168151811061133c5761133c6131b8565b60200260200101819052505b8460200151156113f1576040805180820190915260128152712d2d766572696679536f75726365436f646560701b60208201528282611386816132c0565b935060ff168151811061139b5761139b6131b8565b60200260200101819052506040518060400160405280600581526020016466616c736560d81b8152508282806113d0906132c0565b935060ff16815181106113e5576113e56131b8565b60200260200101819052505b6114066114018660400151611df1565b511590565b6114895760408051808201909152600b81526a0b4b5c995b185e595c925960aa1b60208201528282611437816132c0565b935060ff168151811061144c5761144c6131b8565b60200260200101819052508460400151828280611468906132c0565b935060ff168151811061147d5761147d6131b8565b60200260200101819052505b60608501511561157a576040805180820190915260068152650b4b5cd85b1d60d21b602082015282826114bb816132c0565b935060ff16815181106114d0576114d06131b8565b60209081029190910101526060850151604051631623433d60e31b815260048101919091526001600160a01b0384169063b11a19e890602401600060405180830381865afa158015611526573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261154e9190810190612f15565b8282611559816132c0565b935060ff168151811061156e5761156e6131b8565b60200260200101819052505b60008160ff1667ffffffffffffffff81111561159857611598612c0d565b6040519080825280602002602001820160405280156115cb57816020015b60608152602001906001900390816115b65790505b50905060005b8260ff168160ff16101561162457838160ff16815181106115f4576115f46131b8565b6020026020010151828260ff1681518110611611576116116131b8565b60209081029190910101526001016115d1565b5093505050505b949350505050565b61165a6040518060600160405280600060030b815260200160608152602001606081525090565b6040805180820182526004808252630c4c2e6d60e31b602083015291516334515cdb60e21b8152737109709ecfa91a80626ff3989d68f67f5b1dd12d92600091849163d145736c916116ae91869101613329565b600060405180830381865afa1580156116cb573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526116f39190810190612f15565b905060006117018683612255565b90506000846001600160a01b031663f45c1ce7836040518263ffffffff1660e01b81526004016117319190613369565b6000604051808303816000875af1158015611750573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261177891908101906133cd565b805190915060030b158015906117915750602081015151155b80156117a05750604081015151155b15610e6a57816000815181106117b8576117b86131b8565b602002602001015160405160200161061b9190613477565b606060006117dd85611df1565b90506117ec8161084686611df1565b156118b55760006118418261183b846118356118078a611df1565b6040805180820182526000808252602091820152815180830190925282518252918201519181019190915290565b9061238f565b906123f1565b905061186f611868604051806040016040528060018152602001600560f91b815250611df1565b8290611e1e565b156118a3576118a0611899604051806040016040528060018152602001600560f91b815250611df1565b8290612476565b90505b6118ac8161249c565b92505050610500565b82156118ce57848460405160200161061b929190613647565b5050604080516020810190915260008152610500565b606060006118f061088a565b6040805160ff808252612000820190925291925060009190816020015b606081526020019060019003908161190d5790505090506000604051806040016040528060038152602001620dce0f60eb1b81525082828061194e906132c0565b935060ff1681518110611963576119636131b8565b6020026020010181905250604051806040016040528060078152602001665e312e33322e3360c81b81525060405160200161199e91906136c2565b6040516020818303038152906040528282806119b9906132c0565b935060ff16815181106119ce576119ce6131b8565b60200260200101819052506040518060400160405280600881526020016776616c696461746560c01b815250828280611a06906132c0565b935060ff1681518110611a1b57611a1b6131b8565b602002602001018190525082604051602001611a3791906131fc565b604051602081830303815290604052828280611a52906132c0565b935060ff1681518110611a6757611a676131b8565b60200260200101819052506040518060400160405280600a8152602001690b4b58dbdb9d1c9858dd60b21b815250828280611aa1906132c0565b935060ff1681518110611ab657611ab66131b8565b6020026020010181905250611acb8784612505565b8282611ad6816132c0565b935060ff1681518110611aeb57611aeb6131b8565b602090810291909101015285515115611b855760408051808201909152600b81526a2d2d7265666572656e636560a81b60208201528282611b2b816132c0565b935060ff1681518110611b4057611b406131b8565b6020026020010181905250611b59866000015184612505565b8282611b64816132c0565b935060ff1681518110611b7957611b796131b8565b60200260200101819052505b856080015115611bf35760408051808201909152601881527f2d2d756e73616665536b697053746f72616765436865636b000000000000000060208201528282611bce816132c0565b935060ff1681518110611be357611be36131b8565b6020026020010181905250611c4e565b8415611c4e576040805180820190915260128152712d2d726571756972655265666572656e636560701b60208201528282611c2d816132c0565b935060ff1681518110611c4257611c426131b8565b60200260200101819052505b60408601515115611cda5760408051808201909152600d81526c2d2d756e73616665416c6c6f7760981b60208201528282611c88816132c0565b935060ff1681518110611c9d57611c9d6131b8565b60200260200101819052508560400151828280611cb9906132c0565b935060ff1681518110611cce57611cce6131b8565b60200260200101819052505b856060015115611d3b576040805180820190915260148152732d2d756e73616665416c6c6f7752656e616d657360601b60208201528282611d1a816132c0565b935060ff1681518110611d2f57611d2f6131b8565b60200260200101819052505b60008160ff1667ffffffffffffffff811115611d5957611d59612c0d565b604051908082528060200260200182016040528015611d8c57816020015b6060815260200190600190039081611d775790505b50905060005b8260ff168160ff161015611de557838160ff1681518110611db557611db56131b8565b6020026020010151828260ff1681518110611dd257611dd26131b8565b6020908102919091010152600101611d92565b50979650505050505050565b60408051808201825260008082526020918201528151808301909252825182529182019181019190915290565b6020808301518351835192840151600093611e3c9291849190612545565b14159392505050565b60606000611e5283611df1565b9050611e83611e7c604051806040016040528060048152602001630b9cdbdb60e21b815250611df1565b8290612161565b15611ebf57610500611eba611eb3604051806040016040528060048152602001630b9cdbdb60e21b815250611df1565b8390612656565b61249c565b611eeb611ee4604051806040016040528060018152602001601d60f91b815250611df1565b82906126e0565b600103611f4757611f17611899604051806040016040528060018152602001601d60f91b815250611df1565b50610500611eba611f40604051806040016040528060018152602001601d60f91b815250611df1565b8390612476565b611f70611e7c60405180604001604052806005815260200164173539b7b760d91b815250611df1565b15612013576000611fa282611f9d604051806040016040528060018152602001602f60f81b815250611df1565b61277a565b905060008160018351611fb59190613707565b81518110611fc557611fc56131b8565b6020026020010151905061200a611eba611ffb60405180604001604052806005815260200164173539b7b760d91b815250611df1565b61200484611df1565b90612656565b95945050505050565b8260405160200161061b919061371a565b6060600061203183611df1565b905061205b611e7c604051806040016040528060048152602001630b9cdbdb60e21b815250611df1565b15612069576105008161249c565b61208e611ee4604051806040016040528060018152602001601d60f91b815250611df1565b6001036120bd57610500611eba611f40604051806040016040528060018152602001601d60f91b815250611df1565b6120e6611e7c60405180604001604052806005815260200164173539b7b760d91b815250611df1565b1561201357600061211382611f9d604051806040016040528060018152602001602f60f81b815250611df1565b905060018151111561214f57806002825161212e9190613707565b8151811061213e5761213e6131b8565b602002602001015192505050919050565b508260405160200161061b919061371a565b805182516000911115612176575060006103f8565b8151835160208501516000929161218c916137d4565b6121969190613707565b9050826020015181036121ad5760019150506103f8565b82516020840151819020912014905092915050565b606060006121cf83612827565b600101905060008167ffffffffffffffff8111156121ef576121ef612c0d565b6040519080825280601f01601f191660200182016040528015612219576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a850494508461222357509392505050565b60608060005b84518110156122e05781858281518110612277576122776131b8565b6020026020010151604051602001612290929190612d15565b6040516020818303038152906040529150600185516122af9190613707565b81146122d857816040516020016122c691906137e7565b60405160208183030381529060405291505b60010161225b565b5060408051600380825260808201909252600091816020015b60608152602001906001900390816122f95790505090508381600081518110612324576123246131b8565b6020026020010181905250604051806040016040528060028152602001612d6360f01b8152508160018151811061235d5761235d6131b8565b6020026020010181905250818160028151811061237c5761237c6131b8565b6020908102919091010152949350505050565b604080518082019091526000808252602082015260006123c184600001518560200151856000015186602001516128ff565b90508360200151816123d39190613707565b845185906123e2908390613707565b90525060208401525090919050565b60408051808201909152600080825260208201528151835110156124165750816103f8565b602080830151908401516001911461243d5750815160208481015190840151829020919020145b801561246e57825184518590612454908390613707565b905250825160208501805161246a9083906137d4565b9052505b509192915050565b6040805180820190915260008082526020820152612495838383612a1f565b5092915050565b60606000826000015167ffffffffffffffff8111156124bd576124bd612c0d565b6040519080825280601f01601f1916602001820160405280156124e7576020820181803683370190505b50905060006020820190506124958185602001518660000151612aca565b60606000612513848461092a565b805160208083015160405193945061252d9390910161380c565b60405160208183030381529060405291505092915050565b60008085841161264c57602084116125f8576000841561259057600161256c866020613707565b612577906008613848565b612582906002613943565b61258c9190613707565b1990505b835181168561259f89896137d4565b6125a99190613707565b805190935082165b8181146125e3578784116125cb578794505050505061162b565b836125d58161394f565b9450508284511690506125b1565b6125ed87856137d4565b94505050505061162b565b8383206126058588613707565b61260f90876137d4565b91505b85821061264a578482208082036126375761262d86846137d4565b935050505061162b565b612642600184613707565b925050612612565b505b5092949350505050565b604080518082019091526000808252602082015281518351101561267b5750816103f8565b81518351602085015160009291612691916137d4565b61269b9190613707565b602084015190915060019082146126bc575082516020840151819020908220145b80156126d7578351855186906126d3908390613707565b9052505b50929392505050565b600080826000015161270485600001518660200151866000015187602001516128ff565b61270e91906137d4565b90505b8351602085015161272291906137d4565b8111612495578161273281613966565b925050826000015161276985602001518361274d9190613707565b86516127599190613707565b83866000015187602001516128ff565b61277391906137d4565b9050612711565b6060600061278884846126e0565b6127939060016137d4565b67ffffffffffffffff8111156127ab576127ab612c0d565b6040519080825280602002602001820160405280156127de57816020015b60608152602001906001900390816127c95790505b50905060005b815181101561281f576127fa611eba8686612476565b82828151811061280c5761280c6131b8565b60209081029190910101526001016127e4565b509392505050565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b83106128665772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310612892576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc1000083106128b057662386f26fc10000830492506010015b6305f5e10083106128c8576305f5e100830492506008015b61271083106128dc57612710830492506004015b606483106128ee576064830492506002015b600a83106103f85760010192915050565b60008381868511612a0a57602085116129b9576000851561294b576001612927876020613707565b612932906008613848565b61293d906002613943565b6129479190613707565b1990505b8451811660008761295c8b8b6137d4565b6129669190613707565b855190915083165b8281146129ab57818610612993576129868b8b6137d4565b965050505050505061162b565b8561299d81613966565b96505083865116905061296e565b85965050505050505061162b565b508383206000905b6129cb8689613707565b8211612a08578583208082036129e7578394505050505061162b565b6129f26001856137d4565b9350508180612a0090613966565b9250506129c1565b505b612a1487876137d4565b979650505050505050565b60408051808201909152600080825260208201526000612a5185600001518660200151866000015187602001516128ff565b602080870180519186019190915251909150612a6d9082613707565b835284516020860151612a8091906137d4565b8103612a8f5760008552612ac1565b83518351612a9d91906137d4565b85518690612aac908390613707565b9052508351612abb90826137d4565b60208601525b50909392505050565b60208110612b025781518352612ae16020846137d4565b9250612aee6020836137d4565b9150612afb602082613707565b9050612aca565b6000198115612b31576001612b18836020613707565b612b2490610100613943565b612b2e9190613707565b90505b9151835183169219169190911790915250565b600060208284031215612b5657600080fd5b81516001600160a01b038116811461050057600080fd5b600060208284031215612b7f57600080fd5b5051919050565b60005b83811015612ba1578181015183820152602001612b89565b50506000910152565b60008151808452612bc2816020860160208601612b86565b601f01601f19169290920160200192915050565b6020815260006105006020830184612baa565b6001600160a01b038316815260406020820181905260009061162b90830184612baa565b634e487b7160e01b600052604160045260246000fd5b6040516060810167ffffffffffffffff81118282101715612c4657612c46612c0d565b60405290565b600067ffffffffffffffff80841115612c6757612c67612c0d565b604051601f8501601f19908116603f01168101908282118183101715612c8f57612c8f612c0d565b81604052809350858152868686011115612ca857600080fd5b612cb6866020830187612b86565b5050509392505050565b600082601f830112612cd157600080fd5b61050083835160208501612c4c565b600060208284031215612cf257600080fd5b815167ffffffffffffffff811115612d0957600080fd5b6103f484828501612cc0565b60008351612d27818460208801612b86565b835190830190612d3b818360208801612b86565b01949350505050565b7f4661696c656420746f206465706c6f7920636f6e747261637420000000000000815260008351612d7c81601a850160208801612b86565b7f207573696e6720636f6e7374727563746f722064617461202200000000000000601a918401918201528351612db9816033840160208801612b86565b601160f91b60339290910191820152603401949350505050565b7f4661696c656420746f206465706c6f7920636f6e747261637420000000000000815260008351612e0b81601a850160208801612b86565b6101d160f51b601a918401918201528351612e2d81601c840160208801612b86565b01601c01949350505050565b7f4661696c656420746f2072756e2075706772616465207361666574792076616c815268034b230ba34b7b71d160bd1b602082015260008251612e83816029850160208701612b86565b9190910160290192915050565b7f55706772616465207361666574792076616c69646174696f6e206661696c65648152611d0560f11b602082015260008251612ed3816022850160208701612b86565b9190910160220192915050565b60408152600b60408201526a1193d55391149657d3d55560aa1b60608201526080602082015260006105006080830184612baa565b600060208284031215612f2757600080fd5b815167ffffffffffffffff811115612f3e57600080fd5b8201601f81018413612f4f57600080fd5b6103f484825160208401612c4c565b60008551612f70818460208a01612b86565b8083019050602f60f81b8082528651612f90816001850160208b01612b86565b600192019182018190528551612fad816002850160208a01612b86565b60029201918201528351612fc8816003840160208801612b86565b64173539b7b760d91b600392909101918201526008019695505050505050565b604081526000612ffb6040830184612baa565b828103602084015260048152630b985cdd60e21b60208201526040810191505092915050565b60006020828403121561303357600080fd5b8151801515811461050057600080fd5b7f436f756c64206e6f742066696e642041535420696e206172746966616374200081526000825161307b81601f850160208701612b86565b7f2e205365742060617374203d20747275656020696e20666f756e6472792e746f601f939091019283015250611b5b60f21b603f820152604101919050565b6040815260006130cd6040830184612baa565b8281036020840152601181527005cc2e6e85cc2c4e6ded8eae8caa0c2e8d607b1b60208201526040810191505092915050565b6040815260006131136040830184612baa565b8281036020840152600c81526b2e6173742e6c6963656e736560a01b60208201526040810191505092915050565b732e6d657461646174612e736f75726365732e5b2760601b815260008251613170816014850160208701612b86565b6b13ae9735b2b1b1b0b5991a9b60a11b6014939091019283015250602001919050565b6040815260006131a66040830185612baa565b82810360208401526104fc8185612baa565b634e487b7160e01b600052603260045260246000fd5b6000601160f91b80835283516131eb816001860160208801612b86565b600193019283015250600201919050565b6000825161320e818460208701612b86565b6a2f6275696c642d696e666f60a81b920191825250600b01919050565b7f436f756c64206e6f742066696e64206275696c642d696e666f2066696c65207781527f697468206d61746368696e6720736f7572636520636f6465206861736820666f60208201526a0391031b7b73a3930b1ba160ad1b60408201526000825161329d81604b850160208701612b86565b91909101604b0192915050565b634e487b7160e01b600052601160045260246000fd5b600060ff821660ff81036132d6576132d66132aa565b60010192915050565b7f406f70656e7a657070656c696e2f646566656e6465722d6465706c6f792d636c81526801a595b9d0b58db1a560be1b602082015260008251612e83816029850160208701612b86565b60408152601660408201527509ea08a9cb48aa0a08a98929cbe8482a690bea082a8960531b60608201526080602082015260006105006080830184612baa565b600060208083016020845280855180835260408601915060408160051b87010192506020870160005b828110156133c057603f198886030184526133ae858351612baa565b94509285019290850190600101613392565b5092979650505050505050565b6000602082840312156133df57600080fd5b815167ffffffffffffffff808211156133f757600080fd5b908301906060828603121561340b57600080fd5b613413612c23565b82518060030b811461342457600080fd5b815260208301518281111561343857600080fd5b61344487828601612cc0565b60208301525060408301518281111561345c57600080fd5b61346887828601612cc0565b60408301525095945050505050565b7f4661696c656420746f2072756e206261736820636f6d6d616e642077697468208152601160f91b6020820152600082516134b9816021850160208701612b86565b7f222e20496620796f7520617265207573696e672057696e646f77732c2073657460219390910192830152507f20746865204f50454e5a455050454c494e5f424153485f5041544820656e766960418201527f726f6e6d656e74207661726961626c6520746f207468652066756c6c7920717560618201527f616c69666965642070617468206f66207468652062617368206578656375746160818201527f626c652e20466f72206578616d706c652c20696620796f75206172652075736960a18201527f6e672047697420666f722057696e646f77732c206164642074686520666f6c6c60c18201527f6f77696e67206c696e6520696e20746865202e656e762066696c65206f66207960e18201527f6f75722070726f6a65637420287573696e6720666f727761726420736c6173686101018201527f6573293a0a4f50454e5a455050454c494e5f424153485f504154483d22433a2f6101218201527f50726f6772616d2046696c65732f4769742f62696e2f6261736822000000000061014182015261015c01919050565b7f4661696c656420746f2066696e64206c696e65207769746820707265666978208152602760f81b602082015260008351613689816021850160208801612b86565b6c0139034b71037baba383aba1d1609d1b60219184019182015283516136b681602e840160208801612b86565b01602e01949350505050565b7f406f70656e7a657070656c696e2f75706772616465732d636f726540000000008152600082516136fa81601c850160208701612b86565b91909101601c0192915050565b818103818111156103f8576103f86132aa565b6d021b7b73a3930b1ba103730b6b2960951b81526000825161374381600e850160208701612b86565b7f206d75737420626520696e2074686520666f726d6174204d79436f6e74726163600e9390910192830152507f742e736f6c3a4d79436f6e7472616374206f72204d79436f6e74726163742e73602e8201527f6f6c206f72206f75742f4d79436f6e74726163742e736f6c2f4d79436f6e7472604e8201526730b1ba173539b7b760c11b606e820152607601919050565b808201808211156103f8576103f86132aa565b600082516137f9818460208701612b86565b600160fd1b920191825250600101919050565b6000835161381e818460208801612b86565b601d60f91b908301908152835161383c816001840160208801612b86565b01600101949350505050565b80820281158282048414176103f8576103f86132aa565b600181815b8085111561389a578160001904821115613880576138806132aa565b8085161561388d57918102915b93841c9390800290613864565b509250929050565b6000826138b1575060016103f8565b816138be575060006103f8565b81600181146138d457600281146138de576138fa565b60019150506103f8565b60ff8411156138ef576138ef6132aa565b50506001821b6103f8565b5060208310610133831016604e8410600b841016171561391d575081810a6103f8565b613927838361385f565b806000190482111561393b5761393b6132aa565b029392505050565b600061050083836138a2565b60008161395e5761395e6132aa565b506000190190565b600060018201613978576139786132aa565b506001019056fea264697066735822122038889c129a1120541618855b868adfc5d08d5f58ca552631f200bc328143200f64736f6c63430008190033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x41 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xA9254E4 EQ PUSH2 0x46 JUMPI DUP1 PUSH4 0xC0406226 EQ PUSH2 0x50 JUMPI DUP1 PUSH4 0xF8CCBF47 EQ PUSH2 0x58 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4E PUSH2 0x7F JUMP JUMPDEST STOP JUMPDEST PUSH2 0x4E PUSH2 0x1CD JUMP JUMPDEST PUSH1 0xC SLOAD PUSH2 0x6B SWAP1 PUSH3 0x10000 SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x350D56BF PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xB PUSH1 0x24 DUP3 ADD MSTORE PUSH11 0x474F565F41444452455353 PUSH1 0xA8 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH20 0x7109709ECFA91A80626FF3989D68F67F5B1DD12D SWAP1 PUSH4 0x350D56BF SWAP1 PUSH1 0x64 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xEA JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x10E SWAP2 SWAP1 PUSH2 0x2B44 JUMP JUMPDEST PUSH1 0xC DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND PUSH4 0x1000000 MUL PUSH4 0x1000000 PUSH1 0x1 PUSH1 0xB8 SHL SUB NOT SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH4 0xC1978D1F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xB PUSH1 0x24 DUP3 ADD MSTORE PUSH11 0x505249564154455F4B4559 PUSH1 0xA8 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH20 0x7109709ECFA91A80626FF3989D68F67F5B1DD12D SWAP1 PUSH4 0xC1978D1F SWAP1 PUSH1 0x64 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1A4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1C8 SWAP2 SWAP1 PUSH2 0x2B6D JUMP JUMPDEST PUSH1 0xE SSTORE JUMP JUMPDEST PUSH1 0xE SLOAD PUSH1 0x40 MLOAD PUSH4 0xCE817D47 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH20 0x7109709ECFA91A80626FF3989D68F67F5B1DD12D SWAP1 PUSH4 0xCE817D47 SWAP1 PUSH1 0x24 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x21E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x232 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD DUP3 MSTORE PUSH1 0xC DUP1 DUP3 MSTORE PUSH12 0x169192551BDAD95B8B9CDBDB PUSH1 0xA2 SHL PUSH1 0x20 DUP4 ADD MSTORE SLOAD SWAP2 MLOAD PUSH4 0x1000000 SWAP1 SWAP3 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x24 DUP4 ADD MSTORE PUSH2 0x2A9 SWAP4 POP SWAP2 POP PUSH1 0x44 ADD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0x26DCFF15 PUSH1 0xE0 SHL OR SWAP1 MSTORE PUSH2 0x388 JUMP JUMPDEST PUSH1 0xD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x12 DUP2 MSTORE PUSH18 0x2A37B5B2B71030B2323932B9B99034B99D1 PUSH1 0x75 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x2FB SWAP1 PUSH2 0x3FE JUMP JUMPDEST PUSH1 0xD SLOAD PUSH2 0x310 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x444 JUMP JUMPDEST PUSH32 0x885CB69240A935D632D79C317109709ECFA91A80626FF3989D68F67F5B1DD12D PUSH1 0x0 SHR PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x76EADD36 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x36E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x382 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3E9 PUSH1 0x40 DUP1 MLOAD PUSH1 0xE0 DUP2 ADD DUP3 MSTORE PUSH1 0x60 DUP1 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 ADD DUP3 SWAP1 MSTORE DUP3 DUP5 ADD DUP3 SWAP1 MSTORE PUSH1 0x0 DUP3 DUP5 ADD DUP2 SWAP1 MSTORE PUSH1 0x80 DUP1 DUP6 ADD DUP3 SWAP1 MSTORE PUSH1 0xA0 DUP1 DUP7 ADD DUP4 SWAP1 MSTORE DUP7 MLOAD SWAP1 DUP2 ADD DUP8 MSTORE DUP3 DUP2 MSTORE SWAP3 DUP4 ADD DUP3 SWAP1 MSTORE SWAP5 DUP3 ADD DUP4 SWAP1 MSTORE DUP2 DUP4 ADD MSTORE SWAP3 DUP4 ADD MSTORE SWAP1 PUSH1 0xC0 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH2 0x3F4 DUP5 DUP5 DUP4 PUSH2 0x48C JUMP JUMPDEST SWAP2 POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x441 DUP2 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x412 SWAP2 SWAP1 PUSH2 0x2BD6 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0x104C13EB PUSH1 0xE2 SHL OR SWAP1 MSTORE PUSH2 0x507 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH2 0x441 SWAP1 PUSH1 0x44 ADD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0x161765E1 PUSH1 0xE1 SHL OR SWAP1 MSTORE PUSH2 0x507 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x499 DUP6 DUP5 PUSH2 0x510 JUMP JUMPDEST SWAP1 POP PUSH2 0x4FC PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1D DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x4552433139363750726F78792E736F6C3A4552433139363750726F7879000000 DUP2 MSTORE POP DUP3 DUP7 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x4E7 SWAP3 SWAP2 SWAP1 PUSH2 0x2BE9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP6 PUSH2 0x527 JUMP JUMPDEST SWAP2 POP POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x441 DUP2 PUSH2 0x653 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x51C DUP4 DUP4 PUSH2 0x674 JUMP JUMPDEST PUSH2 0x500 DUP4 DUP4 PUSH1 0x20 ADD MLOAD DUP5 JUMPDEST PUSH1 0xC0 DUP2 ADD MLOAD MLOAD PUSH1 0x0 SWAP1 ISZERO PUSH2 0x54B JUMPI PUSH2 0x544 DUP5 DUP5 DUP5 PUSH1 0xC0 ADD MLOAD PUSH2 0x684 JUMP JUMPDEST SWAP1 POP PUSH2 0x500 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x8D1CC925 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 SWAP1 PUSH20 0x7109709ECFA91A80626FF3989D68F67F5B1DD12D SWAP1 PUSH4 0x8D1CC925 SWAP1 PUSH2 0x585 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x2BD6 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x5A2 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x5CA SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x2CE0 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x5F8 DUP3 DUP7 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x5E4 SWAP3 SWAP2 SWAP1 PUSH2 0x2D15 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH2 0x7C0 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x64A JUMPI DUP6 DUP6 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x61B SWAP3 SWAP2 SWAP1 PUSH2 0x2D44 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP1 DUP3 SWAP1 MSTORE PUSH3 0x461BCD PUSH1 0xE5 SHL DUP3 MSTORE PUSH2 0x641 SWAP2 PUSH1 0x4 ADD PUSH2 0x2BD6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST SWAP2 POP PUSH2 0x500 SWAP1 POP JUMP JUMPDEST DUP1 MLOAD PUSH11 0x636F6E736F6C652E6C6F67 PUSH1 0x20 DUP4 ADD PUSH1 0x0 DUP1 DUP5 DUP4 DUP6 GAS STATICCALL POP POP POP POP POP JUMP JUMPDEST PUSH2 0x680 DUP3 DUP3 PUSH1 0x0 PUSH2 0x7D3 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x68F PUSH2 0x88A JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x69D DUP7 DUP4 PUSH2 0x92A JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x6B4 DUP3 PUSH1 0x60 ADD MLOAD DUP4 PUSH1 0x20 ADD MLOAD DUP6 PUSH2 0xCE3 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x6C4 DUP4 DUP4 DUP10 DUP10 PUSH2 0xE74 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x6D1 DUP3 PUSH2 0x1633 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD MLOAD DUP2 MLOAD SWAP2 SWAP3 POP SWAP1 PUSH1 0x3 SIGNEXTEND ISZERO PUSH2 0x6FB JUMPI DUP10 DUP3 PUSH1 0x40 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x61B SWAP3 SWAP2 SWAP1 PUSH2 0x2DD3 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x736 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x15 DUP2 MSTORE PUSH1 0x20 ADD PUSH21 0x2232B83637BCB2B2103A379030B2323932B9B99D1 PUSH1 0x5D SHL DUP2 MSTORE POP DUP4 PUSH1 0x1 PUSH2 0x17D0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xC6CE059D PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 SWAP2 POP PUSH20 0x7109709ECFA91A80626FF3989D68F67F5B1DD12D SWAP1 PUSH4 0xC6CE059D SWAP1 PUSH2 0x770 SWAP1 DUP5 SWAP1 PUSH1 0x4 ADD PUSH2 0x2BD6 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x78D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x7B1 SWAP2 SWAP1 PUSH2 0x2B44 JUMP JUMPDEST SWAP12 SWAP11 POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 MLOAD PUSH1 0x20 DUP5 ADD PUSH1 0x0 CREATE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP2 PUSH1 0xA0 ADD MLOAD ISZERO PUSH2 0x7E2 JUMPI POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7EF DUP5 DUP5 DUP5 PUSH2 0x18E4 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x7FC DUP3 PUSH2 0x1633 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD MLOAD DUP2 MLOAD SWAP2 SWAP3 POP SWAP1 PUSH1 0x3 SIGNEXTEND ISZERO DUP1 ISZERO PUSH2 0x84C JUMPI POP PUSH2 0x84C PUSH2 0x83D PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x7 DUP2 MSTORE PUSH1 0x20 ADD PUSH7 0x53554343455353 PUSH1 0xC8 SHL DUP2 MSTORE POP PUSH2 0x1DF1 JUMP JUMPDEST PUSH2 0x846 DUP4 PUSH2 0x1DF1 JUMP JUMPDEST SWAP1 PUSH2 0x1E1E JUMP JUMPDEST ISZERO PUSH2 0x859 JUMPI POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MLOAD MLOAD ISZERO PUSH2 0x879 JUMPI DUP2 PUSH1 0x40 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x61B SWAP2 SWAP1 PUSH2 0x2E39 JUMP JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x61B SWAP2 SWAP1 PUSH2 0x2E90 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD DUP3 MSTORE PUSH1 0x3 DUP2 MSTORE PUSH3 0x1BDD5D PUSH1 0xEA SHL PUSH1 0x20 DUP3 ADD MSTORE SWAP1 MLOAD PUSH4 0x34515CDB PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x60 SWAP2 PUSH20 0x7109709ECFA91A80626FF3989D68F67F5B1DD12D SWAP2 DUP3 SWAP1 PUSH4 0xD145736C SWAP1 PUSH2 0x8DE SWAP1 DUP5 SWAP1 PUSH1 0x4 ADD PUSH2 0x2EE0 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x8FB JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x923 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x2F15 JUMP JUMPDEST SWAP3 POP POP POP SWAP1 JUMP JUMPDEST PUSH2 0x95C PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH20 0x7109709ECFA91A80626FF3989D68F67F5B1DD12D SWAP1 POP PUSH2 0x9A7 PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH2 0x9B0 DUP6 PUSH2 0x1E45 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x9C0 DUP7 PUSH2 0x2024 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD930A0E6 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xA02 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0xA2A SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x2F15 JUMP JUMPDEST DUP7 DUP4 DUP6 PUSH1 0x20 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xA44 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2F5E JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP1 DUP3 SWAP1 MSTORE PUSH4 0x60F9BB11 PUSH1 0xE0 SHL DUP3 MSTORE SWAP2 POP PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND SWAP1 PUSH4 0x60F9BB11 SWAP1 PUSH2 0xA83 SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x2BD6 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xAA0 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0xAC8 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x2F15 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x6DA11AFB PUSH1 0xE1 SHL DUP2 MSTORE SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND SWAP1 PUSH4 0xDB4235F6 SWAP1 PUSH2 0xAF7 SWAP1 DUP5 SWAP1 PUSH1 0x4 ADD PUSH2 0x2FE8 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xB14 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xB38 SWAP2 SWAP1 PUSH2 0x3021 JUMP JUMPDEST PUSH2 0xB4D JUMPI DUP2 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x61B SWAP2 SWAP1 PUSH2 0x3043 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x9389F59 PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND SWAP1 PUSH4 0x49C4FAC8 SWAP1 PUSH2 0xB79 SWAP1 DUP5 SWAP1 PUSH1 0x4 ADD PUSH2 0x30BA JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xB96 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0xBBE SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x2F15 JUMP JUMPDEST DUP5 MSTORE PUSH1 0x40 MLOAD PUSH4 0x9389F59 PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND SWAP1 PUSH4 0x49C4FAC8 SWAP1 PUSH2 0xBEC SWAP1 DUP5 SWAP1 PUSH1 0x4 ADD PUSH2 0x3100 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xC09 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0xC31 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x2F15 JUMP JUMPDEST DUP5 PUSH1 0x40 ADD DUP2 SWAP1 MSTORE POP DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x49C4FAC8 DUP3 DUP7 PUSH1 0x0 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xC5E SWAP2 SWAP1 PUSH2 0x3141 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC8A SWAP3 SWAP2 SWAP1 PUSH2 0x3193 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xCA7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0xCCF SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x2F15 JUMP JUMPDEST PUSH1 0x60 DUP6 ADD MSTORE POP PUSH1 0x80 DUP4 ADD MSTORE POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x4 DUP1 DUP3 MSTORE PUSH1 0xA0 DUP3 ADD SWAP1 SWAP3 MSTORE PUSH1 0x60 SWAP2 PUSH1 0x0 SWAP2 SWAP1 DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0xCFF JUMPI SWAP1 POP POP SWAP1 POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x4 DUP2 MSTORE PUSH1 0x20 ADD PUSH4 0x6772657 PUSH1 0xE4 SHL DUP2 MSTORE POP DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xD46 JUMPI PUSH2 0xD46 PUSH2 0x31B8 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x3 DUP2 MSTORE PUSH1 0x20 ADD PUSH3 0xB5C9B PUSH1 0xEA SHL DUP2 MSTORE POP DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0xD80 JUMPI PUSH2 0xD80 PUSH2 0x31B8 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP5 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xD9C SWAP2 SWAP1 PUSH2 0x31CE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 PUSH1 0x2 DUP2 MLOAD DUP2 LT PUSH2 0xDBE JUMPI PUSH2 0xDBE PUSH2 0x31B8 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xDDA SWAP2 SWAP1 PUSH2 0x31FC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 PUSH1 0x3 DUP2 MLOAD DUP2 LT PUSH2 0xDFC JUMPI PUSH2 0xDFC PUSH2 0x31B8 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP PUSH1 0x0 PUSH2 0xE12 DUP3 PUSH2 0x1633 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x20 ADD MLOAD SWAP1 POP PUSH2 0xE55 PUSH2 0xE46 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x5 DUP2 MSTORE PUSH1 0x20 ADD PUSH5 0x173539B7B7 PUSH1 0xD9 SHL DUP2 MSTORE POP PUSH2 0x1DF1 JUMP JUMPDEST PUSH2 0xE4F DUP4 PUSH2 0x1DF1 JUMP JUMPDEST SWAP1 PUSH2 0x2161 JUMP JUMPDEST PUSH2 0xE6A JUMPI DUP6 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x61B SWAP2 SWAP1 PUSH2 0x322B JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xFF DUP1 DUP3 MSTORE PUSH2 0x2000 DUP3 ADD SWAP1 SWAP3 MSTORE PUSH1 0x60 SWAP2 PUSH20 0x7109709ECFA91A80626FF3989D68F67F5B1DD12D SWAP2 PUSH1 0x0 SWAP2 DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0xEA6 JUMPI SWAP1 POP POP SWAP1 POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x3 DUP2 MSTORE PUSH1 0x20 ADD PUSH3 0xDCE0F PUSH1 0xEB SHL DUP2 MSTORE POP DUP3 DUP3 DUP1 PUSH2 0xEE7 SWAP1 PUSH2 0x32C0 JUMP JUMPDEST SWAP4 POP PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0xEFC JUMPI PUSH2 0xEFC PUSH2 0x31B8 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xD DUP2 MSTORE PUSH1 0x20 ADD PUSH13 0x302E302E312D616C7068612E35 PUSH1 0x98 SHL DUP2 MSTORE POP PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xF3D SWAP2 SWAP1 PUSH2 0x32DF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP3 DUP3 DUP1 PUSH2 0xF58 SWAP1 PUSH2 0x32C0 JUMP JUMPDEST SWAP4 POP PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0xF6D JUMPI PUSH2 0xF6D PUSH2 0x31B8 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x6 DUP2 MSTORE PUSH1 0x20 ADD PUSH6 0x6465706C6F79 PUSH1 0xD0 SHL DUP2 MSTORE POP DUP3 DUP3 DUP1 PUSH2 0xFA3 SWAP1 PUSH2 0x32C0 JUMP JUMPDEST SWAP4 POP PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0xFB8 JUMPI PUSH2 0xFB8 PUSH2 0x31B8 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xE DUP2 MSTORE PUSH1 0x20 ADD PUSH14 0x2D2D636F6E74726163744E616D65 PUSH1 0x90 SHL DUP2 MSTORE POP DUP3 DUP3 DUP1 PUSH2 0xFF6 SWAP1 PUSH2 0x32C0 JUMP JUMPDEST SWAP4 POP PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x100B JUMPI PUSH2 0x100B PUSH2 0x31B8 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP8 PUSH1 0x20 ADD MLOAD DUP3 DUP3 DUP1 PUSH2 0x1027 SWAP1 PUSH2 0x32C0 JUMP JUMPDEST SWAP4 POP PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x103C JUMPI PUSH2 0x103C PUSH2 0x31B8 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xE DUP2 MSTORE PUSH1 0x20 ADD PUSH14 0x5A5AC6DEDCE8E4C2C6E8A0C2E8D PUSH1 0x93 SHL DUP2 MSTORE POP DUP3 DUP3 DUP1 PUSH2 0x107A SWAP1 PUSH2 0x32C0 JUMP JUMPDEST SWAP4 POP PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x108F JUMPI PUSH2 0x108F PUSH2 0x31B8 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE DUP8 MLOAD DUP3 DUP3 PUSH2 0x10A7 DUP2 PUSH2 0x32C0 JUMP JUMPDEST SWAP4 POP PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x10BC JUMPI PUSH2 0x10BC PUSH2 0x31B8 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x9 DUP2 MSTORE PUSH1 0x20 ADD PUSH9 0xB4B58DA185A5B9259 PUSH1 0xBA SHL DUP2 MSTORE POP DUP3 DUP3 DUP1 PUSH2 0x10F5 SWAP1 PUSH2 0x32C0 JUMP JUMPDEST SWAP4 POP PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x110A JUMPI PUSH2 0x110A PUSH2 0x31B8 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP PUSH2 0x111E CHAINID PUSH2 0x21C2 JUMP JUMPDEST DUP3 DUP3 PUSH2 0x1129 DUP2 PUSH2 0x32C0 JUMP JUMPDEST SWAP4 POP PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x113E JUMPI PUSH2 0x113E PUSH2 0x31B8 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xF DUP2 MSTORE PUSH1 0x20 ADD PUSH15 0x2D2D6275696C64496E666F46696C65 PUSH1 0x88 SHL DUP2 MSTORE POP DUP3 DUP3 DUP1 PUSH2 0x117D SWAP1 PUSH2 0x32C0 JUMP JUMPDEST SWAP4 POP PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x1192 JUMPI PUSH2 0x1192 PUSH2 0x31B8 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP7 DUP3 DUP3 DUP1 PUSH2 0x11AA SWAP1 PUSH2 0x32C0 JUMP JUMPDEST SWAP4 POP PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x11BF JUMPI PUSH2 0x11BF PUSH2 0x31B8 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xD DUP2 MSTORE PUSH1 0x20 ADD PUSH13 0x2D2D6C6963656E736554797065 PUSH1 0x98 SHL DUP2 MSTORE POP DUP3 DUP3 DUP1 PUSH2 0x11FC SWAP1 PUSH2 0x32C0 JUMP JUMPDEST SWAP4 POP PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x1211 JUMPI PUSH2 0x1211 PUSH2 0x31B8 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP8 PUSH1 0x40 ADD MLOAD DUP3 DUP3 DUP1 PUSH2 0x122D SWAP1 PUSH2 0x32C0 JUMP JUMPDEST SWAP4 POP PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x1242 JUMPI PUSH2 0x1242 PUSH2 0x31B8 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE DUP6 MLOAD ISZERO PUSH2 0x1348 JUMPI PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x15 DUP2 MSTORE PUSH21 0x2D2D636F6E7374727563746F7242797465636F6465 PUSH1 0x58 SHL PUSH1 0x20 DUP3 ADD MSTORE DUP3 DUP3 PUSH2 0x128B DUP2 PUSH2 0x32C0 JUMP JUMPDEST SWAP4 POP PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x12A0 JUMPI PUSH2 0x12A0 PUSH2 0x31B8 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x40 MLOAD PUSH4 0x71AAD10D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x71AAD10D SWAP1 PUSH2 0x12D7 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x2BD6 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x12F4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x131C SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x2F15 JUMP JUMPDEST DUP3 DUP3 PUSH2 0x1327 DUP2 PUSH2 0x32C0 JUMP JUMPDEST SWAP4 POP PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x133C JUMPI PUSH2 0x133C PUSH2 0x31B8 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP JUMPDEST DUP5 PUSH1 0x20 ADD MLOAD ISZERO PUSH2 0x13F1 JUMPI PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x12 DUP2 MSTORE PUSH18 0x2D2D766572696679536F75726365436F6465 PUSH1 0x70 SHL PUSH1 0x20 DUP3 ADD MSTORE DUP3 DUP3 PUSH2 0x1386 DUP2 PUSH2 0x32C0 JUMP JUMPDEST SWAP4 POP PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x139B JUMPI PUSH2 0x139B PUSH2 0x31B8 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x5 DUP2 MSTORE PUSH1 0x20 ADD PUSH5 0x66616C7365 PUSH1 0xD8 SHL DUP2 MSTORE POP DUP3 DUP3 DUP1 PUSH2 0x13D0 SWAP1 PUSH2 0x32C0 JUMP JUMPDEST SWAP4 POP PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x13E5 JUMPI PUSH2 0x13E5 PUSH2 0x31B8 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP JUMPDEST PUSH2 0x1406 PUSH2 0x1401 DUP7 PUSH1 0x40 ADD MLOAD PUSH2 0x1DF1 JUMP JUMPDEST MLOAD ISZERO SWAP1 JUMP JUMPDEST PUSH2 0x1489 JUMPI PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0xB DUP2 MSTORE PUSH11 0xB4B5C995B185E595C9259 PUSH1 0xAA SHL PUSH1 0x20 DUP3 ADD MSTORE DUP3 DUP3 PUSH2 0x1437 DUP2 PUSH2 0x32C0 JUMP JUMPDEST SWAP4 POP PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x144C JUMPI PUSH2 0x144C PUSH2 0x31B8 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP5 PUSH1 0x40 ADD MLOAD DUP3 DUP3 DUP1 PUSH2 0x1468 SWAP1 PUSH2 0x32C0 JUMP JUMPDEST SWAP4 POP PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x147D JUMPI PUSH2 0x147D PUSH2 0x31B8 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP JUMPDEST PUSH1 0x60 DUP6 ADD MLOAD ISZERO PUSH2 0x157A JUMPI PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x6 DUP2 MSTORE PUSH6 0xB4B5CD85B1D PUSH1 0xD2 SHL PUSH1 0x20 DUP3 ADD MSTORE DUP3 DUP3 PUSH2 0x14BB DUP2 PUSH2 0x32C0 JUMP JUMPDEST SWAP4 POP PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x14D0 JUMPI PUSH2 0x14D0 PUSH2 0x31B8 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x60 DUP6 ADD MLOAD PUSH1 0x40 MLOAD PUSH4 0x1623433D PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0xB11A19E8 SWAP1 PUSH1 0x24 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1526 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x154E SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x2F15 JUMP JUMPDEST DUP3 DUP3 PUSH2 0x1559 DUP2 PUSH2 0x32C0 JUMP JUMPDEST SWAP4 POP PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x156E JUMPI PUSH2 0x156E PUSH2 0x31B8 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0xFF AND PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1598 JUMPI PUSH2 0x1598 PUSH2 0x2C0D JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x15CB JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x15B6 JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 PUSH1 0xFF AND DUP2 PUSH1 0xFF AND LT ISZERO PUSH2 0x1624 JUMPI DUP4 DUP2 PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x15F4 JUMPI PUSH2 0x15F4 PUSH2 0x31B8 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP3 DUP3 PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x1611 JUMPI PUSH2 0x1611 PUSH2 0x31B8 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x15D1 JUMP JUMPDEST POP SWAP4 POP POP POP POP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0x165A PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 PUSH1 0x3 SIGNEXTEND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD DUP3 MSTORE PUSH1 0x4 DUP1 DUP3 MSTORE PUSH4 0xC4C2E6D PUSH1 0xE3 SHL PUSH1 0x20 DUP4 ADD MSTORE SWAP2 MLOAD PUSH4 0x34515CDB PUSH1 0xE2 SHL DUP2 MSTORE PUSH20 0x7109709ECFA91A80626FF3989D68F67F5B1DD12D SWAP3 PUSH1 0x0 SWAP2 DUP5 SWAP2 PUSH4 0xD145736C SWAP2 PUSH2 0x16AE SWAP2 DUP7 SWAP2 ADD PUSH2 0x3329 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x16CB JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x16F3 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x2F15 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1701 DUP7 DUP4 PUSH2 0x2255 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xF45C1CE7 DUP4 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1731 SWAP2 SWAP1 PUSH2 0x3369 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1750 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x1778 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x33CD JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP2 POP PUSH1 0x3 SIGNEXTEND ISZERO DUP1 ISZERO SWAP1 PUSH2 0x1791 JUMPI POP PUSH1 0x20 DUP2 ADD MLOAD MLOAD ISZERO JUMPDEST DUP1 ISZERO PUSH2 0x17A0 JUMPI POP PUSH1 0x40 DUP2 ADD MLOAD MLOAD ISZERO JUMPDEST ISZERO PUSH2 0xE6A JUMPI DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x17B8 JUMPI PUSH2 0x17B8 PUSH2 0x31B8 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x61B SWAP2 SWAP1 PUSH2 0x3477 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x17DD DUP6 PUSH2 0x1DF1 JUMP JUMPDEST SWAP1 POP PUSH2 0x17EC DUP2 PUSH2 0x846 DUP7 PUSH2 0x1DF1 JUMP JUMPDEST ISZERO PUSH2 0x18B5 JUMPI PUSH1 0x0 PUSH2 0x1841 DUP3 PUSH2 0x183B DUP5 PUSH2 0x1835 PUSH2 0x1807 DUP11 PUSH2 0x1DF1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 SWAP2 DUP3 ADD MSTORE DUP2 MLOAD DUP1 DUP4 ADD SWAP1 SWAP3 MSTORE DUP3 MLOAD DUP3 MSTORE SWAP2 DUP3 ADD MLOAD SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x238F JUMP JUMPDEST SWAP1 PUSH2 0x23F1 JUMP JUMPDEST SWAP1 POP PUSH2 0x186F PUSH2 0x1868 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x5 PUSH1 0xF9 SHL DUP2 MSTORE POP PUSH2 0x1DF1 JUMP JUMPDEST DUP3 SWAP1 PUSH2 0x1E1E JUMP JUMPDEST ISZERO PUSH2 0x18A3 JUMPI PUSH2 0x18A0 PUSH2 0x1899 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x5 PUSH1 0xF9 SHL DUP2 MSTORE POP PUSH2 0x1DF1 JUMP JUMPDEST DUP3 SWAP1 PUSH2 0x2476 JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH2 0x18AC DUP2 PUSH2 0x249C JUMP JUMPDEST SWAP3 POP POP POP PUSH2 0x500 JUMP JUMPDEST DUP3 ISZERO PUSH2 0x18CE JUMPI DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x61B SWAP3 SWAP2 SWAP1 PUSH2 0x3647 JUMP JUMPDEST POP POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP2 MSTORE PUSH2 0x500 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x18F0 PUSH2 0x88A JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xFF DUP1 DUP3 MSTORE PUSH2 0x2000 DUP3 ADD SWAP1 SWAP3 MSTORE SWAP2 SWAP3 POP PUSH1 0x0 SWAP2 SWAP1 DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x190D JUMPI SWAP1 POP POP SWAP1 POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x3 DUP2 MSTORE PUSH1 0x20 ADD PUSH3 0xDCE0F PUSH1 0xEB SHL DUP2 MSTORE POP DUP3 DUP3 DUP1 PUSH2 0x194E SWAP1 PUSH2 0x32C0 JUMP JUMPDEST SWAP4 POP PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x1963 JUMPI PUSH2 0x1963 PUSH2 0x31B8 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x7 DUP2 MSTORE PUSH1 0x20 ADD PUSH7 0x5E312E33322E33 PUSH1 0xC8 SHL DUP2 MSTORE POP PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x199E SWAP2 SWAP1 PUSH2 0x36C2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP3 DUP3 DUP1 PUSH2 0x19B9 SWAP1 PUSH2 0x32C0 JUMP JUMPDEST SWAP4 POP PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x19CE JUMPI PUSH2 0x19CE PUSH2 0x31B8 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x8 DUP2 MSTORE PUSH1 0x20 ADD PUSH8 0x76616C6964617465 PUSH1 0xC0 SHL DUP2 MSTORE POP DUP3 DUP3 DUP1 PUSH2 0x1A06 SWAP1 PUSH2 0x32C0 JUMP JUMPDEST SWAP4 POP PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x1A1B JUMPI PUSH2 0x1A1B PUSH2 0x31B8 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1A37 SWAP2 SWAP1 PUSH2 0x31FC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP3 DUP3 DUP1 PUSH2 0x1A52 SWAP1 PUSH2 0x32C0 JUMP JUMPDEST SWAP4 POP PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x1A67 JUMPI PUSH2 0x1A67 PUSH2 0x31B8 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xA DUP2 MSTORE PUSH1 0x20 ADD PUSH10 0xB4B58DBDB9D1C9858DD PUSH1 0xB2 SHL DUP2 MSTORE POP DUP3 DUP3 DUP1 PUSH2 0x1AA1 SWAP1 PUSH2 0x32C0 JUMP JUMPDEST SWAP4 POP PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x1AB6 JUMPI PUSH2 0x1AB6 PUSH2 0x31B8 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP PUSH2 0x1ACB DUP8 DUP5 PUSH2 0x2505 JUMP JUMPDEST DUP3 DUP3 PUSH2 0x1AD6 DUP2 PUSH2 0x32C0 JUMP JUMPDEST SWAP4 POP PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x1AEB JUMPI PUSH2 0x1AEB PUSH2 0x31B8 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE DUP6 MLOAD MLOAD ISZERO PUSH2 0x1B85 JUMPI PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0xB DUP2 MSTORE PUSH11 0x2D2D7265666572656E6365 PUSH1 0xA8 SHL PUSH1 0x20 DUP3 ADD MSTORE DUP3 DUP3 PUSH2 0x1B2B DUP2 PUSH2 0x32C0 JUMP JUMPDEST SWAP4 POP PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x1B40 JUMPI PUSH2 0x1B40 PUSH2 0x31B8 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP PUSH2 0x1B59 DUP7 PUSH1 0x0 ADD MLOAD DUP5 PUSH2 0x2505 JUMP JUMPDEST DUP3 DUP3 PUSH2 0x1B64 DUP2 PUSH2 0x32C0 JUMP JUMPDEST SWAP4 POP PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x1B79 JUMPI PUSH2 0x1B79 PUSH2 0x31B8 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP JUMPDEST DUP6 PUSH1 0x80 ADD MLOAD ISZERO PUSH2 0x1BF3 JUMPI PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x18 DUP2 MSTORE PUSH32 0x2D2D756E73616665536B697053746F72616765436865636B0000000000000000 PUSH1 0x20 DUP3 ADD MSTORE DUP3 DUP3 PUSH2 0x1BCE DUP2 PUSH2 0x32C0 JUMP JUMPDEST SWAP4 POP PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x1BE3 JUMPI PUSH2 0x1BE3 PUSH2 0x31B8 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP PUSH2 0x1C4E JUMP JUMPDEST DUP5 ISZERO PUSH2 0x1C4E JUMPI PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x12 DUP2 MSTORE PUSH18 0x2D2D726571756972655265666572656E6365 PUSH1 0x70 SHL PUSH1 0x20 DUP3 ADD MSTORE DUP3 DUP3 PUSH2 0x1C2D DUP2 PUSH2 0x32C0 JUMP JUMPDEST SWAP4 POP PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x1C42 JUMPI PUSH2 0x1C42 PUSH2 0x31B8 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP JUMPDEST PUSH1 0x40 DUP7 ADD MLOAD MLOAD ISZERO PUSH2 0x1CDA JUMPI PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0xD DUP2 MSTORE PUSH13 0x2D2D756E73616665416C6C6F77 PUSH1 0x98 SHL PUSH1 0x20 DUP3 ADD MSTORE DUP3 DUP3 PUSH2 0x1C88 DUP2 PUSH2 0x32C0 JUMP JUMPDEST SWAP4 POP PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x1C9D JUMPI PUSH2 0x1C9D PUSH2 0x31B8 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP6 PUSH1 0x40 ADD MLOAD DUP3 DUP3 DUP1 PUSH2 0x1CB9 SWAP1 PUSH2 0x32C0 JUMP JUMPDEST SWAP4 POP PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x1CCE JUMPI PUSH2 0x1CCE PUSH2 0x31B8 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP JUMPDEST DUP6 PUSH1 0x60 ADD MLOAD ISZERO PUSH2 0x1D3B JUMPI PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x14 DUP2 MSTORE PUSH20 0x2D2D756E73616665416C6C6F7752656E616D6573 PUSH1 0x60 SHL PUSH1 0x20 DUP3 ADD MSTORE DUP3 DUP3 PUSH2 0x1D1A DUP2 PUSH2 0x32C0 JUMP JUMPDEST SWAP4 POP PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x1D2F JUMPI PUSH2 0x1D2F PUSH2 0x31B8 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0xFF AND PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1D59 JUMPI PUSH2 0x1D59 PUSH2 0x2C0D JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1D8C JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x1D77 JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 PUSH1 0xFF AND DUP2 PUSH1 0xFF AND LT ISZERO PUSH2 0x1DE5 JUMPI DUP4 DUP2 PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x1DB5 JUMPI PUSH2 0x1DB5 PUSH2 0x31B8 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP3 DUP3 PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH2 0x1DD2 JUMPI PUSH2 0x1DD2 PUSH2 0x31B8 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x1D92 JUMP JUMPDEST POP SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 SWAP2 DUP3 ADD MSTORE DUP2 MLOAD DUP1 DUP4 ADD SWAP1 SWAP3 MSTORE DUP3 MLOAD DUP3 MSTORE SWAP2 DUP3 ADD SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP4 ADD MLOAD DUP4 MLOAD DUP4 MLOAD SWAP3 DUP5 ADD MLOAD PUSH1 0x0 SWAP4 PUSH2 0x1E3C SWAP3 SWAP2 DUP5 SWAP2 SWAP1 PUSH2 0x2545 JUMP JUMPDEST EQ ISZERO SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x1E52 DUP4 PUSH2 0x1DF1 JUMP JUMPDEST SWAP1 POP PUSH2 0x1E83 PUSH2 0x1E7C PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x4 DUP2 MSTORE PUSH1 0x20 ADD PUSH4 0xB9CDBDB PUSH1 0xE2 SHL DUP2 MSTORE POP PUSH2 0x1DF1 JUMP JUMPDEST DUP3 SWAP1 PUSH2 0x2161 JUMP JUMPDEST ISZERO PUSH2 0x1EBF JUMPI PUSH2 0x500 PUSH2 0x1EBA PUSH2 0x1EB3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x4 DUP2 MSTORE PUSH1 0x20 ADD PUSH4 0xB9CDBDB PUSH1 0xE2 SHL DUP2 MSTORE POP PUSH2 0x1DF1 JUMP JUMPDEST DUP4 SWAP1 PUSH2 0x2656 JUMP JUMPDEST PUSH2 0x249C JUMP JUMPDEST PUSH2 0x1EEB PUSH2 0x1EE4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1D PUSH1 0xF9 SHL DUP2 MSTORE POP PUSH2 0x1DF1 JUMP JUMPDEST DUP3 SWAP1 PUSH2 0x26E0 JUMP JUMPDEST PUSH1 0x1 SUB PUSH2 0x1F47 JUMPI PUSH2 0x1F17 PUSH2 0x1899 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1D PUSH1 0xF9 SHL DUP2 MSTORE POP PUSH2 0x1DF1 JUMP JUMPDEST POP PUSH2 0x500 PUSH2 0x1EBA PUSH2 0x1F40 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1D PUSH1 0xF9 SHL DUP2 MSTORE POP PUSH2 0x1DF1 JUMP JUMPDEST DUP4 SWAP1 PUSH2 0x2476 JUMP JUMPDEST PUSH2 0x1F70 PUSH2 0x1E7C PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x5 DUP2 MSTORE PUSH1 0x20 ADD PUSH5 0x173539B7B7 PUSH1 0xD9 SHL DUP2 MSTORE POP PUSH2 0x1DF1 JUMP JUMPDEST ISZERO PUSH2 0x2013 JUMPI PUSH1 0x0 PUSH2 0x1FA2 DUP3 PUSH2 0x1F9D PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x2F PUSH1 0xF8 SHL DUP2 MSTORE POP PUSH2 0x1DF1 JUMP JUMPDEST PUSH2 0x277A JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x1 DUP4 MLOAD PUSH2 0x1FB5 SWAP2 SWAP1 PUSH2 0x3707 JUMP JUMPDEST DUP2 MLOAD DUP2 LT PUSH2 0x1FC5 JUMPI PUSH2 0x1FC5 PUSH2 0x31B8 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH2 0x200A PUSH2 0x1EBA PUSH2 0x1FFB PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x5 DUP2 MSTORE PUSH1 0x20 ADD PUSH5 0x173539B7B7 PUSH1 0xD9 SHL DUP2 MSTORE POP PUSH2 0x1DF1 JUMP JUMPDEST PUSH2 0x2004 DUP5 PUSH2 0x1DF1 JUMP JUMPDEST SWAP1 PUSH2 0x2656 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x61B SWAP2 SWAP1 PUSH2 0x371A JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x2031 DUP4 PUSH2 0x1DF1 JUMP JUMPDEST SWAP1 POP PUSH2 0x205B PUSH2 0x1E7C PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x4 DUP2 MSTORE PUSH1 0x20 ADD PUSH4 0xB9CDBDB PUSH1 0xE2 SHL DUP2 MSTORE POP PUSH2 0x1DF1 JUMP JUMPDEST ISZERO PUSH2 0x2069 JUMPI PUSH2 0x500 DUP2 PUSH2 0x249C JUMP JUMPDEST PUSH2 0x208E PUSH2 0x1EE4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1D PUSH1 0xF9 SHL DUP2 MSTORE POP PUSH2 0x1DF1 JUMP JUMPDEST PUSH1 0x1 SUB PUSH2 0x20BD JUMPI PUSH2 0x500 PUSH2 0x1EBA PUSH2 0x1F40 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1D PUSH1 0xF9 SHL DUP2 MSTORE POP PUSH2 0x1DF1 JUMP JUMPDEST PUSH2 0x20E6 PUSH2 0x1E7C PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x5 DUP2 MSTORE PUSH1 0x20 ADD PUSH5 0x173539B7B7 PUSH1 0xD9 SHL DUP2 MSTORE POP PUSH2 0x1DF1 JUMP JUMPDEST ISZERO PUSH2 0x2013 JUMPI PUSH1 0x0 PUSH2 0x2113 DUP3 PUSH2 0x1F9D PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x2F PUSH1 0xF8 SHL DUP2 MSTORE POP PUSH2 0x1DF1 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 DUP2 MLOAD GT ISZERO PUSH2 0x214F JUMPI DUP1 PUSH1 0x2 DUP3 MLOAD PUSH2 0x212E SWAP2 SWAP1 PUSH2 0x3707 JUMP JUMPDEST DUP2 MLOAD DUP2 LT PUSH2 0x213E JUMPI PUSH2 0x213E PUSH2 0x31B8 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP3 POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST POP DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x61B SWAP2 SWAP1 PUSH2 0x371A JUMP JUMPDEST DUP1 MLOAD DUP3 MLOAD PUSH1 0x0 SWAP2 GT ISZERO PUSH2 0x2176 JUMPI POP PUSH1 0x0 PUSH2 0x3F8 JUMP JUMPDEST DUP2 MLOAD DUP4 MLOAD PUSH1 0x20 DUP6 ADD MLOAD PUSH1 0x0 SWAP3 SWAP2 PUSH2 0x218C SWAP2 PUSH2 0x37D4 JUMP JUMPDEST PUSH2 0x2196 SWAP2 SWAP1 PUSH2 0x3707 JUMP JUMPDEST SWAP1 POP DUP3 PUSH1 0x20 ADD MLOAD DUP2 SUB PUSH2 0x21AD JUMPI PUSH1 0x1 SWAP2 POP POP PUSH2 0x3F8 JUMP JUMPDEST DUP3 MLOAD PUSH1 0x20 DUP5 ADD MLOAD DUP2 SWAP1 KECCAK256 SWAP2 KECCAK256 EQ SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x21CF DUP4 PUSH2 0x2827 JUMP JUMPDEST PUSH1 0x1 ADD SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x21EF JUMPI PUSH2 0x21EF PUSH2 0x2C0D JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2219 JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP DUP2 DUP2 ADD PUSH1 0x20 ADD JUMPDEST PUSH1 0x0 NOT ADD PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL PUSH1 0xA DUP7 MOD BYTE DUP2 MSTORE8 PUSH1 0xA DUP6 DIV SWAP5 POP DUP5 PUSH2 0x2223 JUMPI POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x22E0 JUMPI DUP2 DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2277 JUMPI PUSH2 0x2277 PUSH2 0x31B8 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x2290 SWAP3 SWAP2 SWAP1 PUSH2 0x2D15 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP2 POP PUSH1 0x1 DUP6 MLOAD PUSH2 0x22AF SWAP2 SWAP1 PUSH2 0x3707 JUMP JUMPDEST DUP2 EQ PUSH2 0x22D8 JUMPI DUP2 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x22C6 SWAP2 SWAP1 PUSH2 0x37E7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP2 POP JUMPDEST PUSH1 0x1 ADD PUSH2 0x225B JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x3 DUP1 DUP3 MSTORE PUSH1 0x80 DUP3 ADD SWAP1 SWAP3 MSTORE PUSH1 0x0 SWAP2 DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x22F9 JUMPI SWAP1 POP POP SWAP1 POP DUP4 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x2324 JUMPI PUSH2 0x2324 PUSH2 0x31B8 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x2 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x2D63 PUSH1 0xF0 SHL DUP2 MSTORE POP DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x235D JUMPI PUSH2 0x235D PUSH2 0x31B8 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP2 DUP2 PUSH1 0x2 DUP2 MLOAD DUP2 LT PUSH2 0x237C JUMPI PUSH2 0x237C PUSH2 0x31B8 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x23C1 DUP5 PUSH1 0x0 ADD MLOAD DUP6 PUSH1 0x20 ADD MLOAD DUP6 PUSH1 0x0 ADD MLOAD DUP7 PUSH1 0x20 ADD MLOAD PUSH2 0x28FF JUMP JUMPDEST SWAP1 POP DUP4 PUSH1 0x20 ADD MLOAD DUP2 PUSH2 0x23D3 SWAP2 SWAP1 PUSH2 0x3707 JUMP JUMPDEST DUP5 MLOAD DUP6 SWAP1 PUSH2 0x23E2 SWAP1 DUP4 SWAP1 PUSH2 0x3707 JUMP JUMPDEST SWAP1 MSTORE POP PUSH1 0x20 DUP5 ADD MSTORE POP SWAP1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE DUP2 MLOAD DUP4 MLOAD LT ISZERO PUSH2 0x2416 JUMPI POP DUP2 PUSH2 0x3F8 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP4 ADD MLOAD SWAP1 DUP5 ADD MLOAD PUSH1 0x1 SWAP2 EQ PUSH2 0x243D JUMPI POP DUP2 MLOAD PUSH1 0x20 DUP5 DUP2 ADD MLOAD SWAP1 DUP5 ADD MLOAD DUP3 SWAP1 KECCAK256 SWAP2 SWAP1 KECCAK256 EQ JUMPDEST DUP1 ISZERO PUSH2 0x246E JUMPI DUP3 MLOAD DUP5 MLOAD DUP6 SWAP1 PUSH2 0x2454 SWAP1 DUP4 SWAP1 PUSH2 0x3707 JUMP JUMPDEST SWAP1 MSTORE POP DUP3 MLOAD PUSH1 0x20 DUP6 ADD DUP1 MLOAD PUSH2 0x246A SWAP1 DUP4 SWAP1 PUSH2 0x37D4 JUMP JUMPDEST SWAP1 MSTORE POP JUMPDEST POP SWAP2 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x2495 DUP4 DUP4 DUP4 PUSH2 0x2A1F JUMP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP3 PUSH1 0x0 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x24BD JUMPI PUSH2 0x24BD PUSH2 0x2C0D JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x24E7 JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2495 DUP2 DUP6 PUSH1 0x20 ADD MLOAD DUP7 PUSH1 0x0 ADD MLOAD PUSH2 0x2ACA JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x2513 DUP5 DUP5 PUSH2 0x92A JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP1 DUP4 ADD MLOAD PUSH1 0x40 MLOAD SWAP4 SWAP5 POP PUSH2 0x252D SWAP4 SWAP1 SWAP2 ADD PUSH2 0x380C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP6 DUP5 GT PUSH2 0x264C JUMPI PUSH1 0x20 DUP5 GT PUSH2 0x25F8 JUMPI PUSH1 0x0 DUP5 ISZERO PUSH2 0x2590 JUMPI PUSH1 0x1 PUSH2 0x256C DUP7 PUSH1 0x20 PUSH2 0x3707 JUMP JUMPDEST PUSH2 0x2577 SWAP1 PUSH1 0x8 PUSH2 0x3848 JUMP JUMPDEST PUSH2 0x2582 SWAP1 PUSH1 0x2 PUSH2 0x3943 JUMP JUMPDEST PUSH2 0x258C SWAP2 SWAP1 PUSH2 0x3707 JUMP JUMPDEST NOT SWAP1 POP JUMPDEST DUP4 MLOAD DUP2 AND DUP6 PUSH2 0x259F DUP10 DUP10 PUSH2 0x37D4 JUMP JUMPDEST PUSH2 0x25A9 SWAP2 SWAP1 PUSH2 0x3707 JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP4 POP DUP3 AND JUMPDEST DUP2 DUP2 EQ PUSH2 0x25E3 JUMPI DUP8 DUP5 GT PUSH2 0x25CB JUMPI DUP8 SWAP5 POP POP POP POP POP PUSH2 0x162B JUMP JUMPDEST DUP4 PUSH2 0x25D5 DUP2 PUSH2 0x394F JUMP JUMPDEST SWAP5 POP POP DUP3 DUP5 MLOAD AND SWAP1 POP PUSH2 0x25B1 JUMP JUMPDEST PUSH2 0x25ED DUP8 DUP6 PUSH2 0x37D4 JUMP JUMPDEST SWAP5 POP POP POP POP POP PUSH2 0x162B JUMP JUMPDEST DUP4 DUP4 KECCAK256 PUSH2 0x2605 DUP6 DUP9 PUSH2 0x3707 JUMP JUMPDEST PUSH2 0x260F SWAP1 DUP8 PUSH2 0x37D4 JUMP JUMPDEST SWAP2 POP JUMPDEST DUP6 DUP3 LT PUSH2 0x264A JUMPI DUP5 DUP3 KECCAK256 DUP1 DUP3 SUB PUSH2 0x2637 JUMPI PUSH2 0x262D DUP7 DUP5 PUSH2 0x37D4 JUMP JUMPDEST SWAP4 POP POP POP POP PUSH2 0x162B JUMP JUMPDEST PUSH2 0x2642 PUSH1 0x1 DUP5 PUSH2 0x3707 JUMP JUMPDEST SWAP3 POP POP PUSH2 0x2612 JUMP JUMPDEST POP JUMPDEST POP SWAP3 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE DUP2 MLOAD DUP4 MLOAD LT ISZERO PUSH2 0x267B JUMPI POP DUP2 PUSH2 0x3F8 JUMP JUMPDEST DUP2 MLOAD DUP4 MLOAD PUSH1 0x20 DUP6 ADD MLOAD PUSH1 0x0 SWAP3 SWAP2 PUSH2 0x2691 SWAP2 PUSH2 0x37D4 JUMP JUMPDEST PUSH2 0x269B SWAP2 SWAP1 PUSH2 0x3707 JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD SWAP1 SWAP2 POP PUSH1 0x1 SWAP1 DUP3 EQ PUSH2 0x26BC JUMPI POP DUP3 MLOAD PUSH1 0x20 DUP5 ADD MLOAD DUP2 SWAP1 KECCAK256 SWAP1 DUP3 KECCAK256 EQ JUMPDEST DUP1 ISZERO PUSH2 0x26D7 JUMPI DUP4 MLOAD DUP6 MLOAD DUP7 SWAP1 PUSH2 0x26D3 SWAP1 DUP4 SWAP1 PUSH2 0x3707 JUMP JUMPDEST SWAP1 MSTORE POP JUMPDEST POP SWAP3 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH1 0x0 ADD MLOAD PUSH2 0x2704 DUP6 PUSH1 0x0 ADD MLOAD DUP7 PUSH1 0x20 ADD MLOAD DUP7 PUSH1 0x0 ADD MLOAD DUP8 PUSH1 0x20 ADD MLOAD PUSH2 0x28FF JUMP JUMPDEST PUSH2 0x270E SWAP2 SWAP1 PUSH2 0x37D4 JUMP JUMPDEST SWAP1 POP JUMPDEST DUP4 MLOAD PUSH1 0x20 DUP6 ADD MLOAD PUSH2 0x2722 SWAP2 SWAP1 PUSH2 0x37D4 JUMP JUMPDEST DUP2 GT PUSH2 0x2495 JUMPI DUP2 PUSH2 0x2732 DUP2 PUSH2 0x3966 JUMP JUMPDEST SWAP3 POP POP DUP3 PUSH1 0x0 ADD MLOAD PUSH2 0x2769 DUP6 PUSH1 0x20 ADD MLOAD DUP4 PUSH2 0x274D SWAP2 SWAP1 PUSH2 0x3707 JUMP JUMPDEST DUP7 MLOAD PUSH2 0x2759 SWAP2 SWAP1 PUSH2 0x3707 JUMP JUMPDEST DUP4 DUP7 PUSH1 0x0 ADD MLOAD DUP8 PUSH1 0x20 ADD MLOAD PUSH2 0x28FF JUMP JUMPDEST PUSH2 0x2773 SWAP2 SWAP1 PUSH2 0x37D4 JUMP JUMPDEST SWAP1 POP PUSH2 0x2711 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x2788 DUP5 DUP5 PUSH2 0x26E0 JUMP JUMPDEST PUSH2 0x2793 SWAP1 PUSH1 0x1 PUSH2 0x37D4 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x27AB JUMPI PUSH2 0x27AB PUSH2 0x2C0D JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x27DE JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x27C9 JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP2 MLOAD DUP2 LT ISZERO PUSH2 0x281F JUMPI PUSH2 0x27FA PUSH2 0x1EBA DUP7 DUP7 PUSH2 0x2476 JUMP JUMPDEST DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x280C JUMPI PUSH2 0x280C PUSH2 0x31B8 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x27E4 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH19 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F01 PUSH1 0x40 SHL DUP4 LT PUSH2 0x2866 JUMPI PUSH19 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F01 PUSH1 0x40 SHL DUP4 DIV SWAP3 POP PUSH1 0x40 ADD JUMPDEST PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 LT PUSH2 0x2892 JUMPI PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 DIV SWAP3 POP PUSH1 0x20 ADD JUMPDEST PUSH7 0x2386F26FC10000 DUP4 LT PUSH2 0x28B0 JUMPI PUSH7 0x2386F26FC10000 DUP4 DIV SWAP3 POP PUSH1 0x10 ADD JUMPDEST PUSH4 0x5F5E100 DUP4 LT PUSH2 0x28C8 JUMPI PUSH4 0x5F5E100 DUP4 DIV SWAP3 POP PUSH1 0x8 ADD JUMPDEST PUSH2 0x2710 DUP4 LT PUSH2 0x28DC JUMPI PUSH2 0x2710 DUP4 DIV SWAP3 POP PUSH1 0x4 ADD JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0x28EE JUMPI PUSH1 0x64 DUP4 DIV SWAP3 POP PUSH1 0x2 ADD JUMPDEST PUSH1 0xA DUP4 LT PUSH2 0x3F8 JUMPI PUSH1 0x1 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 DUP7 DUP6 GT PUSH2 0x2A0A JUMPI PUSH1 0x20 DUP6 GT PUSH2 0x29B9 JUMPI PUSH1 0x0 DUP6 ISZERO PUSH2 0x294B JUMPI PUSH1 0x1 PUSH2 0x2927 DUP8 PUSH1 0x20 PUSH2 0x3707 JUMP JUMPDEST PUSH2 0x2932 SWAP1 PUSH1 0x8 PUSH2 0x3848 JUMP JUMPDEST PUSH2 0x293D SWAP1 PUSH1 0x2 PUSH2 0x3943 JUMP JUMPDEST PUSH2 0x2947 SWAP2 SWAP1 PUSH2 0x3707 JUMP JUMPDEST NOT SWAP1 POP JUMPDEST DUP5 MLOAD DUP2 AND PUSH1 0x0 DUP8 PUSH2 0x295C DUP12 DUP12 PUSH2 0x37D4 JUMP JUMPDEST PUSH2 0x2966 SWAP2 SWAP1 PUSH2 0x3707 JUMP JUMPDEST DUP6 MLOAD SWAP1 SWAP2 POP DUP4 AND JUMPDEST DUP3 DUP2 EQ PUSH2 0x29AB JUMPI DUP2 DUP7 LT PUSH2 0x2993 JUMPI PUSH2 0x2986 DUP12 DUP12 PUSH2 0x37D4 JUMP JUMPDEST SWAP7 POP POP POP POP POP POP POP PUSH2 0x162B JUMP JUMPDEST DUP6 PUSH2 0x299D DUP2 PUSH2 0x3966 JUMP JUMPDEST SWAP7 POP POP DUP4 DUP7 MLOAD AND SWAP1 POP PUSH2 0x296E JUMP JUMPDEST DUP6 SWAP7 POP POP POP POP POP POP POP PUSH2 0x162B JUMP JUMPDEST POP DUP4 DUP4 KECCAK256 PUSH1 0x0 SWAP1 JUMPDEST PUSH2 0x29CB DUP7 DUP10 PUSH2 0x3707 JUMP JUMPDEST DUP3 GT PUSH2 0x2A08 JUMPI DUP6 DUP4 KECCAK256 DUP1 DUP3 SUB PUSH2 0x29E7 JUMPI DUP4 SWAP5 POP POP POP POP POP PUSH2 0x162B JUMP JUMPDEST PUSH2 0x29F2 PUSH1 0x1 DUP6 PUSH2 0x37D4 JUMP JUMPDEST SWAP4 POP POP DUP2 DUP1 PUSH2 0x2A00 SWAP1 PUSH2 0x3966 JUMP JUMPDEST SWAP3 POP POP PUSH2 0x29C1 JUMP JUMPDEST POP JUMPDEST PUSH2 0x2A14 DUP8 DUP8 PUSH2 0x37D4 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x2A51 DUP6 PUSH1 0x0 ADD MLOAD DUP7 PUSH1 0x20 ADD MLOAD DUP7 PUSH1 0x0 ADD MLOAD DUP8 PUSH1 0x20 ADD MLOAD PUSH2 0x28FF JUMP JUMPDEST PUSH1 0x20 DUP1 DUP8 ADD DUP1 MLOAD SWAP2 DUP7 ADD SWAP2 SWAP1 SWAP2 MSTORE MLOAD SWAP1 SWAP2 POP PUSH2 0x2A6D SWAP1 DUP3 PUSH2 0x3707 JUMP JUMPDEST DUP4 MSTORE DUP5 MLOAD PUSH1 0x20 DUP7 ADD MLOAD PUSH2 0x2A80 SWAP2 SWAP1 PUSH2 0x37D4 JUMP JUMPDEST DUP2 SUB PUSH2 0x2A8F JUMPI PUSH1 0x0 DUP6 MSTORE PUSH2 0x2AC1 JUMP JUMPDEST DUP4 MLOAD DUP4 MLOAD PUSH2 0x2A9D SWAP2 SWAP1 PUSH2 0x37D4 JUMP JUMPDEST DUP6 MLOAD DUP7 SWAP1 PUSH2 0x2AAC SWAP1 DUP4 SWAP1 PUSH2 0x3707 JUMP JUMPDEST SWAP1 MSTORE POP DUP4 MLOAD PUSH2 0x2ABB SWAP1 DUP3 PUSH2 0x37D4 JUMP JUMPDEST PUSH1 0x20 DUP7 ADD MSTORE JUMPDEST POP SWAP1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 LT PUSH2 0x2B02 JUMPI DUP2 MLOAD DUP4 MSTORE PUSH2 0x2AE1 PUSH1 0x20 DUP5 PUSH2 0x37D4 JUMP JUMPDEST SWAP3 POP PUSH2 0x2AEE PUSH1 0x20 DUP4 PUSH2 0x37D4 JUMP JUMPDEST SWAP2 POP PUSH2 0x2AFB PUSH1 0x20 DUP3 PUSH2 0x3707 JUMP JUMPDEST SWAP1 POP PUSH2 0x2ACA JUMP JUMPDEST PUSH1 0x0 NOT DUP2 ISZERO PUSH2 0x2B31 JUMPI PUSH1 0x1 PUSH2 0x2B18 DUP4 PUSH1 0x20 PUSH2 0x3707 JUMP JUMPDEST PUSH2 0x2B24 SWAP1 PUSH2 0x100 PUSH2 0x3943 JUMP JUMPDEST PUSH2 0x2B2E SWAP2 SWAP1 PUSH2 0x3707 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP2 MLOAD DUP4 MLOAD DUP4 AND SWAP3 NOT AND SWAP2 SWAP1 SWAP2 OR SWAP1 SWAP2 MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2B56 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x500 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2B7F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2BA1 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x2B89 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x2BC2 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x2B86 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x500 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x2BAA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND DUP2 MSTORE PUSH1 0x40 PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x162B SWAP1 DUP4 ADD DUP5 PUSH2 0x2BAA JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x60 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x2C46 JUMPI PUSH2 0x2C46 PUSH2 0x2C0D JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP5 GT ISZERO PUSH2 0x2C67 JUMPI PUSH2 0x2C67 PUSH2 0x2C0D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP6 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP3 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0x2C8F JUMPI PUSH2 0x2C8F PUSH2 0x2C0D JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP1 SWAP4 POP DUP6 DUP2 MSTORE DUP7 DUP7 DUP7 ADD GT ISZERO PUSH2 0x2CA8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2CB6 DUP7 PUSH1 0x20 DUP4 ADD DUP8 PUSH2 0x2B86 JUMP JUMPDEST POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x2CD1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x500 DUP4 DUP4 MLOAD PUSH1 0x20 DUP6 ADD PUSH2 0x2C4C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2CF2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2D09 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3F4 DUP5 DUP3 DUP6 ADD PUSH2 0x2CC0 JUMP JUMPDEST PUSH1 0x0 DUP4 MLOAD PUSH2 0x2D27 DUP2 DUP5 PUSH1 0x20 DUP9 ADD PUSH2 0x2B86 JUMP JUMPDEST DUP4 MLOAD SWAP1 DUP4 ADD SWAP1 PUSH2 0x2D3B DUP2 DUP4 PUSH1 0x20 DUP9 ADD PUSH2 0x2B86 JUMP JUMPDEST ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH32 0x4661696C656420746F206465706C6F7920636F6E747261637420000000000000 DUP2 MSTORE PUSH1 0x0 DUP4 MLOAD PUSH2 0x2D7C DUP2 PUSH1 0x1A DUP6 ADD PUSH1 0x20 DUP9 ADD PUSH2 0x2B86 JUMP JUMPDEST PUSH32 0x207573696E6720636F6E7374727563746F722064617461202200000000000000 PUSH1 0x1A SWAP2 DUP5 ADD SWAP2 DUP3 ADD MSTORE DUP4 MLOAD PUSH2 0x2DB9 DUP2 PUSH1 0x33 DUP5 ADD PUSH1 0x20 DUP9 ADD PUSH2 0x2B86 JUMP JUMPDEST PUSH1 0x11 PUSH1 0xF9 SHL PUSH1 0x33 SWAP3 SWAP1 SWAP2 ADD SWAP2 DUP3 ADD MSTORE PUSH1 0x34 ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH32 0x4661696C656420746F206465706C6F7920636F6E747261637420000000000000 DUP2 MSTORE PUSH1 0x0 DUP4 MLOAD PUSH2 0x2E0B DUP2 PUSH1 0x1A DUP6 ADD PUSH1 0x20 DUP9 ADD PUSH2 0x2B86 JUMP JUMPDEST PUSH2 0x1D1 PUSH1 0xF5 SHL PUSH1 0x1A SWAP2 DUP5 ADD SWAP2 DUP3 ADD MSTORE DUP4 MLOAD PUSH2 0x2E2D DUP2 PUSH1 0x1C DUP5 ADD PUSH1 0x20 DUP9 ADD PUSH2 0x2B86 JUMP JUMPDEST ADD PUSH1 0x1C ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH32 0x4661696C656420746F2072756E2075706772616465207361666574792076616C DUP2 MSTORE PUSH9 0x34B230BA34B7B71D1 PUSH1 0xBD SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 DUP3 MLOAD PUSH2 0x2E83 DUP2 PUSH1 0x29 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x2B86 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD PUSH1 0x29 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x55706772616465207361666574792076616C69646174696F6E206661696C6564 DUP2 MSTORE PUSH2 0x1D05 PUSH1 0xF1 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 DUP3 MLOAD PUSH2 0x2ED3 DUP2 PUSH1 0x22 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x2B86 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD PUSH1 0x22 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 DUP2 MSTORE PUSH1 0xB PUSH1 0x40 DUP3 ADD MSTORE PUSH11 0x1193D55391149657D3D555 PUSH1 0xAA SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x500 PUSH1 0x80 DUP4 ADD DUP5 PUSH2 0x2BAA JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2F27 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2F3E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD PUSH1 0x1F DUP2 ADD DUP5 SGT PUSH2 0x2F4F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3F4 DUP5 DUP3 MLOAD PUSH1 0x20 DUP5 ADD PUSH2 0x2C4C JUMP JUMPDEST PUSH1 0x0 DUP6 MLOAD PUSH2 0x2F70 DUP2 DUP5 PUSH1 0x20 DUP11 ADD PUSH2 0x2B86 JUMP JUMPDEST DUP1 DUP4 ADD SWAP1 POP PUSH1 0x2F PUSH1 0xF8 SHL DUP1 DUP3 MSTORE DUP7 MLOAD PUSH2 0x2F90 DUP2 PUSH1 0x1 DUP6 ADD PUSH1 0x20 DUP12 ADD PUSH2 0x2B86 JUMP JUMPDEST PUSH1 0x1 SWAP3 ADD SWAP2 DUP3 ADD DUP2 SWAP1 MSTORE DUP6 MLOAD PUSH2 0x2FAD DUP2 PUSH1 0x2 DUP6 ADD PUSH1 0x20 DUP11 ADD PUSH2 0x2B86 JUMP JUMPDEST PUSH1 0x2 SWAP3 ADD SWAP2 DUP3 ADD MSTORE DUP4 MLOAD PUSH2 0x2FC8 DUP2 PUSH1 0x3 DUP5 ADD PUSH1 0x20 DUP9 ADD PUSH2 0x2B86 JUMP JUMPDEST PUSH5 0x173539B7B7 PUSH1 0xD9 SHL PUSH1 0x3 SWAP3 SWAP1 SWAP2 ADD SWAP2 DUP3 ADD MSTORE PUSH1 0x8 ADD SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP2 MSTORE PUSH1 0x0 PUSH2 0x2FFB PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x2BAA JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x4 DUP2 MSTORE PUSH4 0xB985CDD PUSH1 0xE2 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3033 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x500 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH32 0x436F756C64206E6F742066696E642041535420696E2061727469666163742000 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD PUSH2 0x307B DUP2 PUSH1 0x1F DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x2B86 JUMP JUMPDEST PUSH32 0x2E205365742060617374203D20747275656020696E20666F756E6472792E746F PUSH1 0x1F SWAP4 SWAP1 SWAP2 ADD SWAP3 DUP4 ADD MSTORE POP PUSH2 0x1B5B PUSH1 0xF2 SHL PUSH1 0x3F DUP3 ADD MSTORE PUSH1 0x41 ADD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 DUP2 MSTORE PUSH1 0x0 PUSH2 0x30CD PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x2BAA JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x11 DUP2 MSTORE PUSH17 0x5CC2E6E85CC2C4E6DED8EAE8CAA0C2E8D PUSH1 0x7B SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 DUP2 MSTORE PUSH1 0x0 PUSH2 0x3113 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x2BAA JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0xC DUP2 MSTORE PUSH12 0x2E6173742E6C6963656E7365 PUSH1 0xA0 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH20 0x2E6D657461646174612E736F75726365732E5B27 PUSH1 0x60 SHL DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD PUSH2 0x3170 DUP2 PUSH1 0x14 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x2B86 JUMP JUMPDEST PUSH12 0x13AE9735B2B1B1B0B5991A9B PUSH1 0xA1 SHL PUSH1 0x14 SWAP4 SWAP1 SWAP2 ADD SWAP3 DUP4 ADD MSTORE POP PUSH1 0x20 ADD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 DUP2 MSTORE PUSH1 0x0 PUSH2 0x31A6 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x2BAA JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x4FC DUP2 DUP6 PUSH2 0x2BAA JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x11 PUSH1 0xF9 SHL DUP1 DUP4 MSTORE DUP4 MLOAD PUSH2 0x31EB DUP2 PUSH1 0x1 DUP7 ADD PUSH1 0x20 DUP9 ADD PUSH2 0x2B86 JUMP JUMPDEST PUSH1 0x1 SWAP4 ADD SWAP3 DUP4 ADD MSTORE POP PUSH1 0x2 ADD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x320E DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x2B86 JUMP JUMPDEST PUSH11 0x2F6275696C642D696E666F PUSH1 0xA8 SHL SWAP3 ADD SWAP2 DUP3 MSTORE POP PUSH1 0xB ADD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x436F756C64206E6F742066696E64206275696C642D696E666F2066696C652077 DUP2 MSTORE PUSH32 0x697468206D61746368696E6720736F7572636520636F6465206861736820666F PUSH1 0x20 DUP3 ADD MSTORE PUSH11 0x391031B7B73A3930B1BA1 PUSH1 0xAD SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x0 DUP3 MLOAD PUSH2 0x329D DUP2 PUSH1 0x4B DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x2B86 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD PUSH1 0x4B ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND PUSH1 0xFF DUP2 SUB PUSH2 0x32D6 JUMPI PUSH2 0x32D6 PUSH2 0x32AA JUMP JUMPDEST PUSH1 0x1 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x406F70656E7A657070656C696E2F646566656E6465722D6465706C6F792D636C DUP2 MSTORE PUSH9 0x1A595B9D0B58DB1A5 PUSH1 0xBE SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 DUP3 MLOAD PUSH2 0x2E83 DUP2 PUSH1 0x29 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x2B86 JUMP JUMPDEST PUSH1 0x40 DUP2 MSTORE PUSH1 0x16 PUSH1 0x40 DUP3 ADD MSTORE PUSH22 0x9EA08A9CB48AA0A08A98929CBE8482A690BEA082A89 PUSH1 0x53 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x500 PUSH1 0x80 DUP4 ADD DUP5 PUSH2 0x2BAA JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 ADD PUSH1 0x20 DUP5 MSTORE DUP1 DUP6 MLOAD DUP1 DUP4 MSTORE PUSH1 0x40 DUP7 ADD SWAP2 POP PUSH1 0x40 DUP2 PUSH1 0x5 SHL DUP8 ADD ADD SWAP3 POP PUSH1 0x20 DUP8 ADD PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x33C0 JUMPI PUSH1 0x3F NOT DUP9 DUP7 SUB ADD DUP5 MSTORE PUSH2 0x33AE DUP6 DUP4 MLOAD PUSH2 0x2BAA JUMP JUMPDEST SWAP5 POP SWAP3 DUP6 ADD SWAP3 SWAP1 DUP6 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x3392 JUMP JUMPDEST POP SWAP3 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x33DF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x33F7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 DUP4 ADD SWAP1 PUSH1 0x60 DUP3 DUP7 SUB SLT ISZERO PUSH2 0x340B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3413 PUSH2 0x2C23 JUMP JUMPDEST DUP3 MLOAD DUP1 PUSH1 0x3 SIGNEXTEND DUP2 EQ PUSH2 0x3424 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP4 ADD MLOAD DUP3 DUP2 GT ISZERO PUSH2 0x3438 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3444 DUP8 DUP3 DUP7 ADD PUSH2 0x2CC0 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0x40 DUP4 ADD MLOAD DUP3 DUP2 GT ISZERO PUSH2 0x345C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3468 DUP8 DUP3 DUP7 ADD PUSH2 0x2CC0 JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH32 0x4661696C656420746F2072756E206261736820636F6D6D616E64207769746820 DUP2 MSTORE PUSH1 0x11 PUSH1 0xF9 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 DUP3 MLOAD PUSH2 0x34B9 DUP2 PUSH1 0x21 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x2B86 JUMP JUMPDEST PUSH32 0x222E20496620796F7520617265207573696E672057696E646F77732C20736574 PUSH1 0x21 SWAP4 SWAP1 SWAP2 ADD SWAP3 DUP4 ADD MSTORE POP PUSH32 0x20746865204F50454E5A455050454C494E5F424153485F5041544820656E7669 PUSH1 0x41 DUP3 ADD MSTORE PUSH32 0x726F6E6D656E74207661726961626C6520746F207468652066756C6C79207175 PUSH1 0x61 DUP3 ADD MSTORE PUSH32 0x616C69666965642070617468206F662074686520626173682065786563757461 PUSH1 0x81 DUP3 ADD MSTORE PUSH32 0x626C652E20466F72206578616D706C652C20696620796F752061726520757369 PUSH1 0xA1 DUP3 ADD MSTORE PUSH32 0x6E672047697420666F722057696E646F77732C206164642074686520666F6C6C PUSH1 0xC1 DUP3 ADD MSTORE PUSH32 0x6F77696E67206C696E6520696E20746865202E656E762066696C65206F662079 PUSH1 0xE1 DUP3 ADD MSTORE PUSH32 0x6F75722070726F6A65637420287573696E6720666F727761726420736C617368 PUSH2 0x101 DUP3 ADD MSTORE PUSH32 0x6573293A0A4F50454E5A455050454C494E5F424153485F504154483D22433A2F PUSH2 0x121 DUP3 ADD MSTORE PUSH32 0x50726F6772616D2046696C65732F4769742F62696E2F62617368220000000000 PUSH2 0x141 DUP3 ADD MSTORE PUSH2 0x15C ADD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4661696C656420746F2066696E64206C696E6520776974682070726566697820 DUP2 MSTORE PUSH1 0x27 PUSH1 0xF8 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 DUP4 MLOAD PUSH2 0x3689 DUP2 PUSH1 0x21 DUP6 ADD PUSH1 0x20 DUP9 ADD PUSH2 0x2B86 JUMP JUMPDEST PUSH13 0x139034B71037BABA383ABA1D1 PUSH1 0x9D SHL PUSH1 0x21 SWAP2 DUP5 ADD SWAP2 DUP3 ADD MSTORE DUP4 MLOAD PUSH2 0x36B6 DUP2 PUSH1 0x2E DUP5 ADD PUSH1 0x20 DUP9 ADD PUSH2 0x2B86 JUMP JUMPDEST ADD PUSH1 0x2E ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH32 0x406F70656E7A657070656C696E2F75706772616465732D636F72654000000000 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD PUSH2 0x36FA DUP2 PUSH1 0x1C DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x2B86 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD PUSH1 0x1C ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x3F8 JUMPI PUSH2 0x3F8 PUSH2 0x32AA JUMP JUMPDEST PUSH14 0x21B7B73A3930B1BA103730B6B29 PUSH1 0x95 SHL DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD PUSH2 0x3743 DUP2 PUSH1 0xE DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x2B86 JUMP JUMPDEST PUSH32 0x206D75737420626520696E2074686520666F726D6174204D79436F6E74726163 PUSH1 0xE SWAP4 SWAP1 SWAP2 ADD SWAP3 DUP4 ADD MSTORE POP PUSH32 0x742E736F6C3A4D79436F6E7472616374206F72204D79436F6E74726163742E73 PUSH1 0x2E DUP3 ADD MSTORE PUSH32 0x6F6C206F72206F75742F4D79436F6E74726163742E736F6C2F4D79436F6E7472 PUSH1 0x4E DUP3 ADD MSTORE PUSH8 0x30B1BA173539B7B7 PUSH1 0xC1 SHL PUSH1 0x6E DUP3 ADD MSTORE PUSH1 0x76 ADD SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x3F8 JUMPI PUSH2 0x3F8 PUSH2 0x32AA JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x37F9 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x2B86 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xFD SHL SWAP3 ADD SWAP2 DUP3 MSTORE POP PUSH1 0x1 ADD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP4 MLOAD PUSH2 0x381E DUP2 DUP5 PUSH1 0x20 DUP9 ADD PUSH2 0x2B86 JUMP JUMPDEST PUSH1 0x1D PUSH1 0xF9 SHL SWAP1 DUP4 ADD SWAP1 DUP2 MSTORE DUP4 MLOAD PUSH2 0x383C DUP2 PUSH1 0x1 DUP5 ADD PUSH1 0x20 DUP9 ADD PUSH2 0x2B86 JUMP JUMPDEST ADD PUSH1 0x1 ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH2 0x3F8 JUMPI PUSH2 0x3F8 PUSH2 0x32AA JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 JUMPDEST DUP1 DUP6 GT ISZERO PUSH2 0x389A JUMPI DUP2 PUSH1 0x0 NOT DIV DUP3 GT ISZERO PUSH2 0x3880 JUMPI PUSH2 0x3880 PUSH2 0x32AA JUMP JUMPDEST DUP1 DUP6 AND ISZERO PUSH2 0x388D JUMPI SWAP2 DUP2 MUL SWAP2 JUMPDEST SWAP4 DUP5 SHR SWAP4 SWAP1 DUP1 MUL SWAP1 PUSH2 0x3864 JUMP JUMPDEST POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x38B1 JUMPI POP PUSH1 0x1 PUSH2 0x3F8 JUMP JUMPDEST DUP2 PUSH2 0x38BE JUMPI POP PUSH1 0x0 PUSH2 0x3F8 JUMP JUMPDEST DUP2 PUSH1 0x1 DUP2 EQ PUSH2 0x38D4 JUMPI PUSH1 0x2 DUP2 EQ PUSH2 0x38DE JUMPI PUSH2 0x38FA JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP PUSH2 0x3F8 JUMP JUMPDEST PUSH1 0xFF DUP5 GT ISZERO PUSH2 0x38EF JUMPI PUSH2 0x38EF PUSH2 0x32AA JUMP JUMPDEST POP POP PUSH1 0x1 DUP3 SHL PUSH2 0x3F8 JUMP JUMPDEST POP PUSH1 0x20 DUP4 LT PUSH2 0x133 DUP4 LT AND PUSH1 0x4E DUP5 LT PUSH1 0xB DUP5 LT AND OR ISZERO PUSH2 0x391D JUMPI POP DUP2 DUP2 EXP PUSH2 0x3F8 JUMP JUMPDEST PUSH2 0x3927 DUP4 DUP4 PUSH2 0x385F JUMP JUMPDEST DUP1 PUSH1 0x0 NOT DIV DUP3 GT ISZERO PUSH2 0x393B JUMPI PUSH2 0x393B PUSH2 0x32AA JUMP JUMPDEST MUL SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x500 DUP4 DUP4 PUSH2 0x38A2 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x395E JUMPI PUSH2 0x395E PUSH2 0x32AA JUMP JUMPDEST POP PUSH1 0x0 NOT ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH2 0x3978 JUMPI PUSH2 0x3978 PUSH2 0x32AA JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CODESIZE DUP9 SWAP13 SLT SWAP11 GT KECCAK256 SLOAD AND XOR DUP6 JUMPDEST DUP7 DUP11 0xDF 0xC5 0xD0 DUP14 PUSH0 PC 0xCA SSTORE 0x26 BALANCE CALLCODE STOP 0xBC ORIGIN DUP2 NUMBER KECCAK256 0xF PUSH5 0x736F6C6343 STOP ADDMOD NOT STOP CALLER ",
              "sourceMap": "325:1503:63:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;437:139;;;:::i;:::-;;582:493;;;:::i;800:28:1:-;;;;;;;;;;;;;;;179:14:66;;172:22;154:41;;142:2;127:18;800:28:1;;;;;;;437:139:63;485:28;;-1:-1:-1;;;485:28:63;;408:2:66;485:28:63;;;390:21:66;447:2;427:18;;;420:30;-1:-1:-1;;;466:18:66;;;459:41;485:13:63;;;;517:18:66;;485:28:63;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;471:11;:42;;-1:-1:-1;;;;;471:42:63;;;;;;-1:-1:-1;;;;;;471:42:63;;;;;;;;;544:25;;-1:-1:-1;;;544:25:63;;1043:2:66;544:25:63;;;1025:21:66;1082:2;1062:18;;;1055:30;-1:-1:-1;;;1101:18:66;;;1094:41;544:10:63;;;;1152:18:66;;544:25:63;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;523:18;:46;437:139::o;582:493::-;641:18;;623:37;;-1:-1:-1;;;623:37:63;;;;;1516:25:66;;;;623:17:63;;;;1489:18:66;;623:37:63;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;679:93:63;;;;;;;;;;;;-1:-1:-1;;;679:93:63;;;;758:11;720:51;;758:11;;;;-1:-1:-1;;;;;758:11:63;720:51;;;1698::66;679:93:63;;-1:-1:-1;679:93:63;-1:-1:-1;1671:18:66;;720:51:63;;;-1:-1:-1;;720:51:63;;;;;;;;;;;;;;-1:-1:-1;;;;;720:51:63;-1:-1:-1;;;720:51:63;;;679:24;:93::i;:::-;671:5;:101;;-1:-1:-1;;;;;;671:101:63;-1:-1:-1;;;;;671:101:63;;;;;;;;;;976:34;;;;;;;;;;;;-1:-1:-1;;;976:34:63;;;;;;:12;:34::i;:::-;1033:5;;1020:19;;-1:-1:-1;;;;;1033:5:63;1020:12;:19::i;:::-;317:28:0;309:37;;-1:-1:-1;;;;;1050:16:63;;:18;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;582:493::o;2439:215:59:-;2540:7;2559:19;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2559:19:59;2595:52;2611:12;2625:15;2642:4;2595:15;:52::i;:::-;2588:59;;;2439:215;;;;;:::o;6598:121:11:-;6653:59;6708:2;6669:42;;;;;;;;:::i;:::-;;;;-1:-1:-1;;6669:42:11;;;;;;;;;;;;;;-1:-1:-1;;;;;6669:42:11;-1:-1:-1;;;6669:42:11;;;6653:15;:59::i;:::-;6598:121;:::o;6841:116::-;6906:43;;-1:-1:-1;;;;;1716:32:66;;6906:43:11;;;1698:51:66;6890:60:11;;1671:18:66;;6906:43:11;;;-1:-1:-1;;6906:43:11;;;;;;;;;;;;;;-1:-1:-1;;;;;6906:43:11;-1:-1:-1;;;6906:43:11;;;6890:15;:60::i;1617:340:59:-;1769:7;1788:12;1803:40;1824:12;1838:4;1803:20;:40::i;:::-;1788:55;;1868:81;;;;;;;;;;;;;;;;;;1920:4;1926:15;1909:33;;;;;;;;;:::i;:::-;;;;;;;;;;;;;1944:4;1868:7;:81::i;:::-;1853:97;;;1617:340;;;;;;:::o;868:133:11:-;939:55;986:7;965:19;939:55::i;17181:231:59:-;17278:7;17297:42;17320:12;17334:4;17297:22;:42::i;:::-;17356:49;17364:12;17378:4;:20;;;17400:4;23662:935;23828:13;;;;:31;23805:7;;23824:767;;;23882:67;23904:12;23918:15;23935:4;:13;;;23882:21;:67::i;:::-;23875:74;;;;23824:767;24008:43;;-1:-1:-1;;;24008:43:59;;23980:25;;20953:42;;24008:29;;:43;;24038:12;;24008:43;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;24008:43:59;;;;;;;;;;;;:::i;:::-;23980:71;;24065:23;24091:68;24128:12;24142:15;24111:47;;;;;;;;;:::i;:::-;;;;;;;;;;;;;24091:19;:68::i;:::-;24065:94;-1:-1:-1;;;;;;24177:29:59;;24173:372;;24347:12;24445:15;24254:258;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;24254:258:59;;;;;;;;;;-1:-1:-1;;;24226:304:59;;;;;;;:::i;:::-;;;;;;;;24173:372;24565:15;-1:-1:-1;24558:22:59;;-1:-1:-1;24558:22:59;1007:380:11;1105:14;;591:42;1278:2;1265:16;;1081:21;;1105:14;1265:16;591:42;1314:5;1303:68;1294:77;;1231:150;;1007:380;:::o;16666:143:59:-;16766:36;16776:12;16790:4;16796:5;16766:9;:36::i;:::-;16666:143;;:::o;676:1041:60:-;835:7;854:20;877:17;:15;:17::i;:::-;854:40;;904:32;939:43;961:12;975:6;939:21;:43::i;:::-;904:78;;992:27;1022:129;1058:12;:27;;;1099:12;:22;;;1135:6;1022:22;:129::i;:::-;992:159;;1162:22;1187:78;1206:12;1220:13;1235:15;1252:12;1187:18;:78::i;:::-;1162:103;;1276:26;1305:30;1328:6;1305:22;:30::i;:::-;1375:13;;;;1404:15;;1276:59;;-1:-1:-1;1375:13:60;1404:20;;;1400:145;;1491:12;1518:6;:13;;;1447:86;;;;;;;;;:::i;1400:145::-;1555:29;1587:49;;;;;;;;;;;;;;-1:-1:-1;;;1587:49:60;;;1623:6;1631:4;1587:10;:49::i;:::-;1653:57;;-1:-1:-1;;;1653:57:60;;1555:81;;-1:-1:-1;858:42:61;;1653:40:60;;:57;;1555:81;;1653:57;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1646:64;676:1041;-1:-1:-1;;;;;;;;;;;676:1041:60:o;24603:223:59:-;24672:7;24691:12;24779:8;24773:15;24768:2;24758:8;24754:17;24751:1;24744:45;24736:53;24603:223;-1:-1:-1;;;24603:223:59:o;21002:1065::-;21115:4;:24;;;21111:61;;;21002:1065;;;:::o;21111:61::-;21182:22;21207:59;21229:12;21243:4;21249:16;21207:21;:59::i;:::-;21182:84;;21276:26;21305:30;21328:6;21305:22;:30::i;:::-;21375:13;;;;21596:15;;21276:59;;-1:-1:-1;21375:13:59;21596:20;;;:70;;;;;21620:46;21646:19;:17;;;;;;;;;;;;;-1:-1:-1;;;21646:17:59;;;;:19::i;:::-;21620:16;:6;:14;:16::i;:::-;:25;;:46::i;:::-;21592:469;;;21682:7;;;21002:1065;;;:::o;21592:469::-;21709:13;;;;:20;:24;21705:356;;21863:6;:13;;;21797:81;;;;;;;;:::i;21705:356::-;22042:6;21989:60;;;;;;;;:::i;4750:206:61:-;4859:35;;;;;;;;;;;-1:-1:-1;;;4859:35:61;;;;4911:38;;-1:-1:-1;;;4911:38:61;;4794:13;;858:42;;;;4911:8;;:38;;4859:35;;4911:38;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;4911:38:61;;;;;;;;;;;;:::i;:::-;4904:45;;;;4750:206;:::o;2064:1246::-;2184:19;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2184:19:61;2215:5;858:42;2215:29;;2255:24;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2255:24:61;2307:26;2320:12;2307;:26::i;:::-;2290:14;;;:43;2344:22;2369:25;2381:12;2369:11;:25::i;:::-;2344:50;;2405:26;2461:2;-1:-1:-1;;;;;2461:14:61;;:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;2461:16:61;;;;;;;;;;;;:::i;:::-;2508:6;2545:8;2584:4;:14;;;2434:195;;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;2434:195:61;;;;;;;;;;-1:-1:-1;;;2668:25:61;;2434:195;-1:-1:-1;2639:26:61;;-1:-1:-1;;;;;2668:11:61;;;;;:25;;2434:195;;2668:25;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;2668:25:61;;;;;;;;;;;;:::i;:::-;2709:38;;-1:-1:-1;;;2709:38:61;;2639:54;;-1:-1:-1;;;;;;2709:16:61;;;;;:38;;2639:54;;2709:38;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2704:208;;2836:12;2787:100;;;;;;;;:::i;2704:208::-;2941:53;;-1:-1:-1;;;2941:53:61;;-1:-1:-1;;;;;2941:18:61;;;;;:53;;2960:12;;2941:53;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;2941:53:61;;;;;;;;;;;;:::i;:::-;2921:73;;3019:48;;-1:-1:-1;;;3019:48:61;;-1:-1:-1;;;;;3019:18:61;;;;;:48;;3038:12;;3019:48;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;3019:48:61;;;;;;;;;;;;:::i;:::-;3004:4;:12;;:63;;;;3099:2;-1:-1:-1;;;;;3099:18:61;;3131:12;3195:4;:17;;;3157:72;;;;;;;;:::i;:::-;;;;;;;;;;;;;3099:140;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;3099:140:61;;;;;;;;;;;;:::i;:::-;3077:19;;;:162;-1:-1:-1;3249:17:61;;;:32;-1:-1:-1;3077:19:61;2064:1246;-1:-1:-1;;;;2064:1246:61:o;3784:830::-;3988:15;;;4001:1;3988:15;;;;;;;;;3938:13;;3963:22;;3988:15;;;;;;;;;;;;;;;;;;;;;3963:40;;4013:18;;;;;;;;;;;;;-1:-1:-1;;;4013:18:61;;;:6;4020:1;4013:9;;;;;;;;:::i;:::-;;;;;;:18;;;;4041:17;;;;;;;;;;;;;-1:-1:-1;;;4041:17:61;;;:6;4048:1;4041:9;;;;;;;;:::i;:::-;;;;;;:17;;;;4099:14;4080:39;;;;;;;;:::i;:::-;;;;;;;;;;;;;4068:6;4075:1;4068:9;;;;;;;;:::i;:::-;;;;;;:51;;;;4155:6;4141:36;;;;;;;;:::i;:::-;;;;;;;;;;;;;4129:6;4136:1;4129:9;;;;;;;;:::i;:::-;;;;;;:48;;;;4188:26;4217:24;4234:6;4217:16;:24::i;:::-;4188:53;;4251:20;4281:6;:13;;;4251:44;;4311;4337:17;:15;;;;;;;;;;;;;-1:-1:-1;;;4337:15:61;;;;:17::i;:::-;4311:16;:6;:14;:16::i;:::-;:25;;:44::i;:::-;4306:278;;4529:12;4395:164;;;;;;;;:::i;4306:278::-;4601:6;3784:830;-1:-1:-1;;;;;;3784:830:61:o;1723:1968:60:-;2046:17;;;2059:3;2046:17;;;;;;;;;1942:15;;858:42:61;;1969:5:60;;2046:17;;;;;;;;;;;;;;;;;;;;2015:48;;2074:7;2096:25;;;;;;;;;;;;;-1:-1:-1;;;2096:25:60;;;:12;2109:3;;;;;:::i;:::-;;;2096:17;;;;;;;;;;:::i;:::-;;;;;;:25;;;;2235:35;;;;;;;;;;;;;-1:-1:-1;;;2235:35:60;;;2151:129;;;;;;;;:::i;:::-;;;;;;;;;;;;;2131:12;2144:3;;;;;:::i;:::-;;;2131:17;;;;;;;;;;:::i;:::-;;;;;;:149;;;;2290:28;;;;;;;;;;;;;-1:-1:-1;;;2290:28:60;;;:12;2303:3;;;;;:::i;:::-;;;2290:17;;;;;;;;;;:::i;:::-;;;;;;:28;;;;2328:36;;;;;;;;;;;;;-1:-1:-1;;;2328:36:60;;;:12;2341:3;;;;;:::i;:::-;;;2328:17;;;;;;;;;;:::i;:::-;;;;;;:36;;;;2394:12;:22;;;2374:12;2387:3;;;;;:::i;:::-;;;2374:17;;;;;;;;;;:::i;:::-;;;;;;:42;;;;2426:36;;;;;;;;;;;;;-1:-1:-1;;;2426:36:60;;;:12;2439:3;;;;;:::i;:::-;;;2426:17;;;;;;;;;;:::i;:::-;;;;;;;;;;:36;2492:25;;2472:12;2485:3;;;;:::i;:::-;;;2472:17;;;;;;;;;;:::i;:::-;;;;;;:45;;;;2527:31;;;;;;;;;;;;;-1:-1:-1;;;2527:31:60;;;:12;2540:3;;;;;:::i;:::-;;;2527:17;;;;;;;;;;:::i;:::-;;;;;;:31;;;;2588;2605:13;2588:16;:31::i;:::-;2568:12;2581:3;;;;:::i;:::-;;;2568:17;;;;;;;;;;:::i;:::-;;;;;;:51;;;;2629:37;;;;;;;;;;;;;-1:-1:-1;;;2629:37:60;;;:12;2642:3;;;;;:::i;:::-;;;2629:17;;;;;;;;;;:::i;:::-;;;;;;:37;;;;2696:13;2676:12;2689:3;;;;;:::i;:::-;;;2676:17;;;;;;;;;;:::i;:::-;;;;;;:33;;;;2719:35;;;;;;;;;;;;;-1:-1:-1;;;2719:35:60;;;:12;2732:3;;;;;:::i;:::-;;;2719:17;;;;;;;;;;:::i;:::-;;;;;;:35;;;;2784:12;:20;;;2764:12;2777:3;;;;;:::i;:::-;;;2764:17;;;;;;;;;;:::i;:::-;;;;;;;;;;:40;2818:22;;:26;2814:162;;2860:43;;;;;;;;;;;;-1:-1:-1;;;2860:43:60;;;;:12;2873:3;;;;:::i;:::-;;;2860:17;;;;;;;;;;:::i;:::-;;;;;;;;;;:43;2937:28;;-1:-1:-1;;;2937:28:60;;-1:-1:-1;;;;;2937:11:60;;;;;:28;;2949:15;;2937:28;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;2937:28:60;;;;;;;;;;;;:::i;:::-;2917:12;2930:3;;;;:::i;:::-;;;2917:17;;;;;;;;;;:::i;:::-;;;;;;:48;;;;2814:162;2989:12;:33;;;2985:145;;;3038:40;;;;;;;;;;;;-1:-1:-1;;;3038:40:60;;;;:12;3051:3;;;;:::i;:::-;;;3038:17;;;;;;;;;;:::i;:::-;;;;;;:40;;;;3092:27;;;;;;;;;;;;;-1:-1:-1;;;3092:27:60;;;:12;3105:3;;;;;:::i;:::-;;;3092:17;;;;;;;;;;:::i;:::-;;;;;;:27;;;;2985:145;3144:42;:34;3145:12;:22;;;3144:32;:34::i;:::-;6922:9:56;:14;;6842:101;3144:42:60;3139:163;;3202:33;;;;;;;;;;;;-1:-1:-1;;;3202:33:60;;;;:12;3215:3;;;;:::i;:::-;;;3202:17;;;;;;;;;;:::i;:::-;;;;;;:33;;;;3269:12;:22;;;3249:12;3262:3;;;;;:::i;:::-;;;3249:17;;;;;;;;;;:::i;:::-;;;;;;:42;;;;3139:163;3315:17;;;;:22;3311:145;;3353:28;;;;;;;;;;;;-1:-1:-1;;;3353:28:60;;;;:12;3366:3;;;;:::i;:::-;;;3353:17;;;;;;;;;;:::i;:::-;;;;;;;;;;:28;3427:17;;;;3415:30;;-1:-1:-1;;;3415:30:60;;;;;1516:25:66;;;;-1:-1:-1;;;;;3415:11:60;;;;;1489:18:66;;3415:30:60;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;3415:30:60;;;;;;;;;;;;:::i;:::-;3395:12;3408:3;;;;:::i;:::-;;;3395:17;;;;;;;;;;:::i;:::-;;;;;;:50;;;;3311:145;3529:22;3567:1;3554:15;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3529:40;;3584:7;3579:82;3601:1;3597:5;;:1;:5;;;3579:82;;;3635:12;3648:1;3635:15;;;;;;;;;;:::i;:::-;;;;;;;3623:6;3630:1;3623:9;;;;;;;;;;:::i;:::-;;;;;;;;;;:27;3604:3;;3579:82;;;-1:-1:-1;3678:6:60;-1:-1:-1;;;;1723:1968:60;;;;;;;:::o;8423:1172:61:-;8491:19;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;;8491:19:61;8561:38;;;;;;;;;;;;-1:-1:-1;;;8561:38:61;;;;8634:51;;-1:-1:-1;;;8634:51:61;;858:42;;8522:5;;858:42;;8634:8;;:51;;8561:38;;8634:51;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;8634:51:61;;;;;;;;;;;;:::i;:::-;8609:76;;8696:27;8726:31;8740:6;8748:8;8726:13;:31::i;:::-;8696:61;;8767:26;8796:2;-1:-1:-1;;;;;8796:9:61;;8806:11;8796:22;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;8796:22:61;;;;;;;;;;;;:::i;:::-;8832:15;;8767:51;;-1:-1:-1;8832:20:61;;;;;;:49;;-1:-1:-1;8856:13:61;;;;:20;:25;8832:49;:78;;;;-1:-1:-1;8885:13:61;;;;:20;:25;8832:78;8828:761;;;9148:11;9160:1;9148:14;;;;;;;;:::i;:::-;;;;;;;9056:464;;;;;;;;:::i;5213:754:60:-;5352:13;5377:26;5406:24;:14;:22;:24::i;:::-;5377:53;;5444:32;5470:5;5444:16;:6;:14;:16::i;:32::-;5440:521;;;5492:26;5521:49;5564:5;5521:35;5550:5;5521:23;:16;:6;:14;:16::i;:::-;-1:-1:-1;;;;;;;;;;;;;;;;;5095:27:56;;;;;;;;5101:9;;5095:27;;5112:9;;;;5095:27;;;;;;;;5008:121;5521:23:60;:28;;:35::i;:::-;:42;;:49::i;:::-;5492:78;;5630:30;5645:14;:12;;;;;;;;;;;;;-1:-1:-1;;;5645:12:60;;;;:14::i;:::-;5630:5;;:14;:30::i;:::-;5626:104;;;5688:27;5700:14;:12;;;;;;;;;;;;;-1:-1:-1;;;5700:12:60;;;;:14::i;:::-;5688:5;;:11;:27::i;:::-;5680:35;;5626:104;5750:16;:5;:14;:16::i;:::-;5743:23;;;;;;5440:521;5787:8;5783:178;;;5869:14;5902:6;5818:91;;;;;;;;;:::i;5783:178::-;-1:-1:-1;;5941:9:60;;;;;;;;;-1:-1:-1;5941:9:60;;;;22073:1583:59;22228:15;22255:20;22278:17;:15;:17::i;:::-;22337;;;22350:3;22337:17;;;;;;;;;22255:40;;-1:-1:-1;22306:28:59;;22337:17;;;;;;;;;;;;;;;;;;;;;22306:48;;22365:7;22387:25;;;;;;;;;;;;;-1:-1:-1;;;22387:25:59;;;:12;22400:3;;;;;:::i;:::-;;;22387:17;;;;;;;;;;:::i;:::-;;;;;;:25;;;;22488:22;;;;;;;;;;;;;-1:-1:-1;;;22488:22:59;;;22442:69;;;;;;;;:::i;:::-;;;;;;;;;;;;;22422:12;22435:3;;;;;:::i;:::-;;;22422:17;;;;;;;;;;:::i;:::-;;;;;;:89;;;;22521:30;;;;;;;;;;;;;-1:-1:-1;;;22521:30:59;;;:12;22534:3;;;;;:::i;:::-;;;22521:17;;;;;;;;;;:::i;:::-;;;;;;:30;;;;22595:6;22581:36;;;;;;;;:::i;:::-;;;;;;;;;;;;;22561:12;22574:3;;;;;:::i;:::-;;;22561:17;;;;;;;;;;:::i;:::-;;;;;;:56;;;;22627:32;;;;;;;;;;;;;-1:-1:-1;;;22627:32:59;;;:12;22640:3;;;;;:::i;:::-;;;22627:17;;;;;;;;;;:::i;:::-;;;;;;:32;;;;22689:49;22717:12;22731:6;22689:27;:49::i;:::-;22669:12;22682:3;;;;:::i;:::-;;;22669:17;;;;;;;;;;:::i;:::-;;;;;;;;;;:69;22759:22;;22753:36;:41;22749:198;;22810:33;;;;;;;;;;;;-1:-1:-1;;;22810:33:59;;;;:12;22823:3;;;;:::i;:::-;;;22810:17;;;;;;;;;;:::i;:::-;;;;;;:33;;;;22877:59;22905:4;:22;;;22929:6;22877:27;:59::i;:::-;22857:12;22870:3;;;;:::i;:::-;;;22857:17;;;;;;;;;;:::i;:::-;;;;;;:79;;;;22749:198;22961:4;:27;;;22957:197;;;23004:46;;;;;;;;;;;;;;;;;:12;23017:3;;;;:::i;:::-;;;23004:17;;;;;;;;;;:::i;:::-;;;;;;:46;;;;22957:197;;;23071:16;23067:87;;;23103:40;;;;;;;;;;;;-1:-1:-1;;;23103:40:59;;;;:12;23116:3;;;;:::i;:::-;;;23103:17;;;;;;;;;;:::i;:::-;;;;;;:40;;;;23067:87;23174:16;;;;23168:30;:35;23164:151;;23219:35;;;;;;;;;;;;-1:-1:-1;;;23219:35:59;;;;:12;23232:3;;;;:::i;:::-;;;23219:17;;;;;;;;;;:::i;:::-;;;;;;:35;;;;23288:4;:16;;;23268:12;23281:3;;;;;:::i;:::-;;;23268:17;;;;;;;;;;:::i;:::-;;;;;;:36;;;;23164:151;23329:4;:23;;;23325:96;;;23368:42;;;;;;;;;;;;-1:-1:-1;;;23368:42:59;;;;:12;23381:3;;;;:::i;:::-;;;23368:17;;;;;;;;;;:::i;:::-;;;;;;:42;;;;23325:96;23494:22;23532:1;23519:15;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23494:40;;23549:7;23544:82;23566:1;23562:5;;:1;:5;;;23544:82;;;23600:12;23613:1;23600:15;;;;;;;;;;:::i;:::-;;;;;;;23588:6;23595:1;23588:9;;;;;;;;;;:::i;:::-;;;;;;;;;;:27;23569:3;;23544:82;;;-1:-1:-1;23643:6:59;22073:1583;-1:-1:-1;;;;;;;22073:1583:59:o;2919:210:56:-;-1:-1:-1;;;;;;;;;;;;;;;;;3092:30:56;;;;;;;;3098:18;;3092:30;;3051:15;;;3092:30;;;;;;;;2919:210::o;23812:180::-;23976:9;;;;;23925;;23947:11;;23960;;;;23893:4;;23916:56;;23925:9;23976;;23947:11;23916:8;:56::i;:::-;:69;;;23812:180;-1:-1:-1;;;23812:180:56:o;6252:977:61:-;6324:13;6349:25;6377:22;:12;:20;:22::i;:::-;6349:50;;6413:31;6427:16;:14;;;;;;;;;;;;;-1:-1:-1;;;6427:14:61;;;;:16::i;:::-;6413:4;;:13;:31::i;:::-;6409:814;;;6467:39;:28;6478:16;:14;;;;;;;;;;;;;-1:-1:-1;;;6478:14:61;;;;:16::i;:::-;6467:4;;:10;:28::i;:::-;:37;:39::i;6409:814::-;6527:25;6538:13;:11;;;;;;;;;;;;;-1:-1:-1;;;6538:11:61;;;;:13::i;:::-;6527:4;;:10;:25::i;:::-;6556:1;6527:30;6523:700;;6573:25;6584:13;:11;;;;;;;;;;;;;-1:-1:-1;;;6584:11:61;;;;:13::i;6573:25::-;;6619:36;:25;6630:13;:11;;;;;;;;;;;;;-1:-1:-1;;;6630:11:61;;;;:13::i;:::-;6619:4;;:10;:25::i;6523:700::-;6676:32;6690:17;:15;;;;;;;;;;;;;-1:-1:-1;;;6690:15:61;;;;:17::i;6676:32::-;6672:551;;;6724:21;6748:27;6755:4;6761:13;:11;;;;;;;;;;;;;-1:-1:-1;;;6761:11:61;;;;:13::i;:::-;6748:6;:27::i;:::-;6724:51;;6789:22;6814:5;6835:1;6820:5;:12;:16;;;;:::i;:::-;6814:23;;;;;;;;:::i;:::-;;;;;;;6789:48;;6858:54;:43;6883:17;:15;;;;;;;;;;;;;-1:-1:-1;;;6883:15:61;;;;:17::i;:::-;6858:18;:8;:16;:18::i;:::-;:24;;:43::i;:54::-;6851:61;6252:977;-1:-1:-1;;;;;6252:977:61:o;6672:551::-;7040:12;6967:231;;;;;;;;:::i;5344:902::-;5415:13;5440:25;5468:22;:12;:20;:22::i;:::-;5440:50;;5504:31;5518:16;:14;;;;;;;;;;;;;-1:-1:-1;;;5518:14:61;;;;:16::i;5504:31::-;5500:740;;;5558:15;:4;:13;:15::i;5500:740::-;5594:25;5605:13;:11;;;;;;;;;;;;;-1:-1:-1;;;5605:11:61;;;;:13::i;5594:25::-;5623:1;5594:30;5590:650;;5647:36;:25;5658:13;:11;;;;;;;;;;;;;-1:-1:-1;;;5658:11:61;;;;:13::i;5590:650::-;5718:32;5732:17;:15;;;;;;;;;;;;;-1:-1:-1;;;5732:15:61;;;;:17::i;5718:32::-;5714:232;;;5770:21;5794:27;5801:4;5807:13;:11;;;;;;;;;;;;;-1:-1:-1;;;5807:11:61;;;;:13::i;5794:27::-;5770:51;;5858:1;5843:5;:12;:16;5839:93;;;5890:5;5911:1;5896:5;:12;:16;;;;:::i;:::-;5890:23;;;;;;;;:::i;:::-;;;;;;;5883:30;;;;5344:902;;;:::o;5839:93::-;5752:194;6057:12;5984:231;;;;;;;;:::i;13892:553:56:-;14005:11;;13993:9;;13973:4;;-1:-1:-1;13989:66:56;;;-1:-1:-1;14039:5:56;14032:12;;13989:66;14104:11;;14092:9;;14080;;;;14065:12;;14104:11;14080:21;;;:::i;:::-;:35;;;;:::i;:::-;14065:50;;14141:6;:11;;;14130:7;:22;14126:64;;14175:4;14168:11;;;;;14126:64;14257:13;;14318:4;14306:17;;14300:24;14377:28;;;14349:26;;14346:60;;-1:-1:-1;13892:553:56;;;;:::o;637:698:50:-;693:13;742:14;759:17;770:5;759:10;:17::i;:::-;779:1;759:21;742:38;;794:20;828:6;817:18;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;817:18:50;-1:-1:-1;794:41:50;-1:-1:-1;955:28:50;;;971:2;955:28;1010:282;-1:-1:-1;;1041:5:50;-1:-1:-1;;;1175:2:50;1164:14;;1159:32;1041:5;1146:46;1236:2;1227:11;;;-1:-1:-1;1256:21:50;1010:282;1256:21;-1:-1:-1;1312:6:50;637:698;-1:-1:-1;;;637:698:50:o;7601:573:61:-;7695:15;7722:27;7764:6;7759:244;7780:6;:13;7776:1;:17;7759:244;;;7844:13;7859:6;7866:1;7859:9;;;;;;;;:::i;:::-;;;;;;;7830:39;;;;;;;;;:::i;:::-;;;;;;;;;;;;;7814:55;;7908:1;7892:6;:13;:17;;;;:::i;:::-;7887:1;:22;7883:110;;7959:13;7945:33;;;;;;;;:::i;:::-;;;;;;;;;;;;;7929:49;;7883:110;7795:3;;7759:244;;;-1:-1:-1;8038:15:61;;;8051:1;8038:15;;;;;;;;;8013:22;;8038:15;;;;;;;;;;;;;;;;;;;;8013:40;;8075:8;8063:6;8070:1;8063:9;;;;;;;;:::i;:::-;;;;;;:20;;;;8093:16;;;;;;;;;;;;;-1:-1:-1;;;8093:16:61;;;:6;8100:1;8093:9;;;;;;;;:::i;:::-;;;;;;:16;;;;8131:13;8119:6;8126:1;8119:9;;;;;;;;:::i;:::-;;;;;;;;;;:25;8161:6;7601:573;-1:-1:-1;;;;7601:573:61:o;18891:258:56:-;-1:-1:-1;;;;;;;;;;;;;;;;;18992:8:56;19003:55;19011:4;:9;;;19022:4;:9;;;19033:6;:11;;;19046:6;:11;;;19003:7;:55::i;:::-;18992:66;;19087:4;:9;;;19081:3;:15;;;;:::i;:::-;19068:28;;:4;;:28;;;;;:::i;:::-;;;-1:-1:-1;19106:9:56;;;:15;-1:-1:-1;19106:9:56;;18891:258;-1:-1:-1;18891:258:56:o;12981:661::-;-1:-1:-1;;;;;;;;;;;;;;;;;13100:11:56;;13088:9;;:23;13084:65;;;-1:-1:-1;13134:4:56;13127:11;;13084:65;13203:11;;;;;13190:9;;;;13172:4;;13190:24;13186:320;;-1:-1:-1;13271:13:56;;13332:4;13322:15;;;13316:22;13378:17;;;13372:24;13453:28;;;13425:26;;;13422:60;13186:320;13520:5;13516:98;;;13554:11;;13541:24;;:4;;:24;;13554:11;;13541:24;:::i;:::-;;;-1:-1:-1;13592:11:56;;13579:9;;;:24;;;;13592:11;;13579:24;:::i;:::-;;;-1:-1:-1;13516:98:56;-1:-1:-1;13631:4:56;;12981:661;-1:-1:-1;;12981:661:56:o;21223:141::-;-1:-1:-1;;;;;;;;;;;;;;;;;21331:26:56;21337:4;21343:6;21351:5;21331;:26::i;:::-;;21223:141;;;;:::o;5301:265::-;5361:13;5386:17;5417:4;:9;;;5406:21;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;5406:21:56;;5386:41;;5437:11;5488:2;5483:3;5479:12;5469:22;;5503:36;5510:6;5518:4;:9;;;5529:4;:9;;;5503:6;:36::i;1335:292:61:-;1461:13;1486:24;1513:37;1529:12;1543:6;1513:15;:37::i;:::-;1581:17;;1605:14;;;;;1567:53;;1486:64;;-1:-1:-1;1567:53:61;;1605:14;;1567:53;;:::i;:::-;;;;;;;;;;;;;1560:60;;;1335:292;;;;:::o;17098:1457:56:-;17198:4;17214:8;17250:7;17237:9;:20;17233:1292;;17290:2;17277:9;:15;17273:1242;;17312:12;17346:13;;17342:110;;17430:1;17411:14;17416:9;17411:2;:14;:::i;:::-;17406:20;;:1;:20;:::i;:::-;17400:27;;:1;:27;:::i;:::-;:31;;;;:::i;:::-;17398:34;;-1:-1:-1;17342:110:56;17535:16;;17531:27;;17604:9;17584:17;17594:7;17584;:17;:::i;:::-;:29;;;;:::i;:::-;17690:10;;17578:35;;-1:-1:-1;17686:21:56;;17727:222;17745:10;17734:7;:21;17727:222;;17790:7;17783:3;:14;17779:58;;17830:7;17823:14;;;;;;;;17779:58;17859:5;;;;:::i;:::-;;;;17924:4;17918:3;17912:10;17908:21;17897:32;;17727:222;;;17973:15;17979:9;17973:3;:15;:::i;:::-;17966:22;;;;;;;;17273:1242;18125:31;;;18192:19;18146:9;18192:7;:19;:::i;:::-;18181:31;;:7;:31;:::i;:::-;18175:37;;18230:271;18244:7;18237:3;:14;18230:271;;18336:25;;;18388:16;;;18384:68;;18437:15;18443:9;18437:3;:15;:::i;:::-;18430:22;;;;;;;18384:68;18474:8;18481:1;18474:8;;:::i;:::-;;;18253:248;18230:271;;;18009:506;17273:1242;-1:-1:-1;18541:7:56;;17098:1457;-1:-1:-1;;;;17098:1457:56:o;14709:626::-;-1:-1:-1;;;;;;;;;;;;;;;;;14827:11:56;;14815:9;;:23;14811:65;;;-1:-1:-1;14861:4:56;14854:11;;14811:65;14925:11;;14913:9;;14901;;;;14886:12;;14925:11;14901:21;;;:::i;:::-;:35;;;;:::i;:::-;14988:11;;;;14886:50;;-1:-1:-1;14959:4:56;;14977:22;;14973:264;;-1:-1:-1;15056:13:56;;15121:4;15109:17;;15103:24;15184:28;;;15156:26;;;15153:60;14973:264;15251:5;15247:60;;;15285:11;;15272:24;;:4;;:24;;15285:11;;15272:24;:::i;:::-;;;-1:-1:-1;15247:60:56;-1:-1:-1;15324:4:56;;14709:626;-1:-1:-1;;;14709:626:56:o;23209:364::-;23287:8;23307;23376:6;:11;;;23318:55;23326:4;:9;;;23337:4;:9;;;23348:6;:11;;;23361:6;:11;;;23318:7;:55::i;:::-;:69;;;;:::i;:::-;23307:80;;23397:170;23423:9;;23411;;;;:21;;23423:9;23411:21;:::i;:::-;23404:3;:28;23397:170;;23448:5;;;;:::i;:::-;;;;23545:6;:11;;;23473:69;23500:4;:9;;;23494:3;:15;;;;:::i;:::-;23481:9;;:29;;;;:::i;:::-;23512:3;23517:6;:11;;;23530:6;:11;;;23473:7;:69::i;:::-;:83;;;;:::i;:::-;23467:89;;23397:170;;4962:376:61;5088:15;5115:21;5152:28;:10;5169;5152:16;:28::i;:::-;:32;;5183:1;5152:32;:::i;:::-;5139:46;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5115:70;;5200:6;5195:115;5216:5;:12;5212:1;:16;5195:115;;;5260:39;:28;:10;5277;5260:16;:28::i;:39::-;5249:5;5255:1;5249:8;;;;;;;;:::i;:::-;;;;;;;;;;:50;5230:3;;5195:115;;;-1:-1:-1;5326:5:61;4962:376;-1:-1:-1;;;4962:376:61:o;12214:916:54:-;12267:7;;-1:-1:-1;;;12342:17:54;;12338:103;;-1:-1:-1;;;12379:17:54;;;-1:-1:-1;12424:2:54;12414:12;12338:103;12467:8;12458:5;:17;12454:103;;12504:8;12495:17;;;-1:-1:-1;12540:2:54;12530:12;12454:103;12583:8;12574:5;:17;12570:103;;12620:8;12611:17;;;-1:-1:-1;12656:2:54;12646:12;12570:103;12699:7;12690:5;:16;12686:100;;12735:7;12726:16;;;-1:-1:-1;12770:1:54;12760:11;12686:100;12812:7;12803:5;:16;12799:100;;12848:7;12839:16;;;-1:-1:-1;12883:1:54;12873:11;12799:100;12925:7;12916:5;:16;12912:100;;12961:7;12952:16;;;-1:-1:-1;12996:1:54;12986:11;12912:100;13038:7;13029:5;:16;13025:66;;13075:1;13065:11;13117:6;12214:916;-1:-1:-1;;12214:916:54:o;15492:1453:56:-;15591:4;15618:7;15591:4;15658:20;;;15654:1251;;15711:2;15698:9;:15;15694:1201;;15733:12;15767:13;;15763:110;;15851:1;15832:14;15837:9;15832:2;:14;:::i;:::-;15827:20;;:1;:20;:::i;:::-;15821:27;;:1;:27;:::i;:::-;:31;;;;:::i;:::-;15819:34;;-1:-1:-1;15763:110:56;15956:16;;15952:27;;15891:18;16030:9;16010:17;16020:7;16010;:17;:::i;:::-;:29;;;;:::i;:::-;16116:10;;15999:40;;-1:-1:-1;16112:21:56;;16153:228;16171:10;16160:7;:21;16153:228;;16216:3;16209;:10;16205:64;;16252:17;16262:7;16252;:17;:::i;:::-;16245:24;;;;;;;;;;16205:64;16291:5;;;;:::i;:::-;;;;16356:4;16350:3;16344:10;16340:21;16329:32;;16153:228;;;16405:3;16398:10;;;;;;;;;;15694:1201;-1:-1:-1;16545:31:56;;;16496:12;;16596:285;16617:19;16627:9;16617:7;:19;:::i;:::-;16610:3;:26;16596:285;;16728:25;;;16780:16;;;16776:56;;16829:3;16822:10;;;;;;;;16776:56;16854:8;16861:1;16854:8;;:::i;:::-;;;16645:236;16638:5;;;;;:::i;:::-;;;;16596:285;;;16429:466;15694:1201;16921:17;16931:7;16921;:17;:::i;:::-;16914:24;15492:1453;-1:-1:-1;;;;;;;15492:1453:56:o;20248:504::-;-1:-1:-1;;;;;;;;;;;;;;;;;20370:8:56;20381:55;20389:4;:9;;;20400:4;:9;;;20411:6;:11;;;20424:6;:11;;;20381:7;:55::i;:::-;20459:9;;;;;;20446:10;;;:22;;;;20497:9;20370:66;;-1:-1:-1;20491:15:56;;20370:66;20491:15;:::i;:::-;20478:28;;20539:9;;20527;;;;:21;;20539:9;20527:21;:::i;:::-;20520:3;:28;20516:208;;20601:1;20589:13;;20516:208;;;20659:11;;20646:10;;:24;;20659:11;20646:24;:::i;:::-;20633:37;;:4;;:37;;;;;:::i;:::-;;;-1:-1:-1;20702:11:56;;20696:17;;:3;:17;:::i;:::-;20684:9;;;:29;20516:208;-1:-1:-1;20740:5:56;;20248:504;-1:-1:-1;;;20248:504:56:o;2088:631::-;2227:2;2217:6;:12;2211:170;;2299:10;;2286:24;;2337:10;2345:2;2293:4;2337:10;:::i;:::-;;-1:-1:-1;2361:9:56;2368:2;2361:9;;:::i;:::-;;-1:-1:-1;2231:12:56;2241:2;2231:12;;:::i;:::-;;;2211:170;;;-1:-1:-1;;2463:10:56;;2459:72;;2519:1;2504:11;2509:6;2504:2;:11;:::i;:::-;2496:20;;:3;:20;:::i;:::-;:24;;;;:::i;:::-;2489:31;;2459:72;2582:10;;2637:11;;2633:22;;2594:9;;2578:26;2681:21;;;;2668:35;;;-1:-1:-1;2088:631:56:o;546:290:66:-;616:6;669:2;657:9;648:7;644:23;640:32;637:52;;;685:1;682;675:12;637:52;711:16;;-1:-1:-1;;;;;756:31:66;;746:42;;736:70;;802:1;799;792:12;1181:184;1251:6;1304:2;1292:9;1283:7;1279:23;1275:32;1272:52;;;1320:1;1317;1310:12;1272:52;-1:-1:-1;1343:16:66;;1181:184;-1:-1:-1;1181:184:66:o;1760:250::-;1845:1;1855:113;1869:6;1866:1;1863:13;1855:113;;;1945:11;;;1939:18;1926:11;;;1919:39;1891:2;1884:10;1855:113;;;-1:-1:-1;;2002:1:66;1984:16;;1977:27;1760:250::o;2015:271::-;2057:3;2095:5;2089:12;2122:6;2117:3;2110:19;2138:76;2207:6;2200:4;2195:3;2191:14;2184:4;2177:5;2173:16;2138:76;:::i;:::-;2268:2;2247:15;-1:-1:-1;;2243:29:66;2234:39;;;;2275:4;2230:50;;2015:271;-1:-1:-1;;2015:271:66:o;2291:220::-;2440:2;2429:9;2422:21;2403:4;2460:45;2501:2;2490:9;2486:18;2478:6;2460:45;:::i;2516:315::-;-1:-1:-1;;;;;2691:32:66;;2673:51;;2760:2;2755;2740:18;;2733:30;;;-1:-1:-1;;2780:45:66;;2806:18;;2798:6;2780:45;:::i;2836:127::-;2897:10;2892:3;2888:20;2885:1;2878:31;2928:4;2925:1;2918:15;2952:4;2949:1;2942:15;2968:248;3035:2;3029:9;3077:4;3065:17;;3112:18;3097:34;;3133:22;;;3094:62;3091:88;;;3159:18;;:::i;:::-;3195:2;3188:22;2968:248;:::o;3221:614::-;3296:5;3326:18;3367:2;3359:6;3356:14;3353:40;;;3373:18;;:::i;:::-;3448:2;3442:9;3416:2;3502:15;;-1:-1:-1;;3498:24:66;;;3524:2;3494:33;3490:42;3478:55;;;3548:18;;;3568:22;;;3545:46;3542:72;;;3594:18;;:::i;:::-;3634:10;3630:2;3623:22;3663:6;3654:15;;3693:6;3685;3678:22;3733:3;3724:6;3719:3;3715:16;3712:25;3709:45;;;3750:1;3747;3740:12;3709:45;3763:66;3822:6;3815:4;3807:6;3803:17;3798:3;3763:66;:::i;:::-;;;;3221:614;;;;;:::o;3840:235::-;3893:5;3946:3;3939:4;3931:6;3927:17;3923:27;3913:55;;3964:1;3961;3954:12;3913:55;3986:83;4065:3;4056:6;4050:13;4043:4;4035:6;4031:17;3986:83;:::i;4080:335::-;4159:6;4212:2;4200:9;4191:7;4187:23;4183:32;4180:52;;;4228:1;4225;4218:12;4180:52;4261:9;4255:16;4294:18;4286:6;4283:30;4280:50;;;4326:1;4323;4316:12;4280:50;4349:60;4401:7;4392:6;4381:9;4377:22;4349:60;:::i;4420:492::-;4595:3;4633:6;4627:13;4649:66;4708:6;4703:3;4696:4;4688:6;4684:17;4649:66;:::i;:::-;4778:13;;4737:16;;;;4800:70;4778:13;4737:16;4847:4;4835:17;;4800:70;:::i;:::-;4886:20;;4420:492;-1:-1:-1;;;;4420:492:66:o;4917:995::-;5398:28;5393:3;5386:41;5368:3;5456:6;5450:13;5472:75;5540:6;5535:2;5530:3;5526:12;5519:4;5511:6;5507:17;5472:75;:::i;:::-;5611:66;5606:2;5566:16;;;5598:11;;;5591:87;5703:13;;5725:76;5703:13;5787:2;5779:11;;5772:4;5760:17;;5725:76;:::i;:::-;-1:-1:-1;;;5861:2:66;5820:17;;;;5853:11;;;5846:33;5903:2;5895:11;;4917:995;-1:-1:-1;;;;4917:995:66:o;5917:779::-;6307:28;6302:3;6295:41;6277:3;6365:6;6359:13;6381:75;6449:6;6444:2;6439:3;6435:12;6428:4;6420:6;6416:17;6381:75;:::i;:::-;-1:-1:-1;;;6515:2:66;6475:16;;;6507:11;;;6500:25;6550:13;;6572:76;6550:13;6634:2;6626:11;;6619:4;6607:17;;6572:76;:::i;:::-;6668:17;6687:2;6664:26;;5917:779;-1:-1:-1;;;;5917:779:66:o;6701:504::-;6963:34;6958:3;6951:47;-1:-1:-1;;;7023:2:66;7018:3;7014:12;7007:33;6933:3;7069:6;7063:13;7085:73;7151:6;7146:2;7141:3;7137:12;7132:2;7124:6;7120:15;7085:73;:::i;:::-;7178:16;;;;7196:2;7174:25;;6701:504;-1:-1:-1;;6701:504:66:o;7210:507::-;7472:34;7467:3;7460:47;7546:4;7541:3;7537:14;7532:2;7527:3;7523:12;7516:36;7442:3;7581:6;7575:13;7597:73;7663:6;7658:2;7653:3;7649:12;7644:2;7636:6;7632:15;7597:73;:::i;:::-;7690:16;;;;7708:2;7686:25;;7210:507;-1:-1:-1;;7210:507:66:o;7722:453::-;7972:2;7961:9;7954:21;8011:2;8006;7995:9;7991:18;7984:30;-1:-1:-1;;;8045:2:66;8034:9;8030:18;8023:41;8102:3;8095:4;8084:9;8080:20;8073:33;7935:4;8123:46;8164:3;8153:9;8149:19;8141:6;8123:46;:::i;8180:458::-;8260:6;8313:2;8301:9;8292:7;8288:23;8284:32;8281:52;;;8329:1;8326;8319:12;8281:52;8362:9;8356:16;8395:18;8387:6;8384:30;8381:50;;;8427:1;8424;8417:12;8381:50;8450:22;;8503:4;8495:13;;8491:27;-1:-1:-1;8481:55:66;;8532:1;8529;8522:12;8481:55;8555:77;8624:7;8619:2;8613:9;8608:2;8604;8600:11;8555:77;:::i;8643:1451::-;9278:3;9316:6;9310:13;9332:66;9391:6;9386:3;9379:4;9371:6;9367:17;9332:66;:::i;:::-;9429:6;9424:3;9420:16;9407:29;;-1:-1:-1;;;9481:2:66;9474:5;9467:17;9515:6;9509:13;9531:78;9600:8;9596:1;9589:5;9585:13;9578:4;9570:6;9566:17;9531:78;:::i;:::-;9672:1;9628:20;;9664:10;;;9657:22;;;9704:13;;9726:75;9704:13;9788:1;9780:10;;9773:4;9761:17;;9726:75;:::i;:::-;9861:1;9820:17;;9853:10;;;9846:22;9893:13;;9915:75;9893:13;9977:1;9969:10;;9962:4;9950:17;;9915:75;:::i;:::-;-1:-1:-1;;;10050:1:66;10009:17;;;;10042:10;;;10035:27;10086:1;10078:10;;8643:1451;-1:-1:-1;;;;;;8643:1451:66:o;10099:484::-;10349:2;10338:9;10331:21;10312:4;10375:45;10416:2;10405:9;10401:18;10393:6;10375:45;:::i;:::-;10468:9;10460:6;10456:22;10451:2;10440:9;10436:18;10429:50;10503:1;10495:6;10488:17;-1:-1:-1;;;10533:2:66;10525:6;10521:15;10514:31;10574:2;10566:6;10562:15;10554:23;;;10099:484;;;;:::o;10588:277::-;10655:6;10708:2;10696:9;10687:7;10683:23;10679:32;10676:52;;;10724:1;10721;10714:12;10676:52;10756:9;10750:16;10809:5;10802:13;10795:21;10788:5;10785:32;10775:60;;10831:1;10828;10821:12;10870:673;11223:33;11218:3;11211:46;11193:3;11286:6;11280:13;11302:75;11370:6;11365:2;11360:3;11356:12;11349:4;11341:6;11337:17;11302:75;:::i;:::-;11441:34;11436:2;11396:16;;;;11428:11;;;11421:55;-1:-1:-1;;;;11500:2:66;11492:11;;11485:25;11534:2;11526:11;;10870:673;-1:-1:-1;10870:673:66:o;11548:498::-;11798:2;11787:9;11780:21;11761:4;11824:45;11865:2;11854:9;11850:18;11842:6;11824:45;:::i;:::-;11917:9;11909:6;11905:22;11900:2;11889:9;11885:18;11878:50;11952:2;11944:6;11937:18;-1:-1:-1;;;11983:2:66;11975:6;11971:15;11964:44;12037:2;12029:6;12025:15;12017:23;;;11548:498;;;;:::o;12051:493::-;12301:2;12290:9;12283:21;12264:4;12327:45;12368:2;12357:9;12353:18;12345:6;12327:45;:::i;:::-;12420:9;12412:6;12408:22;12403:2;12392:9;12388:18;12381:50;12455:2;12447:6;12440:18;-1:-1:-1;;;12486:2:66;12478:6;12474:15;12467:39;12535:2;12527:6;12523:15;12515:23;;;12051:493;;;;:::o;12549:600::-;-1:-1:-1;;;12887:3:66;12880:35;12862:3;12944:6;12938:13;12960:75;13028:6;13023:2;13018:3;13014:12;13007:4;12999:6;12995:17;12960:75;:::i;:::-;-1:-1:-1;;;13094:2:66;13054:16;;;;13086:11;;;13079:35;-1:-1:-1;13138:4:66;13130:13;;12549:600;-1:-1:-1;12549:600:66:o;13154:383::-;13351:2;13340:9;13333:21;13314:4;13377:45;13418:2;13407:9;13403:18;13395:6;13377:45;:::i;:::-;13470:9;13462:6;13458:22;13453:2;13442:9;13438:18;13431:50;13498:33;13524:6;13516;13498:33;:::i;13542:127::-;13603:10;13598:3;13594:20;13591:1;13584:31;13634:4;13631:1;13624:15;13658:4;13655:1;13648:15;13674:592;13985:3;14022:2;14017:3;14013:12;14046:2;14041:3;14034:15;14078:6;14072:13;14094:74;14161:6;14157:1;14152:3;14148:11;14141:4;14133:6;14129:17;14094:74;:::i;:::-;14227:1;14187:16;;14219:10;;;14212:22;-1:-1:-1;14258:1:66;14250:10;;13674:592;-1:-1:-1;13674:592:66:o;14271:453::-;14493:3;14531:6;14525:13;14547:66;14606:6;14601:3;14594:4;14586:6;14582:17;14547:66;:::i;:::-;-1:-1:-1;;;14635:16:66;;14660:28;;;-1:-1:-1;14715:2:66;14704:14;;14271:453;-1:-1:-1;14271:453:66:o;14729:571::-;14991:34;14986:3;14979:47;15056:34;15051:2;15046:3;15042:12;15035:56;-1:-1:-1;;;15116:2:66;15111:3;15107:12;15100:35;14961:3;15164:6;15158:13;15180:73;15246:6;15241:2;15236:3;15232:12;15227:2;15219:6;15215:15;15180:73;:::i;:::-;15273:16;;;;15291:2;15269:25;;14729:571;-1:-1:-1;;14729:571:66:o;15305:127::-;15366:10;15361:3;15357:20;15354:1;15347:31;15397:4;15394:1;15387:15;15421:4;15418:1;15411:15;15437:175;15474:3;15518:4;15511:5;15507:16;15547:4;15538:7;15535:17;15532:43;;15555:18;;:::i;:::-;15604:1;15591:15;;15437:175;-1:-1:-1;;15437:175:66:o;15617:504::-;15879:34;15874:3;15867:47;-1:-1:-1;;;15939:2:66;15934:3;15930:12;15923:33;15849:3;15985:6;15979:13;16001:73;16067:6;16062:2;16057:3;16053:12;16048:2;16040:6;16036:15;16001:73;:::i;16531:464::-;16781:2;16770:9;16763:21;16820:2;16815;16804:9;16800:18;16793:30;-1:-1:-1;;;16854:2:66;16843:9;16839:18;16832:52;16922:3;16915:4;16904:9;16900:20;16893:33;16744:4;16943:46;16984:3;16973:9;16969:19;16961:6;16943:46;:::i;17000:803::-;17162:4;17191:2;17231;17220:9;17216:18;17261:2;17250:9;17243:21;17284:6;17319;17313:13;17350:6;17342;17335:22;17388:2;17377:9;17373:18;17366:25;;17450:2;17440:6;17437:1;17433:14;17422:9;17418:30;17414:39;17400:53;;17488:2;17480:6;17476:15;17509:1;17519:255;17533:6;17530:1;17527:13;17519:255;;;17626:2;17622:7;17610:9;17602:6;17598:22;17594:36;17589:3;17582:49;17654:40;17687:6;17678;17672:13;17654:40;:::i;:::-;17644:50;-1:-1:-1;17752:12:66;;;;17717:15;;;;17555:1;17548:9;17519:255;;;-1:-1:-1;17791:6:66;;17000:803;-1:-1:-1;;;;;;;17000:803:66:o;17808:943::-;17905:6;17958:2;17946:9;17937:7;17933:23;17929:32;17926:52;;;17974:1;17971;17964:12;17926:52;18007:9;18001:16;18036:18;18077:2;18069:6;18066:14;18063:34;;;18093:1;18090;18083:12;18063:34;18116:22;;;;18172:4;18154:16;;;18150:27;18147:47;;;18190:1;18187;18180:12;18147:47;18216:17;;:::i;:::-;18263:2;18257:9;18311:7;18308:1;18297:22;18288:7;18285:35;18275:63;;18334:1;18331;18324:12;18275:63;18347:22;;18408:2;18400:11;;18394:18;18424:16;;;18421:36;;;18453:1;18450;18443:12;18421:36;18489:55;18536:7;18525:8;18521:2;18517:17;18489:55;:::i;:::-;18484:2;18477:5;18473:14;18466:79;;18584:2;18580;18576:11;18570:18;18613:2;18603:8;18600:16;18597:36;;;18629:1;18626;18619:12;18597:36;18665:55;18712:7;18701:8;18697:2;18693:17;18665:55;:::i;:::-;18660:2;18649:14;;18642:79;-1:-1:-1;18653:5:66;17808:943;-1:-1:-1;;;;;17808:943:66:o;18756:1371::-;19119:34;19114:3;19107:47;19193:2;19188:3;19184:12;19179:2;19174:3;19170:12;19163:34;19089:3;19226:6;19220:13;19242:73;19308:6;19303:2;19298:3;19294:12;19289:2;19281:6;19277:15;19242:73;:::i;:::-;19379:66;19374:2;19334:16;;;;19366:11;;;19359:87;-1:-1:-1;19475:34:66;19470:2;19462:11;;19455:55;19539:34;19534:2;19526:11;;19519:55;19604:34;19598:3;19590:12;;19583:56;19669:34;19663:3;19655:12;;19648:56;19734:34;19728:3;19720:12;;19713:56;19799:34;19793:3;19785:12;;19778:56;19864:34;19858:3;19850:12;;19843:56;19929:66;19923:3;19915:12;;19908:88;20026:66;20020:3;20012:12;;20005:88;20117:3;20109:12;;18756:1371;-1:-1:-1;18756:1371:66:o;20132:837::-;20533:34;20528:3;20521:47;-1:-1:-1;;;20593:2:66;20588:3;20584:12;20577:25;20503:3;20631:6;20625:13;20647:73;20713:6;20708:2;20703:3;20699:12;20694:2;20686:6;20682:15;20647:73;:::i;:::-;-1:-1:-1;;;20779:2:66;20739:16;;;20771:11;;;20764:36;20825:13;;20847:74;20825:13;20907:2;20899:11;;20894:2;20882:15;;20847:74;:::i;:::-;20941:17;20960:2;20937:26;;20132:837;-1:-1:-1;;;;20132:837:66:o;20974:450::-;21226:30;21221:3;21214:43;21196:3;21286:6;21280:13;21302:75;21370:6;21365:2;21360:3;21356:12;21349:4;21341:6;21337:17;21302:75;:::i;:::-;21397:16;;;;21415:2;21393:25;;20974:450;-1:-1:-1;;20974:450:66:o;21429:128::-;21496:9;;;21517:11;;;21514:37;;;21531:18;;:::i;21562:792::-;-1:-1:-1;;;21910:3:66;21903:29;21885:3;21961:6;21955:13;21977:75;22045:6;22040:2;22035:3;22031:12;22024:4;22016:6;22012:17;21977:75;:::i;:::-;22116:34;22111:2;22071:16;;;;22103:11;;;22096:55;-1:-1:-1;22180:34:66;22175:2;22167:11;;22160:55;22244:34;22239:2;22231:11;;22224:55;-1:-1:-1;;;22303:3:66;22295:12;;22288:32;22344:3;22336:12;;21562:792;-1:-1:-1;21562:792:66:o;22359:125::-;22424:9;;;22445:10;;;22442:36;;;22458:18;;:::i;23122:441::-;23343:3;23381:6;23375:13;23397:66;23456:6;23451:3;23444:4;23436:6;23432:17;23397:66;:::i;:::-;-1:-1:-1;;;23485:16:66;;23510:18;;;-1:-1:-1;23555:1:66;23544:13;;23122:441;-1:-1:-1;23122:441:66:o;23568:629::-;23837:3;23875:6;23869:13;23891:66;23950:6;23945:3;23938:4;23930:6;23926:17;23891:66;:::i;:::-;-1:-1:-1;;;23979:16:66;;;24004:18;;;24047:13;;24069:78;24047:13;24134:1;24123:13;;24116:4;24104:17;;24069:78;:::i;:::-;24167:20;24189:1;24163:28;;23568:629;-1:-1:-1;;;;23568:629:66:o;24202:168::-;24275:9;;;24306;;24323:15;;;24317:22;;24303:37;24293:71;;24344:18;;:::i;24375:416::-;24464:1;24501:5;24464:1;24515:270;24536:7;24526:8;24523:21;24515:270;;;24595:4;24591:1;24587:6;24583:17;24577:4;24574:27;24571:53;;;24604:18;;:::i;:::-;24654:7;24644:8;24640:22;24637:55;;;24674:16;;;;24637:55;24753:22;;;;24713:15;;;;24515:270;;;24519:3;24375:416;;;;;:::o;24796:806::-;24845:5;24875:8;24865:80;;-1:-1:-1;24916:1:66;24930:5;;24865:80;24964:4;24954:76;;-1:-1:-1;25001:1:66;25015:5;;24954:76;25046:4;25064:1;25059:59;;;;25132:1;25127:130;;;;25039:218;;25059:59;25089:1;25080:10;;25103:5;;;25127:130;25164:3;25154:8;25151:17;25148:43;;;25171:18;;:::i;:::-;-1:-1:-1;;25227:1:66;25213:16;;25242:5;;25039:218;;25341:2;25331:8;25328:16;25322:3;25316:4;25313:13;25309:36;25303:2;25293:8;25290:16;25285:2;25279:4;25276:12;25272:35;25269:77;25266:159;;;-1:-1:-1;25378:19:66;;;25410:5;;25266:159;25457:34;25482:8;25476:4;25457:34;:::i;:::-;25527:6;25523:1;25519:6;25515:19;25506:7;25503:32;25500:58;;;25538:18;;:::i;:::-;25576:20;;24796:806;-1:-1:-1;;;24796:806:66:o;25607:131::-;25667:5;25696:36;25723:8;25717:4;25696:36;:::i;25743:136::-;25782:3;25810:5;25800:39;;25819:18;;:::i;:::-;-1:-1:-1;;;25855:18:66;;25743:136::o;25884:135::-;25923:3;25944:17;;;25941:43;;25964:18;;:::i;:::-;-1:-1:-1;26011:1:66;26000:13;;25884:135::o",
              "generatedSources": [
                {
                  "ast": {
                    "nativeSrc": "0:26153:66",
                    "nodeType": "YulBlock",
                    "src": "0:26153:66",
                    "statements": [
                      {
                        "nativeSrc": "6:3:66",
                        "nodeType": "YulBlock",
                        "src": "6:3:66",
                        "statements": []
                      },
                      {
                        "body": {
                          "nativeSrc": "109:92:66",
                          "nodeType": "YulBlock",
                          "src": "109:92:66",
                          "statements": [
                            {
                              "nativeSrc": "119:26:66",
                              "nodeType": "YulAssignment",
                              "src": "119:26:66",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "131:9:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "131:9:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "142:2:66",
                                    "nodeType": "YulLiteral",
                                    "src": "142:2:66",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "127:3:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "127:3:66"
                                },
                                "nativeSrc": "127:18:66",
                                "nodeType": "YulFunctionCall",
                                "src": "127:18:66"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nativeSrc": "119:4:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "119:4:66"
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "161:9:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "161:9:66"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "value0",
                                            "nativeSrc": "186:6:66",
                                            "nodeType": "YulIdentifier",
                                            "src": "186:6:66"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "iszero",
                                          "nativeSrc": "179:6:66",
                                          "nodeType": "YulIdentifier",
                                          "src": "179:6:66"
                                        },
                                        "nativeSrc": "179:14:66",
                                        "nodeType": "YulFunctionCall",
                                        "src": "179:14:66"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "iszero",
                                      "nativeSrc": "172:6:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "172:6:66"
                                    },
                                    "nativeSrc": "172:22:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "172:22:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "154:6:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "154:6:66"
                                },
                                "nativeSrc": "154:41:66",
                                "nodeType": "YulFunctionCall",
                                "src": "154:41:66"
                              },
                              "nativeSrc": "154:41:66",
                              "nodeType": "YulExpressionStatement",
                              "src": "154:41:66"
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
                        "nativeSrc": "14:187:66",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nativeSrc": "78:9:66",
                            "nodeType": "YulTypedName",
                            "src": "78:9:66",
                            "type": ""
                          },
                          {
                            "name": "value0",
                            "nativeSrc": "89:6:66",
                            "nodeType": "YulTypedName",
                            "src": "89:6:66",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nativeSrc": "100:4:66",
                            "nodeType": "YulTypedName",
                            "src": "100:4:66",
                            "type": ""
                          }
                        ],
                        "src": "14:187:66"
                      },
                      {
                        "body": {
                          "nativeSrc": "380:161:66",
                          "nodeType": "YulBlock",
                          "src": "380:161:66",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "397:9:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "397:9:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "408:2:66",
                                    "nodeType": "YulLiteral",
                                    "src": "408:2:66",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "390:6:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "390:6:66"
                                },
                                "nativeSrc": "390:21:66",
                                "nodeType": "YulFunctionCall",
                                "src": "390:21:66"
                              },
                              "nativeSrc": "390:21:66",
                              "nodeType": "YulExpressionStatement",
                              "src": "390:21:66"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nativeSrc": "431:9:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "431:9:66"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "442:2:66",
                                        "nodeType": "YulLiteral",
                                        "src": "442:2:66",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "427:3:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "427:3:66"
                                    },
                                    "nativeSrc": "427:18:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "427:18:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "447:2:66",
                                    "nodeType": "YulLiteral",
                                    "src": "447:2:66",
                                    "type": "",
                                    "value": "11"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "420:6:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "420:6:66"
                                },
                                "nativeSrc": "420:30:66",
                                "nodeType": "YulFunctionCall",
                                "src": "420:30:66"
                              },
                              "nativeSrc": "420:30:66",
                              "nodeType": "YulExpressionStatement",
                              "src": "420:30:66"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nativeSrc": "470:9:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "470:9:66"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "481:2:66",
                                        "nodeType": "YulLiteral",
                                        "src": "481:2:66",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "466:3:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "466:3:66"
                                    },
                                    "nativeSrc": "466:18:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "466:18:66"
                                  },
                                  {
                                    "hexValue": "474f565f41444452455353",
                                    "kind": "string",
                                    "nativeSrc": "486:13:66",
                                    "nodeType": "YulLiteral",
                                    "src": "486:13:66",
                                    "type": "",
                                    "value": "GOV_ADDRESS"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "459:6:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "459:6:66"
                                },
                                "nativeSrc": "459:41:66",
                                "nodeType": "YulFunctionCall",
                                "src": "459:41:66"
                              },
                              "nativeSrc": "459:41:66",
                              "nodeType": "YulExpressionStatement",
                              "src": "459:41:66"
                            },
                            {
                              "nativeSrc": "509:26:66",
                              "nodeType": "YulAssignment",
                              "src": "509:26:66",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "521:9:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "521:9:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "532:2:66",
                                    "nodeType": "YulLiteral",
                                    "src": "532:2:66",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "517:3:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "517:3:66"
                                },
                                "nativeSrc": "517:18:66",
                                "nodeType": "YulFunctionCall",
                                "src": "517:18:66"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nativeSrc": "509:4:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "509:4:66"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_stringliteral_47f5c9ccb1f88a7d09e89263cb3ed348d4673e8f555074bf0b0996dc8143e7bc__to_t_string_memory_ptr__fromStack_reversed",
                        "nativeSrc": "206:335:66",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nativeSrc": "357:9:66",
                            "nodeType": "YulTypedName",
                            "src": "357:9:66",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nativeSrc": "371:4:66",
                            "nodeType": "YulTypedName",
                            "src": "371:4:66",
                            "type": ""
                          }
                        ],
                        "src": "206:335:66"
                      },
                      {
                        "body": {
                          "nativeSrc": "627:209:66",
                          "nodeType": "YulBlock",
                          "src": "627:209:66",
                          "statements": [
                            {
                              "body": {
                                "nativeSrc": "673:16:66",
                                "nodeType": "YulBlock",
                                "src": "673:16:66",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nativeSrc": "682:1:66",
                                          "nodeType": "YulLiteral",
                                          "src": "682:1:66",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nativeSrc": "685:1:66",
                                          "nodeType": "YulLiteral",
                                          "src": "685:1:66",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nativeSrc": "675:6:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "675:6:66"
                                      },
                                      "nativeSrc": "675:12:66",
                                      "nodeType": "YulFunctionCall",
                                      "src": "675:12:66"
                                    },
                                    "nativeSrc": "675:12:66",
                                    "nodeType": "YulExpressionStatement",
                                    "src": "675:12:66"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "dataEnd",
                                        "nativeSrc": "648:7:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "648:7:66"
                                      },
                                      {
                                        "name": "headStart",
                                        "nativeSrc": "657:9:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "657:9:66"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nativeSrc": "644:3:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "644:3:66"
                                    },
                                    "nativeSrc": "644:23:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "644:23:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "669:2:66",
                                    "nodeType": "YulLiteral",
                                    "src": "669:2:66",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nativeSrc": "640:3:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "640:3:66"
                                },
                                "nativeSrc": "640:32:66",
                                "nodeType": "YulFunctionCall",
                                "src": "640:32:66"
                              },
                              "nativeSrc": "637:52:66",
                              "nodeType": "YulIf",
                              "src": "637:52:66"
                            },
                            {
                              "nativeSrc": "698:29:66",
                              "nodeType": "YulVariableDeclaration",
                              "src": "698:29:66",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "717:9:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "717:9:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nativeSrc": "711:5:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "711:5:66"
                                },
                                "nativeSrc": "711:16:66",
                                "nodeType": "YulFunctionCall",
                                "src": "711:16:66"
                              },
                              "variables": [
                                {
                                  "name": "value",
                                  "nativeSrc": "702:5:66",
                                  "nodeType": "YulTypedName",
                                  "src": "702:5:66",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "body": {
                                "nativeSrc": "790:16:66",
                                "nodeType": "YulBlock",
                                "src": "790:16:66",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nativeSrc": "799:1:66",
                                          "nodeType": "YulLiteral",
                                          "src": "799:1:66",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nativeSrc": "802:1:66",
                                          "nodeType": "YulLiteral",
                                          "src": "802:1:66",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nativeSrc": "792:6:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "792:6:66"
                                      },
                                      "nativeSrc": "792:12:66",
                                      "nodeType": "YulFunctionCall",
                                      "src": "792:12:66"
                                    },
                                    "nativeSrc": "792:12:66",
                                    "nodeType": "YulExpressionStatement",
                                    "src": "792:12:66"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nativeSrc": "749:5:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "749:5:66"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "name": "value",
                                            "nativeSrc": "760:5:66",
                                            "nodeType": "YulIdentifier",
                                            "src": "760:5:66"
                                          },
                                          {
                                            "arguments": [
                                              {
                                                "arguments": [
                                                  {
                                                    "kind": "number",
                                                    "nativeSrc": "775:3:66",
                                                    "nodeType": "YulLiteral",
                                                    "src": "775:3:66",
                                                    "type": "",
                                                    "value": "160"
                                                  },
                                                  {
                                                    "kind": "number",
                                                    "nativeSrc": "780:1:66",
                                                    "nodeType": "YulLiteral",
                                                    "src": "780:1:66",
                                                    "type": "",
                                                    "value": "1"
                                                  }
                                                ],
                                                "functionName": {
                                                  "name": "shl",
                                                  "nativeSrc": "771:3:66",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "771:3:66"
                                                },
                                                "nativeSrc": "771:11:66",
                                                "nodeType": "YulFunctionCall",
                                                "src": "771:11:66"
                                              },
                                              {
                                                "kind": "number",
                                                "nativeSrc": "784:1:66",
                                                "nodeType": "YulLiteral",
                                                "src": "784:1:66",
                                                "type": "",
                                                "value": "1"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "sub",
                                              "nativeSrc": "767:3:66",
                                              "nodeType": "YulIdentifier",
                                              "src": "767:3:66"
                                            },
                                            "nativeSrc": "767:19:66",
                                            "nodeType": "YulFunctionCall",
                                            "src": "767:19:66"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "and",
                                          "nativeSrc": "756:3:66",
                                          "nodeType": "YulIdentifier",
                                          "src": "756:3:66"
                                        },
                                        "nativeSrc": "756:31:66",
                                        "nodeType": "YulFunctionCall",
                                        "src": "756:31:66"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "eq",
                                      "nativeSrc": "746:2:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "746:2:66"
                                    },
                                    "nativeSrc": "746:42:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "746:42:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nativeSrc": "739:6:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "739:6:66"
                                },
                                "nativeSrc": "739:50:66",
                                "nodeType": "YulFunctionCall",
                                "src": "739:50:66"
                              },
                              "nativeSrc": "736:70:66",
                              "nodeType": "YulIf",
                              "src": "736:70:66"
                            },
                            {
                              "nativeSrc": "815:15:66",
                              "nodeType": "YulAssignment",
                              "src": "815:15:66",
                              "value": {
                                "name": "value",
                                "nativeSrc": "825:5:66",
                                "nodeType": "YulIdentifier",
                                "src": "825:5:66"
                              },
                              "variableNames": [
                                {
                                  "name": "value0",
                                  "nativeSrc": "815:6:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "815:6:66"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_decode_tuple_t_address_fromMemory",
                        "nativeSrc": "546:290:66",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nativeSrc": "593:9:66",
                            "nodeType": "YulTypedName",
                            "src": "593:9:66",
                            "type": ""
                          },
                          {
                            "name": "dataEnd",
                            "nativeSrc": "604:7:66",
                            "nodeType": "YulTypedName",
                            "src": "604:7:66",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "value0",
                            "nativeSrc": "616:6:66",
                            "nodeType": "YulTypedName",
                            "src": "616:6:66",
                            "type": ""
                          }
                        ],
                        "src": "546:290:66"
                      },
                      {
                        "body": {
                          "nativeSrc": "1015:161:66",
                          "nodeType": "YulBlock",
                          "src": "1015:161:66",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "1032:9:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "1032:9:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "1043:2:66",
                                    "nodeType": "YulLiteral",
                                    "src": "1043:2:66",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "1025:6:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "1025:6:66"
                                },
                                "nativeSrc": "1025:21:66",
                                "nodeType": "YulFunctionCall",
                                "src": "1025:21:66"
                              },
                              "nativeSrc": "1025:21:66",
                              "nodeType": "YulExpressionStatement",
                              "src": "1025:21:66"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nativeSrc": "1066:9:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "1066:9:66"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "1077:2:66",
                                        "nodeType": "YulLiteral",
                                        "src": "1077:2:66",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "1062:3:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "1062:3:66"
                                    },
                                    "nativeSrc": "1062:18:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "1062:18:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "1082:2:66",
                                    "nodeType": "YulLiteral",
                                    "src": "1082:2:66",
                                    "type": "",
                                    "value": "11"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "1055:6:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "1055:6:66"
                                },
                                "nativeSrc": "1055:30:66",
                                "nodeType": "YulFunctionCall",
                                "src": "1055:30:66"
                              },
                              "nativeSrc": "1055:30:66",
                              "nodeType": "YulExpressionStatement",
                              "src": "1055:30:66"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nativeSrc": "1105:9:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "1105:9:66"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "1116:2:66",
                                        "nodeType": "YulLiteral",
                                        "src": "1116:2:66",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "1101:3:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "1101:3:66"
                                    },
                                    "nativeSrc": "1101:18:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "1101:18:66"
                                  },
                                  {
                                    "hexValue": "505249564154455f4b4559",
                                    "kind": "string",
                                    "nativeSrc": "1121:13:66",
                                    "nodeType": "YulLiteral",
                                    "src": "1121:13:66",
                                    "type": "",
                                    "value": "PRIVATE_KEY"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "1094:6:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "1094:6:66"
                                },
                                "nativeSrc": "1094:41:66",
                                "nodeType": "YulFunctionCall",
                                "src": "1094:41:66"
                              },
                              "nativeSrc": "1094:41:66",
                              "nodeType": "YulExpressionStatement",
                              "src": "1094:41:66"
                            },
                            {
                              "nativeSrc": "1144:26:66",
                              "nodeType": "YulAssignment",
                              "src": "1144:26:66",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "1156:9:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "1156:9:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "1167:2:66",
                                    "nodeType": "YulLiteral",
                                    "src": "1167:2:66",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "1152:3:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "1152:3:66"
                                },
                                "nativeSrc": "1152:18:66",
                                "nodeType": "YulFunctionCall",
                                "src": "1152:18:66"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nativeSrc": "1144:4:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "1144:4:66"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_stringliteral_2ef6555c4d06f7a53d2dd092327f3256a8d6f18aff592d5349c12226686be6c5__to_t_string_memory_ptr__fromStack_reversed",
                        "nativeSrc": "841:335:66",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nativeSrc": "992:9:66",
                            "nodeType": "YulTypedName",
                            "src": "992:9:66",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nativeSrc": "1006:4:66",
                            "nodeType": "YulTypedName",
                            "src": "1006:4:66",
                            "type": ""
                          }
                        ],
                        "src": "841:335:66"
                      },
                      {
                        "body": {
                          "nativeSrc": "1262:103:66",
                          "nodeType": "YulBlock",
                          "src": "1262:103:66",
                          "statements": [
                            {
                              "body": {
                                "nativeSrc": "1308:16:66",
                                "nodeType": "YulBlock",
                                "src": "1308:16:66",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nativeSrc": "1317:1:66",
                                          "nodeType": "YulLiteral",
                                          "src": "1317:1:66",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nativeSrc": "1320:1:66",
                                          "nodeType": "YulLiteral",
                                          "src": "1320:1:66",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nativeSrc": "1310:6:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "1310:6:66"
                                      },
                                      "nativeSrc": "1310:12:66",
                                      "nodeType": "YulFunctionCall",
                                      "src": "1310:12:66"
                                    },
                                    "nativeSrc": "1310:12:66",
                                    "nodeType": "YulExpressionStatement",
                                    "src": "1310:12:66"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "dataEnd",
                                        "nativeSrc": "1283:7:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "1283:7:66"
                                      },
                                      {
                                        "name": "headStart",
                                        "nativeSrc": "1292:9:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "1292:9:66"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nativeSrc": "1279:3:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "1279:3:66"
                                    },
                                    "nativeSrc": "1279:23:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "1279:23:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "1304:2:66",
                                    "nodeType": "YulLiteral",
                                    "src": "1304:2:66",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nativeSrc": "1275:3:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "1275:3:66"
                                },
                                "nativeSrc": "1275:32:66",
                                "nodeType": "YulFunctionCall",
                                "src": "1275:32:66"
                              },
                              "nativeSrc": "1272:52:66",
                              "nodeType": "YulIf",
                              "src": "1272:52:66"
                            },
                            {
                              "nativeSrc": "1333:26:66",
                              "nodeType": "YulAssignment",
                              "src": "1333:26:66",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "1349:9:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "1349:9:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nativeSrc": "1343:5:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "1343:5:66"
                                },
                                "nativeSrc": "1343:16:66",
                                "nodeType": "YulFunctionCall",
                                "src": "1343:16:66"
                              },
                              "variableNames": [
                                {
                                  "name": "value0",
                                  "nativeSrc": "1333:6:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "1333:6:66"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_decode_tuple_t_uint256_fromMemory",
                        "nativeSrc": "1181:184:66",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nativeSrc": "1228:9:66",
                            "nodeType": "YulTypedName",
                            "src": "1228:9:66",
                            "type": ""
                          },
                          {
                            "name": "dataEnd",
                            "nativeSrc": "1239:7:66",
                            "nodeType": "YulTypedName",
                            "src": "1239:7:66",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "value0",
                            "nativeSrc": "1251:6:66",
                            "nodeType": "YulTypedName",
                            "src": "1251:6:66",
                            "type": ""
                          }
                        ],
                        "src": "1181:184:66"
                      },
                      {
                        "body": {
                          "nativeSrc": "1471:76:66",
                          "nodeType": "YulBlock",
                          "src": "1471:76:66",
                          "statements": [
                            {
                              "nativeSrc": "1481:26:66",
                              "nodeType": "YulAssignment",
                              "src": "1481:26:66",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "1493:9:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "1493:9:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "1504:2:66",
                                    "nodeType": "YulLiteral",
                                    "src": "1504:2:66",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "1489:3:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "1489:3:66"
                                },
                                "nativeSrc": "1489:18:66",
                                "nodeType": "YulFunctionCall",
                                "src": "1489:18:66"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nativeSrc": "1481:4:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "1481:4:66"
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "1523:9:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "1523:9:66"
                                  },
                                  {
                                    "name": "value0",
                                    "nativeSrc": "1534:6:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "1534:6:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "1516:6:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "1516:6:66"
                                },
                                "nativeSrc": "1516:25:66",
                                "nodeType": "YulFunctionCall",
                                "src": "1516:25:66"
                              },
                              "nativeSrc": "1516:25:66",
                              "nodeType": "YulExpressionStatement",
                              "src": "1516:25:66"
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
                        "nativeSrc": "1370:177:66",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nativeSrc": "1440:9:66",
                            "nodeType": "YulTypedName",
                            "src": "1440:9:66",
                            "type": ""
                          },
                          {
                            "name": "value0",
                            "nativeSrc": "1451:6:66",
                            "nodeType": "YulTypedName",
                            "src": "1451:6:66",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nativeSrc": "1462:4:66",
                            "nodeType": "YulTypedName",
                            "src": "1462:4:66",
                            "type": ""
                          }
                        ],
                        "src": "1370:177:66"
                      },
                      {
                        "body": {
                          "nativeSrc": "1653:102:66",
                          "nodeType": "YulBlock",
                          "src": "1653:102:66",
                          "statements": [
                            {
                              "nativeSrc": "1663:26:66",
                              "nodeType": "YulAssignment",
                              "src": "1663:26:66",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "1675:9:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "1675:9:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "1686:2:66",
                                    "nodeType": "YulLiteral",
                                    "src": "1686:2:66",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "1671:3:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "1671:3:66"
                                },
                                "nativeSrc": "1671:18:66",
                                "nodeType": "YulFunctionCall",
                                "src": "1671:18:66"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nativeSrc": "1663:4:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "1663:4:66"
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "1705:9:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "1705:9:66"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value0",
                                        "nativeSrc": "1720:6:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "1720:6:66"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "arguments": [
                                              {
                                                "kind": "number",
                                                "nativeSrc": "1736:3:66",
                                                "nodeType": "YulLiteral",
                                                "src": "1736:3:66",
                                                "type": "",
                                                "value": "160"
                                              },
                                              {
                                                "kind": "number",
                                                "nativeSrc": "1741:1:66",
                                                "nodeType": "YulLiteral",
                                                "src": "1741:1:66",
                                                "type": "",
                                                "value": "1"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "shl",
                                              "nativeSrc": "1732:3:66",
                                              "nodeType": "YulIdentifier",
                                              "src": "1732:3:66"
                                            },
                                            "nativeSrc": "1732:11:66",
                                            "nodeType": "YulFunctionCall",
                                            "src": "1732:11:66"
                                          },
                                          {
                                            "kind": "number",
                                            "nativeSrc": "1745:1:66",
                                            "nodeType": "YulLiteral",
                                            "src": "1745:1:66",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "sub",
                                          "nativeSrc": "1728:3:66",
                                          "nodeType": "YulIdentifier",
                                          "src": "1728:3:66"
                                        },
                                        "nativeSrc": "1728:19:66",
                                        "nodeType": "YulFunctionCall",
                                        "src": "1728:19:66"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nativeSrc": "1716:3:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "1716:3:66"
                                    },
                                    "nativeSrc": "1716:32:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "1716:32:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "1698:6:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "1698:6:66"
                                },
                                "nativeSrc": "1698:51:66",
                                "nodeType": "YulFunctionCall",
                                "src": "1698:51:66"
                              },
                              "nativeSrc": "1698:51:66",
                              "nodeType": "YulExpressionStatement",
                              "src": "1698:51:66"
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
                        "nativeSrc": "1552:203:66",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nativeSrc": "1622:9:66",
                            "nodeType": "YulTypedName",
                            "src": "1622:9:66",
                            "type": ""
                          },
                          {
                            "name": "value0",
                            "nativeSrc": "1633:6:66",
                            "nodeType": "YulTypedName",
                            "src": "1633:6:66",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nativeSrc": "1644:4:66",
                            "nodeType": "YulTypedName",
                            "src": "1644:4:66",
                            "type": ""
                          }
                        ],
                        "src": "1552:203:66"
                      },
                      {
                        "body": {
                          "nativeSrc": "1826:184:66",
                          "nodeType": "YulBlock",
                          "src": "1826:184:66",
                          "statements": [
                            {
                              "nativeSrc": "1836:10:66",
                              "nodeType": "YulVariableDeclaration",
                              "src": "1836:10:66",
                              "value": {
                                "kind": "number",
                                "nativeSrc": "1845:1:66",
                                "nodeType": "YulLiteral",
                                "src": "1845:1:66",
                                "type": "",
                                "value": "0"
                              },
                              "variables": [
                                {
                                  "name": "i",
                                  "nativeSrc": "1840:1:66",
                                  "nodeType": "YulTypedName",
                                  "src": "1840:1:66",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "body": {
                                "nativeSrc": "1905:63:66",
                                "nodeType": "YulBlock",
                                "src": "1905:63:66",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "name": "dst",
                                              "nativeSrc": "1930:3:66",
                                              "nodeType": "YulIdentifier",
                                              "src": "1930:3:66"
                                            },
                                            {
                                              "name": "i",
                                              "nativeSrc": "1935:1:66",
                                              "nodeType": "YulIdentifier",
                                              "src": "1935:1:66"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nativeSrc": "1926:3:66",
                                            "nodeType": "YulIdentifier",
                                            "src": "1926:3:66"
                                          },
                                          "nativeSrc": "1926:11:66",
                                          "nodeType": "YulFunctionCall",
                                          "src": "1926:11:66"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "arguments": [
                                                {
                                                  "name": "src",
                                                  "nativeSrc": "1949:3:66",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "1949:3:66"
                                                },
                                                {
                                                  "name": "i",
                                                  "nativeSrc": "1954:1:66",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "1954:1:66"
                                                }
                                              ],
                                              "functionName": {
                                                "name": "add",
                                                "nativeSrc": "1945:3:66",
                                                "nodeType": "YulIdentifier",
                                                "src": "1945:3:66"
                                              },
                                              "nativeSrc": "1945:11:66",
                                              "nodeType": "YulFunctionCall",
                                              "src": "1945:11:66"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "mload",
                                            "nativeSrc": "1939:5:66",
                                            "nodeType": "YulIdentifier",
                                            "src": "1939:5:66"
                                          },
                                          "nativeSrc": "1939:18:66",
                                          "nodeType": "YulFunctionCall",
                                          "src": "1939:18:66"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mstore",
                                        "nativeSrc": "1919:6:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "1919:6:66"
                                      },
                                      "nativeSrc": "1919:39:66",
                                      "nodeType": "YulFunctionCall",
                                      "src": "1919:39:66"
                                    },
                                    "nativeSrc": "1919:39:66",
                                    "nodeType": "YulExpressionStatement",
                                    "src": "1919:39:66"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "name": "i",
                                    "nativeSrc": "1866:1:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "1866:1:66"
                                  },
                                  {
                                    "name": "length",
                                    "nativeSrc": "1869:6:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "1869:6:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nativeSrc": "1863:2:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "1863:2:66"
                                },
                                "nativeSrc": "1863:13:66",
                                "nodeType": "YulFunctionCall",
                                "src": "1863:13:66"
                              },
                              "nativeSrc": "1855:113:66",
                              "nodeType": "YulForLoop",
                              "post": {
                                "nativeSrc": "1877:19:66",
                                "nodeType": "YulBlock",
                                "src": "1877:19:66",
                                "statements": [
                                  {
                                    "nativeSrc": "1879:15:66",
                                    "nodeType": "YulAssignment",
                                    "src": "1879:15:66",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "i",
                                          "nativeSrc": "1888:1:66",
                                          "nodeType": "YulIdentifier",
                                          "src": "1888:1:66"
                                        },
                                        {
                                          "kind": "number",
                                          "nativeSrc": "1891:2:66",
                                          "nodeType": "YulLiteral",
                                          "src": "1891:2:66",
                                          "type": "",
                                          "value": "32"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nativeSrc": "1884:3:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "1884:3:66"
                                      },
                                      "nativeSrc": "1884:10:66",
                                      "nodeType": "YulFunctionCall",
                                      "src": "1884:10:66"
                                    },
                                    "variableNames": [
                                      {
                                        "name": "i",
                                        "nativeSrc": "1879:1:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "1879:1:66"
                                      }
                                    ]
                                  }
                                ]
                              },
                              "pre": {
                                "nativeSrc": "1859:3:66",
                                "nodeType": "YulBlock",
                                "src": "1859:3:66",
                                "statements": []
                              },
                              "src": "1855:113:66"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "dst",
                                        "nativeSrc": "1988:3:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "1988:3:66"
                                      },
                                      {
                                        "name": "length",
                                        "nativeSrc": "1993:6:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "1993:6:66"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "1984:3:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "1984:3:66"
                                    },
                                    "nativeSrc": "1984:16:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "1984:16:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "2002:1:66",
                                    "nodeType": "YulLiteral",
                                    "src": "2002:1:66",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "1977:6:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "1977:6:66"
                                },
                                "nativeSrc": "1977:27:66",
                                "nodeType": "YulFunctionCall",
                                "src": "1977:27:66"
                              },
                              "nativeSrc": "1977:27:66",
                              "nodeType": "YulExpressionStatement",
                              "src": "1977:27:66"
                            }
                          ]
                        },
                        "name": "copy_memory_to_memory_with_cleanup",
                        "nativeSrc": "1760:250:66",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "src",
                            "nativeSrc": "1804:3:66",
                            "nodeType": "YulTypedName",
                            "src": "1804:3:66",
                            "type": ""
                          },
                          {
                            "name": "dst",
                            "nativeSrc": "1809:3:66",
                            "nodeType": "YulTypedName",
                            "src": "1809:3:66",
                            "type": ""
                          },
                          {
                            "name": "length",
                            "nativeSrc": "1814:6:66",
                            "nodeType": "YulTypedName",
                            "src": "1814:6:66",
                            "type": ""
                          }
                        ],
                        "src": "1760:250:66"
                      },
                      {
                        "body": {
                          "nativeSrc": "2065:221:66",
                          "nodeType": "YulBlock",
                          "src": "2065:221:66",
                          "statements": [
                            {
                              "nativeSrc": "2075:26:66",
                              "nodeType": "YulVariableDeclaration",
                              "src": "2075:26:66",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nativeSrc": "2095:5:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "2095:5:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nativeSrc": "2089:5:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "2089:5:66"
                                },
                                "nativeSrc": "2089:12:66",
                                "nodeType": "YulFunctionCall",
                                "src": "2089:12:66"
                              },
                              "variables": [
                                {
                                  "name": "length",
                                  "nativeSrc": "2079:6:66",
                                  "nodeType": "YulTypedName",
                                  "src": "2079:6:66",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nativeSrc": "2117:3:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "2117:3:66"
                                  },
                                  {
                                    "name": "length",
                                    "nativeSrc": "2122:6:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "2122:6:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "2110:6:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "2110:6:66"
                                },
                                "nativeSrc": "2110:19:66",
                                "nodeType": "YulFunctionCall",
                                "src": "2110:19:66"
                              },
                              "nativeSrc": "2110:19:66",
                              "nodeType": "YulExpressionStatement",
                              "src": "2110:19:66"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nativeSrc": "2177:5:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "2177:5:66"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "2184:4:66",
                                        "nodeType": "YulLiteral",
                                        "src": "2184:4:66",
                                        "type": "",
                                        "value": "0x20"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "2173:3:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "2173:3:66"
                                    },
                                    "nativeSrc": "2173:16:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "2173:16:66"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "pos",
                                        "nativeSrc": "2195:3:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "2195:3:66"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "2200:4:66",
                                        "nodeType": "YulLiteral",
                                        "src": "2200:4:66",
                                        "type": "",
                                        "value": "0x20"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "2191:3:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "2191:3:66"
                                    },
                                    "nativeSrc": "2191:14:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "2191:14:66"
                                  },
                                  {
                                    "name": "length",
                                    "nativeSrc": "2207:6:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "2207:6:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "copy_memory_to_memory_with_cleanup",
                                  "nativeSrc": "2138:34:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "2138:34:66"
                                },
                                "nativeSrc": "2138:76:66",
                                "nodeType": "YulFunctionCall",
                                "src": "2138:76:66"
                              },
                              "nativeSrc": "2138:76:66",
                              "nodeType": "YulExpressionStatement",
                              "src": "2138:76:66"
                            },
                            {
                              "nativeSrc": "2223:57:66",
                              "nodeType": "YulAssignment",
                              "src": "2223:57:66",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "pos",
                                        "nativeSrc": "2238:3:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "2238:3:66"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "arguments": [
                                              {
                                                "name": "length",
                                                "nativeSrc": "2251:6:66",
                                                "nodeType": "YulIdentifier",
                                                "src": "2251:6:66"
                                              },
                                              {
                                                "kind": "number",
                                                "nativeSrc": "2259:2:66",
                                                "nodeType": "YulLiteral",
                                                "src": "2259:2:66",
                                                "type": "",
                                                "value": "31"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "add",
                                              "nativeSrc": "2247:3:66",
                                              "nodeType": "YulIdentifier",
                                              "src": "2247:3:66"
                                            },
                                            "nativeSrc": "2247:15:66",
                                            "nodeType": "YulFunctionCall",
                                            "src": "2247:15:66"
                                          },
                                          {
                                            "arguments": [
                                              {
                                                "kind": "number",
                                                "nativeSrc": "2268:2:66",
                                                "nodeType": "YulLiteral",
                                                "src": "2268:2:66",
                                                "type": "",
                                                "value": "31"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "not",
                                              "nativeSrc": "2264:3:66",
                                              "nodeType": "YulIdentifier",
                                              "src": "2264:3:66"
                                            },
                                            "nativeSrc": "2264:7:66",
                                            "nodeType": "YulFunctionCall",
                                            "src": "2264:7:66"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "and",
                                          "nativeSrc": "2243:3:66",
                                          "nodeType": "YulIdentifier",
                                          "src": "2243:3:66"
                                        },
                                        "nativeSrc": "2243:29:66",
                                        "nodeType": "YulFunctionCall",
                                        "src": "2243:29:66"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "2234:3:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "2234:3:66"
                                    },
                                    "nativeSrc": "2234:39:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "2234:39:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "2275:4:66",
                                    "nodeType": "YulLiteral",
                                    "src": "2275:4:66",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "2230:3:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "2230:3:66"
                                },
                                "nativeSrc": "2230:50:66",
                                "nodeType": "YulFunctionCall",
                                "src": "2230:50:66"
                              },
                              "variableNames": [
                                {
                                  "name": "end",
                                  "nativeSrc": "2223:3:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "2223:3:66"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_string",
                        "nativeSrc": "2015:271:66",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "value",
                            "nativeSrc": "2042:5:66",
                            "nodeType": "YulTypedName",
                            "src": "2042:5:66",
                            "type": ""
                          },
                          {
                            "name": "pos",
                            "nativeSrc": "2049:3:66",
                            "nodeType": "YulTypedName",
                            "src": "2049:3:66",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "end",
                            "nativeSrc": "2057:3:66",
                            "nodeType": "YulTypedName",
                            "src": "2057:3:66",
                            "type": ""
                          }
                        ],
                        "src": "2015:271:66"
                      },
                      {
                        "body": {
                          "nativeSrc": "2412:99:66",
                          "nodeType": "YulBlock",
                          "src": "2412:99:66",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "2429:9:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "2429:9:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "2440:2:66",
                                    "nodeType": "YulLiteral",
                                    "src": "2440:2:66",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "2422:6:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "2422:6:66"
                                },
                                "nativeSrc": "2422:21:66",
                                "nodeType": "YulFunctionCall",
                                "src": "2422:21:66"
                              },
                              "nativeSrc": "2422:21:66",
                              "nodeType": "YulExpressionStatement",
                              "src": "2422:21:66"
                            },
                            {
                              "nativeSrc": "2452:53:66",
                              "nodeType": "YulAssignment",
                              "src": "2452:53:66",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nativeSrc": "2478:6:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "2478:6:66"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nativeSrc": "2490:9:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "2490:9:66"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "2501:2:66",
                                        "nodeType": "YulLiteral",
                                        "src": "2501:2:66",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "2486:3:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "2486:3:66"
                                    },
                                    "nativeSrc": "2486:18:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "2486:18:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_encode_string",
                                  "nativeSrc": "2460:17:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "2460:17:66"
                                },
                                "nativeSrc": "2460:45:66",
                                "nodeType": "YulFunctionCall",
                                "src": "2460:45:66"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nativeSrc": "2452:4:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "2452:4:66"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
                        "nativeSrc": "2291:220:66",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nativeSrc": "2381:9:66",
                            "nodeType": "YulTypedName",
                            "src": "2381:9:66",
                            "type": ""
                          },
                          {
                            "name": "value0",
                            "nativeSrc": "2392:6:66",
                            "nodeType": "YulTypedName",
                            "src": "2392:6:66",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nativeSrc": "2403:4:66",
                            "nodeType": "YulTypedName",
                            "src": "2403:4:66",
                            "type": ""
                          }
                        ],
                        "src": "2291:220:66"
                      },
                      {
                        "body": {
                          "nativeSrc": "2663:168:66",
                          "nodeType": "YulBlock",
                          "src": "2663:168:66",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "2680:9:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "2680:9:66"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value0",
                                        "nativeSrc": "2695:6:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "2695:6:66"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "arguments": [
                                              {
                                                "kind": "number",
                                                "nativeSrc": "2711:3:66",
                                                "nodeType": "YulLiteral",
                                                "src": "2711:3:66",
                                                "type": "",
                                                "value": "160"
                                              },
                                              {
                                                "kind": "number",
                                                "nativeSrc": "2716:1:66",
                                                "nodeType": "YulLiteral",
                                                "src": "2716:1:66",
                                                "type": "",
                                                "value": "1"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "shl",
                                              "nativeSrc": "2707:3:66",
                                              "nodeType": "YulIdentifier",
                                              "src": "2707:3:66"
                                            },
                                            "nativeSrc": "2707:11:66",
                                            "nodeType": "YulFunctionCall",
                                            "src": "2707:11:66"
                                          },
                                          {
                                            "kind": "number",
                                            "nativeSrc": "2720:1:66",
                                            "nodeType": "YulLiteral",
                                            "src": "2720:1:66",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "sub",
                                          "nativeSrc": "2703:3:66",
                                          "nodeType": "YulIdentifier",
                                          "src": "2703:3:66"
                                        },
                                        "nativeSrc": "2703:19:66",
                                        "nodeType": "YulFunctionCall",
                                        "src": "2703:19:66"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nativeSrc": "2691:3:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "2691:3:66"
                                    },
                                    "nativeSrc": "2691:32:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "2691:32:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "2673:6:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "2673:6:66"
                                },
                                "nativeSrc": "2673:51:66",
                                "nodeType": "YulFunctionCall",
                                "src": "2673:51:66"
                              },
                              "nativeSrc": "2673:51:66",
                              "nodeType": "YulExpressionStatement",
                              "src": "2673:51:66"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nativeSrc": "2744:9:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "2744:9:66"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "2755:2:66",
                                        "nodeType": "YulLiteral",
                                        "src": "2755:2:66",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "2740:3:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "2740:3:66"
                                    },
                                    "nativeSrc": "2740:18:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "2740:18:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "2760:2:66",
                                    "nodeType": "YulLiteral",
                                    "src": "2760:2:66",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "2733:6:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "2733:6:66"
                                },
                                "nativeSrc": "2733:30:66",
                                "nodeType": "YulFunctionCall",
                                "src": "2733:30:66"
                              },
                              "nativeSrc": "2733:30:66",
                              "nodeType": "YulExpressionStatement",
                              "src": "2733:30:66"
                            },
                            {
                              "nativeSrc": "2772:53:66",
                              "nodeType": "YulAssignment",
                              "src": "2772:53:66",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "value1",
                                    "nativeSrc": "2798:6:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "2798:6:66"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nativeSrc": "2810:9:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "2810:9:66"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "2821:2:66",
                                        "nodeType": "YulLiteral",
                                        "src": "2821:2:66",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "2806:3:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "2806:3:66"
                                    },
                                    "nativeSrc": "2806:18:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "2806:18:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_encode_string",
                                  "nativeSrc": "2780:17:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "2780:17:66"
                                },
                                "nativeSrc": "2780:45:66",
                                "nodeType": "YulFunctionCall",
                                "src": "2780:45:66"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nativeSrc": "2772:4:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "2772:4:66"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_address_t_bytes_memory_ptr__to_t_address_t_bytes_memory_ptr__fromStack_reversed",
                        "nativeSrc": "2516:315:66",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nativeSrc": "2624:9:66",
                            "nodeType": "YulTypedName",
                            "src": "2624:9:66",
                            "type": ""
                          },
                          {
                            "name": "value1",
                            "nativeSrc": "2635:6:66",
                            "nodeType": "YulTypedName",
                            "src": "2635:6:66",
                            "type": ""
                          },
                          {
                            "name": "value0",
                            "nativeSrc": "2643:6:66",
                            "nodeType": "YulTypedName",
                            "src": "2643:6:66",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nativeSrc": "2654:4:66",
                            "nodeType": "YulTypedName",
                            "src": "2654:4:66",
                            "type": ""
                          }
                        ],
                        "src": "2516:315:66"
                      },
                      {
                        "body": {
                          "nativeSrc": "2868:95:66",
                          "nodeType": "YulBlock",
                          "src": "2868:95:66",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nativeSrc": "2885:1:66",
                                    "nodeType": "YulLiteral",
                                    "src": "2885:1:66",
                                    "type": "",
                                    "value": "0"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nativeSrc": "2892:3:66",
                                        "nodeType": "YulLiteral",
                                        "src": "2892:3:66",
                                        "type": "",
                                        "value": "224"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "2897:10:66",
                                        "nodeType": "YulLiteral",
                                        "src": "2897:10:66",
                                        "type": "",
                                        "value": "0x4e487b71"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nativeSrc": "2888:3:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "2888:3:66"
                                    },
                                    "nativeSrc": "2888:20:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "2888:20:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "2878:6:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "2878:6:66"
                                },
                                "nativeSrc": "2878:31:66",
                                "nodeType": "YulFunctionCall",
                                "src": "2878:31:66"
                              },
                              "nativeSrc": "2878:31:66",
                              "nodeType": "YulExpressionStatement",
                              "src": "2878:31:66"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nativeSrc": "2925:1:66",
                                    "nodeType": "YulLiteral",
                                    "src": "2925:1:66",
                                    "type": "",
                                    "value": "4"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "2928:4:66",
                                    "nodeType": "YulLiteral",
                                    "src": "2928:4:66",
                                    "type": "",
                                    "value": "0x41"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "2918:6:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "2918:6:66"
                                },
                                "nativeSrc": "2918:15:66",
                                "nodeType": "YulFunctionCall",
                                "src": "2918:15:66"
                              },
                              "nativeSrc": "2918:15:66",
                              "nodeType": "YulExpressionStatement",
                              "src": "2918:15:66"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nativeSrc": "2949:1:66",
                                    "nodeType": "YulLiteral",
                                    "src": "2949:1:66",
                                    "type": "",
                                    "value": "0"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "2952:4:66",
                                    "nodeType": "YulLiteral",
                                    "src": "2952:4:66",
                                    "type": "",
                                    "value": "0x24"
                                  }
                                ],
                                "functionName": {
                                  "name": "revert",
                                  "nativeSrc": "2942:6:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "2942:6:66"
                                },
                                "nativeSrc": "2942:15:66",
                                "nodeType": "YulFunctionCall",
                                "src": "2942:15:66"
                              },
                              "nativeSrc": "2942:15:66",
                              "nodeType": "YulExpressionStatement",
                              "src": "2942:15:66"
                            }
                          ]
                        },
                        "name": "panic_error_0x41",
                        "nativeSrc": "2836:127:66",
                        "nodeType": "YulFunctionDefinition",
                        "src": "2836:127:66"
                      },
                      {
                        "body": {
                          "nativeSrc": "3009:207:66",
                          "nodeType": "YulBlock",
                          "src": "3009:207:66",
                          "statements": [
                            {
                              "nativeSrc": "3019:19:66",
                              "nodeType": "YulAssignment",
                              "src": "3019:19:66",
                              "value": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nativeSrc": "3035:2:66",
                                    "nodeType": "YulLiteral",
                                    "src": "3035:2:66",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nativeSrc": "3029:5:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "3029:5:66"
                                },
                                "nativeSrc": "3029:9:66",
                                "nodeType": "YulFunctionCall",
                                "src": "3029:9:66"
                              },
                              "variableNames": [
                                {
                                  "name": "memPtr",
                                  "nativeSrc": "3019:6:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "3019:6:66"
                                }
                              ]
                            },
                            {
                              "nativeSrc": "3047:35:66",
                              "nodeType": "YulVariableDeclaration",
                              "src": "3047:35:66",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "memPtr",
                                    "nativeSrc": "3069:6:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "3069:6:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "3077:4:66",
                                    "nodeType": "YulLiteral",
                                    "src": "3077:4:66",
                                    "type": "",
                                    "value": "0x60"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "3065:3:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "3065:3:66"
                                },
                                "nativeSrc": "3065:17:66",
                                "nodeType": "YulFunctionCall",
                                "src": "3065:17:66"
                              },
                              "variables": [
                                {
                                  "name": "newFreePtr",
                                  "nativeSrc": "3051:10:66",
                                  "nodeType": "YulTypedName",
                                  "src": "3051:10:66",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "body": {
                                "nativeSrc": "3157:22:66",
                                "nodeType": "YulBlock",
                                "src": "3157:22:66",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [],
                                      "functionName": {
                                        "name": "panic_error_0x41",
                                        "nativeSrc": "3159:16:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "3159:16:66"
                                      },
                                      "nativeSrc": "3159:18:66",
                                      "nodeType": "YulFunctionCall",
                                      "src": "3159:18:66"
                                    },
                                    "nativeSrc": "3159:18:66",
                                    "nodeType": "YulExpressionStatement",
                                    "src": "3159:18:66"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "newFreePtr",
                                        "nativeSrc": "3100:10:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "3100:10:66"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "3112:18:66",
                                        "nodeType": "YulLiteral",
                                        "src": "3112:18:66",
                                        "type": "",
                                        "value": "0xffffffffffffffff"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "gt",
                                      "nativeSrc": "3097:2:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "3097:2:66"
                                    },
                                    "nativeSrc": "3097:34:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "3097:34:66"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "newFreePtr",
                                        "nativeSrc": "3136:10:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "3136:10:66"
                                      },
                                      {
                                        "name": "memPtr",
                                        "nativeSrc": "3148:6:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "3148:6:66"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "lt",
                                      "nativeSrc": "3133:2:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "3133:2:66"
                                    },
                                    "nativeSrc": "3133:22:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "3133:22:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "or",
                                  "nativeSrc": "3094:2:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "3094:2:66"
                                },
                                "nativeSrc": "3094:62:66",
                                "nodeType": "YulFunctionCall",
                                "src": "3094:62:66"
                              },
                              "nativeSrc": "3091:88:66",
                              "nodeType": "YulIf",
                              "src": "3091:88:66"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nativeSrc": "3195:2:66",
                                    "nodeType": "YulLiteral",
                                    "src": "3195:2:66",
                                    "type": "",
                                    "value": "64"
                                  },
                                  {
                                    "name": "newFreePtr",
                                    "nativeSrc": "3199:10:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "3199:10:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "3188:6:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "3188:6:66"
                                },
                                "nativeSrc": "3188:22:66",
                                "nodeType": "YulFunctionCall",
                                "src": "3188:22:66"
                              },
                              "nativeSrc": "3188:22:66",
                              "nodeType": "YulExpressionStatement",
                              "src": "3188:22:66"
                            }
                          ]
                        },
                        "name": "allocate_memory",
                        "nativeSrc": "2968:248:66",
                        "nodeType": "YulFunctionDefinition",
                        "returnVariables": [
                          {
                            "name": "memPtr",
                            "nativeSrc": "2998:6:66",
                            "nodeType": "YulTypedName",
                            "src": "2998:6:66",
                            "type": ""
                          }
                        ],
                        "src": "2968:248:66"
                      },
                      {
                        "body": {
                          "nativeSrc": "3306:529:66",
                          "nodeType": "YulBlock",
                          "src": "3306:529:66",
                          "statements": [
                            {
                              "nativeSrc": "3316:28:66",
                              "nodeType": "YulVariableDeclaration",
                              "src": "3316:28:66",
                              "value": {
                                "kind": "number",
                                "nativeSrc": "3326:18:66",
                                "nodeType": "YulLiteral",
                                "src": "3326:18:66",
                                "type": "",
                                "value": "0xffffffffffffffff"
                              },
                              "variables": [
                                {
                                  "name": "_1",
                                  "nativeSrc": "3320:2:66",
                                  "nodeType": "YulTypedName",
                                  "src": "3320:2:66",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "body": {
                                "nativeSrc": "3371:22:66",
                                "nodeType": "YulBlock",
                                "src": "3371:22:66",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [],
                                      "functionName": {
                                        "name": "panic_error_0x41",
                                        "nativeSrc": "3373:16:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "3373:16:66"
                                      },
                                      "nativeSrc": "3373:18:66",
                                      "nodeType": "YulFunctionCall",
                                      "src": "3373:18:66"
                                    },
                                    "nativeSrc": "3373:18:66",
                                    "nodeType": "YulExpressionStatement",
                                    "src": "3373:18:66"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "name": "length",
                                    "nativeSrc": "3359:6:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "3359:6:66"
                                  },
                                  {
                                    "name": "_1",
                                    "nativeSrc": "3367:2:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "3367:2:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nativeSrc": "3356:2:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "3356:2:66"
                                },
                                "nativeSrc": "3356:14:66",
                                "nodeType": "YulFunctionCall",
                                "src": "3356:14:66"
                              },
                              "nativeSrc": "3353:40:66",
                              "nodeType": "YulIf",
                              "src": "3353:40:66"
                            },
                            {
                              "nativeSrc": "3402:17:66",
                              "nodeType": "YulVariableDeclaration",
                              "src": "3402:17:66",
                              "value": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nativeSrc": "3416:2:66",
                                    "nodeType": "YulLiteral",
                                    "src": "3416:2:66",
                                    "type": "",
                                    "value": "31"
                                  }
                                ],
                                "functionName": {
                                  "name": "not",
                                  "nativeSrc": "3412:3:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "3412:3:66"
                                },
                                "nativeSrc": "3412:7:66",
                                "nodeType": "YulFunctionCall",
                                "src": "3412:7:66"
                              },
                              "variables": [
                                {
                                  "name": "_2",
                                  "nativeSrc": "3406:2:66",
                                  "nodeType": "YulTypedName",
                                  "src": "3406:2:66",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nativeSrc": "3428:23:66",
                              "nodeType": "YulVariableDeclaration",
                              "src": "3428:23:66",
                              "value": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nativeSrc": "3448:2:66",
                                    "nodeType": "YulLiteral",
                                    "src": "3448:2:66",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nativeSrc": "3442:5:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "3442:5:66"
                                },
                                "nativeSrc": "3442:9:66",
                                "nodeType": "YulFunctionCall",
                                "src": "3442:9:66"
                              },
                              "variables": [
                                {
                                  "name": "memPtr",
                                  "nativeSrc": "3432:6:66",
                                  "nodeType": "YulTypedName",
                                  "src": "3432:6:66",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nativeSrc": "3460:73:66",
                              "nodeType": "YulVariableDeclaration",
                              "src": "3460:73:66",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "memPtr",
                                    "nativeSrc": "3482:6:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "3482:6:66"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "arguments": [
                                              {
                                                "arguments": [
                                                  {
                                                    "name": "length",
                                                    "nativeSrc": "3506:6:66",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "3506:6:66"
                                                  },
                                                  {
                                                    "kind": "number",
                                                    "nativeSrc": "3514:2:66",
                                                    "nodeType": "YulLiteral",
                                                    "src": "3514:2:66",
                                                    "type": "",
                                                    "value": "31"
                                                  }
                                                ],
                                                "functionName": {
                                                  "name": "add",
                                                  "nativeSrc": "3502:3:66",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "3502:3:66"
                                                },
                                                "nativeSrc": "3502:15:66",
                                                "nodeType": "YulFunctionCall",
                                                "src": "3502:15:66"
                                              },
                                              {
                                                "name": "_2",
                                                "nativeSrc": "3519:2:66",
                                                "nodeType": "YulIdentifier",
                                                "src": "3519:2:66"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "and",
                                              "nativeSrc": "3498:3:66",
                                              "nodeType": "YulIdentifier",
                                              "src": "3498:3:66"
                                            },
                                            "nativeSrc": "3498:24:66",
                                            "nodeType": "YulFunctionCall",
                                            "src": "3498:24:66"
                                          },
                                          {
                                            "kind": "number",
                                            "nativeSrc": "3524:2:66",
                                            "nodeType": "YulLiteral",
                                            "src": "3524:2:66",
                                            "type": "",
                                            "value": "63"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nativeSrc": "3494:3:66",
                                          "nodeType": "YulIdentifier",
                                          "src": "3494:3:66"
                                        },
                                        "nativeSrc": "3494:33:66",
                                        "nodeType": "YulFunctionCall",
                                        "src": "3494:33:66"
                                      },
                                      {
                                        "name": "_2",
                                        "nativeSrc": "3529:2:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "3529:2:66"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nativeSrc": "3490:3:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "3490:3:66"
                                    },
                                    "nativeSrc": "3490:42:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "3490:42:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "3478:3:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "3478:3:66"
                                },
                                "nativeSrc": "3478:55:66",
                                "nodeType": "YulFunctionCall",
                                "src": "3478:55:66"
                              },
                              "variables": [
                                {
                                  "name": "newFreePtr",
                                  "nativeSrc": "3464:10:66",
                                  "nodeType": "YulTypedName",
                                  "src": "3464:10:66",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "body": {
                                "nativeSrc": "3592:22:66",
                                "nodeType": "YulBlock",
                                "src": "3592:22:66",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [],
                                      "functionName": {
                                        "name": "panic_error_0x41",
                                        "nativeSrc": "3594:16:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "3594:16:66"
                                      },
                                      "nativeSrc": "3594:18:66",
                                      "nodeType": "YulFunctionCall",
                                      "src": "3594:18:66"
                                    },
                                    "nativeSrc": "3594:18:66",
                                    "nodeType": "YulExpressionStatement",
                                    "src": "3594:18:66"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "newFreePtr",
                                        "nativeSrc": "3551:10:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "3551:10:66"
                                      },
                                      {
                                        "name": "_1",
                                        "nativeSrc": "3563:2:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "3563:2:66"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "gt",
                                      "nativeSrc": "3548:2:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "3548:2:66"
                                    },
                                    "nativeSrc": "3548:18:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "3548:18:66"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "newFreePtr",
                                        "nativeSrc": "3571:10:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "3571:10:66"
                                      },
                                      {
                                        "name": "memPtr",
                                        "nativeSrc": "3583:6:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "3583:6:66"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "lt",
                                      "nativeSrc": "3568:2:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "3568:2:66"
                                    },
                                    "nativeSrc": "3568:22:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "3568:22:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "or",
                                  "nativeSrc": "3545:2:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "3545:2:66"
                                },
                                "nativeSrc": "3545:46:66",
                                "nodeType": "YulFunctionCall",
                                "src": "3545:46:66"
                              },
                              "nativeSrc": "3542:72:66",
                              "nodeType": "YulIf",
                              "src": "3542:72:66"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nativeSrc": "3630:2:66",
                                    "nodeType": "YulLiteral",
                                    "src": "3630:2:66",
                                    "type": "",
                                    "value": "64"
                                  },
                                  {
                                    "name": "newFreePtr",
                                    "nativeSrc": "3634:10:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "3634:10:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "3623:6:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "3623:6:66"
                                },
                                "nativeSrc": "3623:22:66",
                                "nodeType": "YulFunctionCall",
                                "src": "3623:22:66"
                              },
                              "nativeSrc": "3623:22:66",
                              "nodeType": "YulExpressionStatement",
                              "src": "3623:22:66"
                            },
                            {
                              "nativeSrc": "3654:15:66",
                              "nodeType": "YulAssignment",
                              "src": "3654:15:66",
                              "value": {
                                "name": "memPtr",
                                "nativeSrc": "3663:6:66",
                                "nodeType": "YulIdentifier",
                                "src": "3663:6:66"
                              },
                              "variableNames": [
                                {
                                  "name": "array",
                                  "nativeSrc": "3654:5:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "3654:5:66"
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "memPtr",
                                    "nativeSrc": "3685:6:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "3685:6:66"
                                  },
                                  {
                                    "name": "length",
                                    "nativeSrc": "3693:6:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "3693:6:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "3678:6:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "3678:6:66"
                                },
                                "nativeSrc": "3678:22:66",
                                "nodeType": "YulFunctionCall",
                                "src": "3678:22:66"
                              },
                              "nativeSrc": "3678:22:66",
                              "nodeType": "YulExpressionStatement",
                              "src": "3678:22:66"
                            },
                            {
                              "body": {
                                "nativeSrc": "3738:16:66",
                                "nodeType": "YulBlock",
                                "src": "3738:16:66",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nativeSrc": "3747:1:66",
                                          "nodeType": "YulLiteral",
                                          "src": "3747:1:66",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nativeSrc": "3750:1:66",
                                          "nodeType": "YulLiteral",
                                          "src": "3750:1:66",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nativeSrc": "3740:6:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "3740:6:66"
                                      },
                                      "nativeSrc": "3740:12:66",
                                      "nodeType": "YulFunctionCall",
                                      "src": "3740:12:66"
                                    },
                                    "nativeSrc": "3740:12:66",
                                    "nodeType": "YulExpressionStatement",
                                    "src": "3740:12:66"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "src",
                                        "nativeSrc": "3719:3:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "3719:3:66"
                                      },
                                      {
                                        "name": "length",
                                        "nativeSrc": "3724:6:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "3724:6:66"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "3715:3:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "3715:3:66"
                                    },
                                    "nativeSrc": "3715:16:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "3715:16:66"
                                  },
                                  {
                                    "name": "end",
                                    "nativeSrc": "3733:3:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "3733:3:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nativeSrc": "3712:2:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "3712:2:66"
                                },
                                "nativeSrc": "3712:25:66",
                                "nodeType": "YulFunctionCall",
                                "src": "3712:25:66"
                              },
                              "nativeSrc": "3709:45:66",
                              "nodeType": "YulIf",
                              "src": "3709:45:66"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "src",
                                    "nativeSrc": "3798:3:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "3798:3:66"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "memPtr",
                                        "nativeSrc": "3807:6:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "3807:6:66"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "3815:4:66",
                                        "nodeType": "YulLiteral",
                                        "src": "3815:4:66",
                                        "type": "",
                                        "value": "0x20"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "3803:3:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "3803:3:66"
                                    },
                                    "nativeSrc": "3803:17:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "3803:17:66"
                                  },
                                  {
                                    "name": "length",
                                    "nativeSrc": "3822:6:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "3822:6:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "copy_memory_to_memory_with_cleanup",
                                  "nativeSrc": "3763:34:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "3763:34:66"
                                },
                                "nativeSrc": "3763:66:66",
                                "nodeType": "YulFunctionCall",
                                "src": "3763:66:66"
                              },
                              "nativeSrc": "3763:66:66",
                              "nodeType": "YulExpressionStatement",
                              "src": "3763:66:66"
                            }
                          ]
                        },
                        "name": "abi_decode_available_length_bytes_fromMemory",
                        "nativeSrc": "3221:614:66",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "src",
                            "nativeSrc": "3275:3:66",
                            "nodeType": "YulTypedName",
                            "src": "3275:3:66",
                            "type": ""
                          },
                          {
                            "name": "length",
                            "nativeSrc": "3280:6:66",
                            "nodeType": "YulTypedName",
                            "src": "3280:6:66",
                            "type": ""
                          },
                          {
                            "name": "end",
                            "nativeSrc": "3288:3:66",
                            "nodeType": "YulTypedName",
                            "src": "3288:3:66",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "array",
                            "nativeSrc": "3296:5:66",
                            "nodeType": "YulTypedName",
                            "src": "3296:5:66",
                            "type": ""
                          }
                        ],
                        "src": "3221:614:66"
                      },
                      {
                        "body": {
                          "nativeSrc": "3903:172:66",
                          "nodeType": "YulBlock",
                          "src": "3903:172:66",
                          "statements": [
                            {
                              "body": {
                                "nativeSrc": "3952:16:66",
                                "nodeType": "YulBlock",
                                "src": "3952:16:66",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nativeSrc": "3961:1:66",
                                          "nodeType": "YulLiteral",
                                          "src": "3961:1:66",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nativeSrc": "3964:1:66",
                                          "nodeType": "YulLiteral",
                                          "src": "3964:1:66",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nativeSrc": "3954:6:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "3954:6:66"
                                      },
                                      "nativeSrc": "3954:12:66",
                                      "nodeType": "YulFunctionCall",
                                      "src": "3954:12:66"
                                    },
                                    "nativeSrc": "3954:12:66",
                                    "nodeType": "YulExpressionStatement",
                                    "src": "3954:12:66"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "offset",
                                            "nativeSrc": "3931:6:66",
                                            "nodeType": "YulIdentifier",
                                            "src": "3931:6:66"
                                          },
                                          {
                                            "kind": "number",
                                            "nativeSrc": "3939:4:66",
                                            "nodeType": "YulLiteral",
                                            "src": "3939:4:66",
                                            "type": "",
                                            "value": "0x1f"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nativeSrc": "3927:3:66",
                                          "nodeType": "YulIdentifier",
                                          "src": "3927:3:66"
                                        },
                                        "nativeSrc": "3927:17:66",
                                        "nodeType": "YulFunctionCall",
                                        "src": "3927:17:66"
                                      },
                                      {
                                        "name": "end",
                                        "nativeSrc": "3946:3:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "3946:3:66"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "slt",
                                      "nativeSrc": "3923:3:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "3923:3:66"
                                    },
                                    "nativeSrc": "3923:27:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "3923:27:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nativeSrc": "3916:6:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "3916:6:66"
                                },
                                "nativeSrc": "3916:35:66",
                                "nodeType": "YulFunctionCall",
                                "src": "3916:35:66"
                              },
                              "nativeSrc": "3913:55:66",
                              "nodeType": "YulIf",
                              "src": "3913:55:66"
                            },
                            {
                              "nativeSrc": "3977:92:66",
                              "nodeType": "YulAssignment",
                              "src": "3977:92:66",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "offset",
                                        "nativeSrc": "4035:6:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "4035:6:66"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "4043:4:66",
                                        "nodeType": "YulLiteral",
                                        "src": "4043:4:66",
                                        "type": "",
                                        "value": "0x20"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "4031:3:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "4031:3:66"
                                    },
                                    "nativeSrc": "4031:17:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "4031:17:66"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "offset",
                                        "nativeSrc": "4056:6:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "4056:6:66"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "mload",
                                      "nativeSrc": "4050:5:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "4050:5:66"
                                    },
                                    "nativeSrc": "4050:13:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "4050:13:66"
                                  },
                                  {
                                    "name": "end",
                                    "nativeSrc": "4065:3:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "4065:3:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_available_length_bytes_fromMemory",
                                  "nativeSrc": "3986:44:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "3986:44:66"
                                },
                                "nativeSrc": "3986:83:66",
                                "nodeType": "YulFunctionCall",
                                "src": "3986:83:66"
                              },
                              "variableNames": [
                                {
                                  "name": "array",
                                  "nativeSrc": "3977:5:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "3977:5:66"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_decode_bytes_fromMemory",
                        "nativeSrc": "3840:235:66",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "offset",
                            "nativeSrc": "3877:6:66",
                            "nodeType": "YulTypedName",
                            "src": "3877:6:66",
                            "type": ""
                          },
                          {
                            "name": "end",
                            "nativeSrc": "3885:3:66",
                            "nodeType": "YulTypedName",
                            "src": "3885:3:66",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "array",
                            "nativeSrc": "3893:5:66",
                            "nodeType": "YulTypedName",
                            "src": "3893:5:66",
                            "type": ""
                          }
                        ],
                        "src": "3840:235:66"
                      },
                      {
                        "body": {
                          "nativeSrc": "4170:245:66",
                          "nodeType": "YulBlock",
                          "src": "4170:245:66",
                          "statements": [
                            {
                              "body": {
                                "nativeSrc": "4216:16:66",
                                "nodeType": "YulBlock",
                                "src": "4216:16:66",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nativeSrc": "4225:1:66",
                                          "nodeType": "YulLiteral",
                                          "src": "4225:1:66",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nativeSrc": "4228:1:66",
                                          "nodeType": "YulLiteral",
                                          "src": "4228:1:66",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nativeSrc": "4218:6:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "4218:6:66"
                                      },
                                      "nativeSrc": "4218:12:66",
                                      "nodeType": "YulFunctionCall",
                                      "src": "4218:12:66"
                                    },
                                    "nativeSrc": "4218:12:66",
                                    "nodeType": "YulExpressionStatement",
                                    "src": "4218:12:66"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "dataEnd",
                                        "nativeSrc": "4191:7:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "4191:7:66"
                                      },
                                      {
                                        "name": "headStart",
                                        "nativeSrc": "4200:9:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "4200:9:66"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nativeSrc": "4187:3:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "4187:3:66"
                                    },
                                    "nativeSrc": "4187:23:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "4187:23:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "4212:2:66",
                                    "nodeType": "YulLiteral",
                                    "src": "4212:2:66",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nativeSrc": "4183:3:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "4183:3:66"
                                },
                                "nativeSrc": "4183:32:66",
                                "nodeType": "YulFunctionCall",
                                "src": "4183:32:66"
                              },
                              "nativeSrc": "4180:52:66",
                              "nodeType": "YulIf",
                              "src": "4180:52:66"
                            },
                            {
                              "nativeSrc": "4241:30:66",
                              "nodeType": "YulVariableDeclaration",
                              "src": "4241:30:66",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "4261:9:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "4261:9:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nativeSrc": "4255:5:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "4255:5:66"
                                },
                                "nativeSrc": "4255:16:66",
                                "nodeType": "YulFunctionCall",
                                "src": "4255:16:66"
                              },
                              "variables": [
                                {
                                  "name": "offset",
                                  "nativeSrc": "4245:6:66",
                                  "nodeType": "YulTypedName",
                                  "src": "4245:6:66",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "body": {
                                "nativeSrc": "4314:16:66",
                                "nodeType": "YulBlock",
                                "src": "4314:16:66",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nativeSrc": "4323:1:66",
                                          "nodeType": "YulLiteral",
                                          "src": "4323:1:66",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nativeSrc": "4326:1:66",
                                          "nodeType": "YulLiteral",
                                          "src": "4326:1:66",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nativeSrc": "4316:6:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "4316:6:66"
                                      },
                                      "nativeSrc": "4316:12:66",
                                      "nodeType": "YulFunctionCall",
                                      "src": "4316:12:66"
                                    },
                                    "nativeSrc": "4316:12:66",
                                    "nodeType": "YulExpressionStatement",
                                    "src": "4316:12:66"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "name": "offset",
                                    "nativeSrc": "4286:6:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "4286:6:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "4294:18:66",
                                    "nodeType": "YulLiteral",
                                    "src": "4294:18:66",
                                    "type": "",
                                    "value": "0xffffffffffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nativeSrc": "4283:2:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "4283:2:66"
                                },
                                "nativeSrc": "4283:30:66",
                                "nodeType": "YulFunctionCall",
                                "src": "4283:30:66"
                              },
                              "nativeSrc": "4280:50:66",
                              "nodeType": "YulIf",
                              "src": "4280:50:66"
                            },
                            {
                              "nativeSrc": "4339:70:66",
                              "nodeType": "YulAssignment",
                              "src": "4339:70:66",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nativeSrc": "4381:9:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "4381:9:66"
                                      },
                                      {
                                        "name": "offset",
                                        "nativeSrc": "4392:6:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "4392:6:66"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "4377:3:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "4377:3:66"
                                    },
                                    "nativeSrc": "4377:22:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "4377:22:66"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nativeSrc": "4401:7:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "4401:7:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_bytes_fromMemory",
                                  "nativeSrc": "4349:27:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "4349:27:66"
                                },
                                "nativeSrc": "4349:60:66",
                                "nodeType": "YulFunctionCall",
                                "src": "4349:60:66"
                              },
                              "variableNames": [
                                {
                                  "name": "value0",
                                  "nativeSrc": "4339:6:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "4339:6:66"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_decode_tuple_t_bytes_memory_ptr_fromMemory",
                        "nativeSrc": "4080:335:66",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nativeSrc": "4136:9:66",
                            "nodeType": "YulTypedName",
                            "src": "4136:9:66",
                            "type": ""
                          },
                          {
                            "name": "dataEnd",
                            "nativeSrc": "4147:7:66",
                            "nodeType": "YulTypedName",
                            "src": "4147:7:66",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "value0",
                            "nativeSrc": "4159:6:66",
                            "nodeType": "YulTypedName",
                            "src": "4159:6:66",
                            "type": ""
                          }
                        ],
                        "src": "4080:335:66"
                      },
                      {
                        "body": {
                          "nativeSrc": "4603:309:66",
                          "nodeType": "YulBlock",
                          "src": "4603:309:66",
                          "statements": [
                            {
                              "nativeSrc": "4613:27:66",
                              "nodeType": "YulVariableDeclaration",
                              "src": "4613:27:66",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nativeSrc": "4633:6:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "4633:6:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nativeSrc": "4627:5:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "4627:5:66"
                                },
                                "nativeSrc": "4627:13:66",
                                "nodeType": "YulFunctionCall",
                                "src": "4627:13:66"
                              },
                              "variables": [
                                {
                                  "name": "length",
                                  "nativeSrc": "4617:6:66",
                                  "nodeType": "YulTypedName",
                                  "src": "4617:6:66",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value0",
                                        "nativeSrc": "4688:6:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "4688:6:66"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "4696:4:66",
                                        "nodeType": "YulLiteral",
                                        "src": "4696:4:66",
                                        "type": "",
                                        "value": "0x20"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "4684:3:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "4684:3:66"
                                    },
                                    "nativeSrc": "4684:17:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "4684:17:66"
                                  },
                                  {
                                    "name": "pos",
                                    "nativeSrc": "4703:3:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "4703:3:66"
                                  },
                                  {
                                    "name": "length",
                                    "nativeSrc": "4708:6:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "4708:6:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "copy_memory_to_memory_with_cleanup",
                                  "nativeSrc": "4649:34:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "4649:34:66"
                                },
                                "nativeSrc": "4649:66:66",
                                "nodeType": "YulFunctionCall",
                                "src": "4649:66:66"
                              },
                              "nativeSrc": "4649:66:66",
                              "nodeType": "YulExpressionStatement",
                              "src": "4649:66:66"
                            },
                            {
                              "nativeSrc": "4724:29:66",
                              "nodeType": "YulVariableDeclaration",
                              "src": "4724:29:66",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nativeSrc": "4741:3:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "4741:3:66"
                                  },
                                  {
                                    "name": "length",
                                    "nativeSrc": "4746:6:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "4746:6:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "4737:3:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "4737:3:66"
                                },
                                "nativeSrc": "4737:16:66",
                                "nodeType": "YulFunctionCall",
                                "src": "4737:16:66"
                              },
                              "variables": [
                                {
                                  "name": "end_1",
                                  "nativeSrc": "4728:5:66",
                                  "nodeType": "YulTypedName",
                                  "src": "4728:5:66",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nativeSrc": "4762:29:66",
                              "nodeType": "YulVariableDeclaration",
                              "src": "4762:29:66",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "value1",
                                    "nativeSrc": "4784:6:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "4784:6:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nativeSrc": "4778:5:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "4778:5:66"
                                },
                                "nativeSrc": "4778:13:66",
                                "nodeType": "YulFunctionCall",
                                "src": "4778:13:66"
                              },
                              "variables": [
                                {
                                  "name": "length_1",
                                  "nativeSrc": "4766:8:66",
                                  "nodeType": "YulTypedName",
                                  "src": "4766:8:66",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value1",
                                        "nativeSrc": "4839:6:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "4839:6:66"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "4847:4:66",
                                        "nodeType": "YulLiteral",
                                        "src": "4847:4:66",
                                        "type": "",
                                        "value": "0x20"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "4835:3:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "4835:3:66"
                                    },
                                    "nativeSrc": "4835:17:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "4835:17:66"
                                  },
                                  {
                                    "name": "end_1",
                                    "nativeSrc": "4854:5:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "4854:5:66"
                                  },
                                  {
                                    "name": "length_1",
                                    "nativeSrc": "4861:8:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "4861:8:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "copy_memory_to_memory_with_cleanup",
                                  "nativeSrc": "4800:34:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "4800:34:66"
                                },
                                "nativeSrc": "4800:70:66",
                                "nodeType": "YulFunctionCall",
                                "src": "4800:70:66"
                              },
                              "nativeSrc": "4800:70:66",
                              "nodeType": "YulExpressionStatement",
                              "src": "4800:70:66"
                            },
                            {
                              "nativeSrc": "4879:27:66",
                              "nodeType": "YulAssignment",
                              "src": "4879:27:66",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "end_1",
                                    "nativeSrc": "4890:5:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "4890:5:66"
                                  },
                                  {
                                    "name": "length_1",
                                    "nativeSrc": "4897:8:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "4897:8:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "4886:3:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "4886:3:66"
                                },
                                "nativeSrc": "4886:20:66",
                                "nodeType": "YulFunctionCall",
                                "src": "4886:20:66"
                              },
                              "variableNames": [
                                {
                                  "name": "end",
                                  "nativeSrc": "4879:3:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "4879:3:66"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_packed_t_bytes_memory_ptr_t_bytes_memory_ptr__to_t_bytes_memory_ptr_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed",
                        "nativeSrc": "4420:492:66",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "pos",
                            "nativeSrc": "4571:3:66",
                            "nodeType": "YulTypedName",
                            "src": "4571:3:66",
                            "type": ""
                          },
                          {
                            "name": "value1",
                            "nativeSrc": "4576:6:66",
                            "nodeType": "YulTypedName",
                            "src": "4576:6:66",
                            "type": ""
                          },
                          {
                            "name": "value0",
                            "nativeSrc": "4584:6:66",
                            "nodeType": "YulTypedName",
                            "src": "4584:6:66",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "end",
                            "nativeSrc": "4595:3:66",
                            "nodeType": "YulTypedName",
                            "src": "4595:3:66",
                            "type": ""
                          }
                        ],
                        "src": "4420:492:66"
                      },
                      {
                        "body": {
                          "nativeSrc": "5376:536:66",
                          "nodeType": "YulBlock",
                          "src": "5376:536:66",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nativeSrc": "5393:3:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "5393:3:66"
                                  },
                                  {
                                    "hexValue": "4661696c656420746f206465706c6f7920636f6e747261637420",
                                    "kind": "string",
                                    "nativeSrc": "5398:28:66",
                                    "nodeType": "YulLiteral",
                                    "src": "5398:28:66",
                                    "type": "",
                                    "value": "Failed to deploy contract "
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "5386:6:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "5386:6:66"
                                },
                                "nativeSrc": "5386:41:66",
                                "nodeType": "YulFunctionCall",
                                "src": "5386:41:66"
                              },
                              "nativeSrc": "5386:41:66",
                              "nodeType": "YulExpressionStatement",
                              "src": "5386:41:66"
                            },
                            {
                              "nativeSrc": "5436:27:66",
                              "nodeType": "YulVariableDeclaration",
                              "src": "5436:27:66",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nativeSrc": "5456:6:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "5456:6:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nativeSrc": "5450:5:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "5450:5:66"
                                },
                                "nativeSrc": "5450:13:66",
                                "nodeType": "YulFunctionCall",
                                "src": "5450:13:66"
                              },
                              "variables": [
                                {
                                  "name": "length",
                                  "nativeSrc": "5440:6:66",
                                  "nodeType": "YulTypedName",
                                  "src": "5440:6:66",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value0",
                                        "nativeSrc": "5511:6:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "5511:6:66"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "5519:4:66",
                                        "nodeType": "YulLiteral",
                                        "src": "5519:4:66",
                                        "type": "",
                                        "value": "0x20"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "5507:3:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "5507:3:66"
                                    },
                                    "nativeSrc": "5507:17:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "5507:17:66"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "pos",
                                        "nativeSrc": "5530:3:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "5530:3:66"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "5535:2:66",
                                        "nodeType": "YulLiteral",
                                        "src": "5535:2:66",
                                        "type": "",
                                        "value": "26"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "5526:3:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "5526:3:66"
                                    },
                                    "nativeSrc": "5526:12:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "5526:12:66"
                                  },
                                  {
                                    "name": "length",
                                    "nativeSrc": "5540:6:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "5540:6:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "copy_memory_to_memory_with_cleanup",
                                  "nativeSrc": "5472:34:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "5472:34:66"
                                },
                                "nativeSrc": "5472:75:66",
                                "nodeType": "YulFunctionCall",
                                "src": "5472:75:66"
                              },
                              "nativeSrc": "5472:75:66",
                              "nodeType": "YulExpressionStatement",
                              "src": "5472:75:66"
                            },
                            {
                              "nativeSrc": "5556:26:66",
                              "nodeType": "YulVariableDeclaration",
                              "src": "5556:26:66",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nativeSrc": "5570:3:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "5570:3:66"
                                  },
                                  {
                                    "name": "length",
                                    "nativeSrc": "5575:6:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "5575:6:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "5566:3:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "5566:3:66"
                                },
                                "nativeSrc": "5566:16:66",
                                "nodeType": "YulFunctionCall",
                                "src": "5566:16:66"
                              },
                              "variables": [
                                {
                                  "name": "_1",
                                  "nativeSrc": "5560:2:66",
                                  "nodeType": "YulTypedName",
                                  "src": "5560:2:66",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "_1",
                                        "nativeSrc": "5602:2:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "5602:2:66"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "5606:2:66",
                                        "nodeType": "YulLiteral",
                                        "src": "5606:2:66",
                                        "type": "",
                                        "value": "26"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "5598:3:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "5598:3:66"
                                    },
                                    "nativeSrc": "5598:11:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "5598:11:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "5611:66:66",
                                    "nodeType": "YulLiteral",
                                    "src": "5611:66:66",
                                    "type": "",
                                    "value": "0x207573696e6720636f6e7374727563746f722064617461202200000000000000"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "5591:6:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "5591:6:66"
                                },
                                "nativeSrc": "5591:87:66",
                                "nodeType": "YulFunctionCall",
                                "src": "5591:87:66"
                              },
                              "nativeSrc": "5591:87:66",
                              "nodeType": "YulExpressionStatement",
                              "src": "5591:87:66"
                            },
                            {
                              "nativeSrc": "5687:29:66",
                              "nodeType": "YulVariableDeclaration",
                              "src": "5687:29:66",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "value1",
                                    "nativeSrc": "5709:6:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "5709:6:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nativeSrc": "5703:5:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "5703:5:66"
                                },
                                "nativeSrc": "5703:13:66",
                                "nodeType": "YulFunctionCall",
                                "src": "5703:13:66"
                              },
                              "variables": [
                                {
                                  "name": "length_1",
                                  "nativeSrc": "5691:8:66",
                                  "nodeType": "YulTypedName",
                                  "src": "5691:8:66",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value1",
                                        "nativeSrc": "5764:6:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "5764:6:66"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "5772:4:66",
                                        "nodeType": "YulLiteral",
                                        "src": "5772:4:66",
                                        "type": "",
                                        "value": "0x20"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "5760:3:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "5760:3:66"
                                    },
                                    "nativeSrc": "5760:17:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "5760:17:66"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "_1",
                                        "nativeSrc": "5783:2:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "5783:2:66"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "5787:2:66",
                                        "nodeType": "YulLiteral",
                                        "src": "5787:2:66",
                                        "type": "",
                                        "value": "51"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "5779:3:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "5779:3:66"
                                    },
                                    "nativeSrc": "5779:11:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "5779:11:66"
                                  },
                                  {
                                    "name": "length_1",
                                    "nativeSrc": "5792:8:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "5792:8:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "copy_memory_to_memory_with_cleanup",
                                  "nativeSrc": "5725:34:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "5725:34:66"
                                },
                                "nativeSrc": "5725:76:66",
                                "nodeType": "YulFunctionCall",
                                "src": "5725:76:66"
                              },
                              "nativeSrc": "5725:76:66",
                              "nodeType": "YulExpressionStatement",
                              "src": "5725:76:66"
                            },
                            {
                              "nativeSrc": "5810:27:66",
                              "nodeType": "YulVariableDeclaration",
                              "src": "5810:27:66",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "_1",
                                    "nativeSrc": "5824:2:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "5824:2:66"
                                  },
                                  {
                                    "name": "length_1",
                                    "nativeSrc": "5828:8:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "5828:8:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "5820:3:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "5820:3:66"
                                },
                                "nativeSrc": "5820:17:66",
                                "nodeType": "YulFunctionCall",
                                "src": "5820:17:66"
                              },
                              "variables": [
                                {
                                  "name": "_2",
                                  "nativeSrc": "5814:2:66",
                                  "nodeType": "YulTypedName",
                                  "src": "5814:2:66",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "_2",
                                        "nativeSrc": "5857:2:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "5857:2:66"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "5861:2:66",
                                        "nodeType": "YulLiteral",
                                        "src": "5861:2:66",
                                        "type": "",
                                        "value": "51"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "5853:3:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "5853:3:66"
                                    },
                                    "nativeSrc": "5853:11:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "5853:11:66"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nativeSrc": "5870:3:66",
                                        "nodeType": "YulLiteral",
                                        "src": "5870:3:66",
                                        "type": "",
                                        "value": "249"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "5875:2:66",
                                        "nodeType": "YulLiteral",
                                        "src": "5875:2:66",
                                        "type": "",
                                        "value": "17"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nativeSrc": "5866:3:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "5866:3:66"
                                    },
                                    "nativeSrc": "5866:12:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "5866:12:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "5846:6:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "5846:6:66"
                                },
                                "nativeSrc": "5846:33:66",
                                "nodeType": "YulFunctionCall",
                                "src": "5846:33:66"
                              },
                              "nativeSrc": "5846:33:66",
                              "nodeType": "YulExpressionStatement",
                              "src": "5846:33:66"
                            },
                            {
                              "nativeSrc": "5888:18:66",
                              "nodeType": "YulAssignment",
                              "src": "5888:18:66",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "_2",
                                    "nativeSrc": "5899:2:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "5899:2:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "5903:2:66",
                                    "nodeType": "YulLiteral",
                                    "src": "5903:2:66",
                                    "type": "",
                                    "value": "52"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "5895:3:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "5895:3:66"
                                },
                                "nativeSrc": "5895:11:66",
                                "nodeType": "YulFunctionCall",
                                "src": "5895:11:66"
                              },
                              "variableNames": [
                                {
                                  "name": "end",
                                  "nativeSrc": "5888:3:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "5888:3:66"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_packed_t_stringliteral_45942a044068f475a72b247d918918cfb3543fa9d2f925dce5c26b7172dbe289_t_string_memory_ptr_t_stringliteral_aa9d79cc8375f222c2818bc0c013f6b7c3934b6f21aedb1df102a8f780a1b664_t_string_memory_ptr_t_stringliteral_6e9f33448a4153023cdaf3eb759f1afdc24aba433a3e18b683f8c04a6eaa69f0__to_t_bytes26_t_string_memory_ptr_t_bytes25_t_string_memory_ptr_t_bytes1__nonPadded_inplace_fromStack_reversed",
                        "nativeSrc": "4917:995:66",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "pos",
                            "nativeSrc": "5344:3:66",
                            "nodeType": "YulTypedName",
                            "src": "5344:3:66",
                            "type": ""
                          },
                          {
                            "name": "value1",
                            "nativeSrc": "5349:6:66",
                            "nodeType": "YulTypedName",
                            "src": "5349:6:66",
                            "type": ""
                          },
                          {
                            "name": "value0",
                            "nativeSrc": "5357:6:66",
                            "nodeType": "YulTypedName",
                            "src": "5357:6:66",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "end",
                            "nativeSrc": "5368:3:66",
                            "nodeType": "YulTypedName",
                            "src": "5368:3:66",
                            "type": ""
                          }
                        ],
                        "src": "4917:995:66"
                      },
                      {
                        "body": {
                          "nativeSrc": "6285:411:66",
                          "nodeType": "YulBlock",
                          "src": "6285:411:66",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nativeSrc": "6302:3:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "6302:3:66"
                                  },
                                  {
                                    "hexValue": "4661696c656420746f206465706c6f7920636f6e747261637420",
                                    "kind": "string",
                                    "nativeSrc": "6307:28:66",
                                    "nodeType": "YulLiteral",
                                    "src": "6307:28:66",
                                    "type": "",
                                    "value": "Failed to deploy contract "
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "6295:6:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "6295:6:66"
                                },
                                "nativeSrc": "6295:41:66",
                                "nodeType": "YulFunctionCall",
                                "src": "6295:41:66"
                              },
                              "nativeSrc": "6295:41:66",
                              "nodeType": "YulExpressionStatement",
                              "src": "6295:41:66"
                            },
                            {
                              "nativeSrc": "6345:27:66",
                              "nodeType": "YulVariableDeclaration",
                              "src": "6345:27:66",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nativeSrc": "6365:6:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "6365:6:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nativeSrc": "6359:5:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "6359:5:66"
                                },
                                "nativeSrc": "6359:13:66",
                                "nodeType": "YulFunctionCall",
                                "src": "6359:13:66"
                              },
                              "variables": [
                                {
                                  "name": "length",
                                  "nativeSrc": "6349:6:66",
                                  "nodeType": "YulTypedName",
                                  "src": "6349:6:66",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value0",
                                        "nativeSrc": "6420:6:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "6420:6:66"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "6428:4:66",
                                        "nodeType": "YulLiteral",
                                        "src": "6428:4:66",
                                        "type": "",
                                        "value": "0x20"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "6416:3:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "6416:3:66"
                                    },
                                    "nativeSrc": "6416:17:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "6416:17:66"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "pos",
                                        "nativeSrc": "6439:3:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "6439:3:66"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "6444:2:66",
                                        "nodeType": "YulLiteral",
                                        "src": "6444:2:66",
                                        "type": "",
                                        "value": "26"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "6435:3:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "6435:3:66"
                                    },
                                    "nativeSrc": "6435:12:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "6435:12:66"
                                  },
                                  {
                                    "name": "length",
                                    "nativeSrc": "6449:6:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "6449:6:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "copy_memory_to_memory_with_cleanup",
                                  "nativeSrc": "6381:34:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "6381:34:66"
                                },
                                "nativeSrc": "6381:75:66",
                                "nodeType": "YulFunctionCall",
                                "src": "6381:75:66"
                              },
                              "nativeSrc": "6381:75:66",
                              "nodeType": "YulExpressionStatement",
                              "src": "6381:75:66"
                            },
                            {
                              "nativeSrc": "6465:26:66",
                              "nodeType": "YulVariableDeclaration",
                              "src": "6465:26:66",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nativeSrc": "6479:3:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "6479:3:66"
                                  },
                                  {
                                    "name": "length",
                                    "nativeSrc": "6484:6:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "6484:6:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "6475:3:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "6475:3:66"
                                },
                                "nativeSrc": "6475:16:66",
                                "nodeType": "YulFunctionCall",
                                "src": "6475:16:66"
                              },
                              "variables": [
                                {
                                  "name": "_1",
                                  "nativeSrc": "6469:2:66",
                                  "nodeType": "YulTypedName",
                                  "src": "6469:2:66",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "_1",
                                        "nativeSrc": "6511:2:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "6511:2:66"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "6515:2:66",
                                        "nodeType": "YulLiteral",
                                        "src": "6515:2:66",
                                        "type": "",
                                        "value": "26"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "6507:3:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "6507:3:66"
                                    },
                                    "nativeSrc": "6507:11:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "6507:11:66"
                                  },
                                  {
                                    "hexValue": "3a20",
                                    "kind": "string",
                                    "nativeSrc": "6520:4:66",
                                    "nodeType": "YulLiteral",
                                    "src": "6520:4:66",
                                    "type": "",
                                    "value": ": "
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "6500:6:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "6500:6:66"
                                },
                                "nativeSrc": "6500:25:66",
                                "nodeType": "YulFunctionCall",
                                "src": "6500:25:66"
                              },
                              "nativeSrc": "6500:25:66",
                              "nodeType": "YulExpressionStatement",
                              "src": "6500:25:66"
                            },
                            {
                              "nativeSrc": "6534:29:66",
                              "nodeType": "YulVariableDeclaration",
                              "src": "6534:29:66",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "value1",
                                    "nativeSrc": "6556:6:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "6556:6:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nativeSrc": "6550:5:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "6550:5:66"
                                },
                                "nativeSrc": "6550:13:66",
                                "nodeType": "YulFunctionCall",
                                "src": "6550:13:66"
                              },
                              "variables": [
                                {
                                  "name": "length_1",
                                  "nativeSrc": "6538:8:66",
                                  "nodeType": "YulTypedName",
                                  "src": "6538:8:66",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value1",
                                        "nativeSrc": "6611:6:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "6611:6:66"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "6619:4:66",
                                        "nodeType": "YulLiteral",
                                        "src": "6619:4:66",
                                        "type": "",
                                        "value": "0x20"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "6607:3:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "6607:3:66"
                                    },
                                    "nativeSrc": "6607:17:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "6607:17:66"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "_1",
                                        "nativeSrc": "6630:2:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "6630:2:66"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "6634:2:66",
                                        "nodeType": "YulLiteral",
                                        "src": "6634:2:66",
                                        "type": "",
                                        "value": "28"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "6626:3:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "6626:3:66"
                                    },
                                    "nativeSrc": "6626:11:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "6626:11:66"
                                  },
                                  {
                                    "name": "length_1",
                                    "nativeSrc": "6639:8:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "6639:8:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "copy_memory_to_memory_with_cleanup",
                                  "nativeSrc": "6572:34:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "6572:34:66"
                                },
                                "nativeSrc": "6572:76:66",
                                "nodeType": "YulFunctionCall",
                                "src": "6572:76:66"
                              },
                              "nativeSrc": "6572:76:66",
                              "nodeType": "YulExpressionStatement",
                              "src": "6572:76:66"
                            },
                            {
                              "nativeSrc": "6657:33:66",
                              "nodeType": "YulAssignment",
                              "src": "6657:33:66",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "_1",
                                        "nativeSrc": "6672:2:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "6672:2:66"
                                      },
                                      {
                                        "name": "length_1",
                                        "nativeSrc": "6676:8:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "6676:8:66"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "6668:3:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "6668:3:66"
                                    },
                                    "nativeSrc": "6668:17:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "6668:17:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "6687:2:66",
                                    "nodeType": "YulLiteral",
                                    "src": "6687:2:66",
                                    "type": "",
                                    "value": "28"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "6664:3:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "6664:3:66"
                                },
                                "nativeSrc": "6664:26:66",
                                "nodeType": "YulFunctionCall",
                                "src": "6664:26:66"
                              },
                              "variableNames": [
                                {
                                  "name": "end",
                                  "nativeSrc": "6657:3:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "6657:3:66"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_packed_t_stringliteral_45942a044068f475a72b247d918918cfb3543fa9d2f925dce5c26b7172dbe289_t_string_memory_ptr_t_stringliteral_e64009107d042bdc478cc69a5433e4573ea2e8a23a46646c0ee241e30c888e73_t_string_memory_ptr__to_t_bytes26_t_string_memory_ptr_t_bytes2_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed",
                        "nativeSrc": "5917:779:66",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "pos",
                            "nativeSrc": "6253:3:66",
                            "nodeType": "YulTypedName",
                            "src": "6253:3:66",
                            "type": ""
                          },
                          {
                            "name": "value1",
                            "nativeSrc": "6258:6:66",
                            "nodeType": "YulTypedName",
                            "src": "6258:6:66",
                            "type": ""
                          },
                          {
                            "name": "value0",
                            "nativeSrc": "6266:6:66",
                            "nodeType": "YulTypedName",
                            "src": "6266:6:66",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "end",
                            "nativeSrc": "6277:3:66",
                            "nodeType": "YulTypedName",
                            "src": "6277:3:66",
                            "type": ""
                          }
                        ],
                        "src": "5917:779:66"
                      },
                      {
                        "body": {
                          "nativeSrc": "6941:264:66",
                          "nodeType": "YulBlock",
                          "src": "6941:264:66",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nativeSrc": "6958:3:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "6958:3:66"
                                  },
                                  {
                                    "hexValue": "4661696c656420746f2072756e2075706772616465207361666574792076616c",
                                    "kind": "string",
                                    "nativeSrc": "6963:34:66",
                                    "nodeType": "YulLiteral",
                                    "src": "6963:34:66",
                                    "type": "",
                                    "value": "Failed to run upgrade safety val"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "6951:6:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "6951:6:66"
                                },
                                "nativeSrc": "6951:47:66",
                                "nodeType": "YulFunctionCall",
                                "src": "6951:47:66"
                              },
                              "nativeSrc": "6951:47:66",
                              "nodeType": "YulExpressionStatement",
                              "src": "6951:47:66"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "pos",
                                        "nativeSrc": "7018:3:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "7018:3:66"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "7023:2:66",
                                        "nodeType": "YulLiteral",
                                        "src": "7023:2:66",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "7014:3:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "7014:3:66"
                                    },
                                    "nativeSrc": "7014:12:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "7014:12:66"
                                  },
                                  {
                                    "hexValue": "69646174696f6e3a20",
                                    "kind": "string",
                                    "nativeSrc": "7028:11:66",
                                    "nodeType": "YulLiteral",
                                    "src": "7028:11:66",
                                    "type": "",
                                    "value": "idation: "
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "7007:6:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "7007:6:66"
                                },
                                "nativeSrc": "7007:33:66",
                                "nodeType": "YulFunctionCall",
                                "src": "7007:33:66"
                              },
                              "nativeSrc": "7007:33:66",
                              "nodeType": "YulExpressionStatement",
                              "src": "7007:33:66"
                            },
                            {
                              "nativeSrc": "7049:27:66",
                              "nodeType": "YulVariableDeclaration",
                              "src": "7049:27:66",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nativeSrc": "7069:6:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "7069:6:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nativeSrc": "7063:5:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "7063:5:66"
                                },
                                "nativeSrc": "7063:13:66",
                                "nodeType": "YulFunctionCall",
                                "src": "7063:13:66"
                              },
                              "variables": [
                                {
                                  "name": "length",
                                  "nativeSrc": "7053:6:66",
                                  "nodeType": "YulTypedName",
                                  "src": "7053:6:66",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value0",
                                        "nativeSrc": "7124:6:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "7124:6:66"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "7132:2:66",
                                        "nodeType": "YulLiteral",
                                        "src": "7132:2:66",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "7120:3:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "7120:3:66"
                                    },
                                    "nativeSrc": "7120:15:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "7120:15:66"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "pos",
                                        "nativeSrc": "7141:3:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "7141:3:66"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "7146:2:66",
                                        "nodeType": "YulLiteral",
                                        "src": "7146:2:66",
                                        "type": "",
                                        "value": "41"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "7137:3:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "7137:3:66"
                                    },
                                    "nativeSrc": "7137:12:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "7137:12:66"
                                  },
                                  {
                                    "name": "length",
                                    "nativeSrc": "7151:6:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "7151:6:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "copy_memory_to_memory_with_cleanup",
                                  "nativeSrc": "7085:34:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "7085:34:66"
                                },
                                "nativeSrc": "7085:73:66",
                                "nodeType": "YulFunctionCall",
                                "src": "7085:73:66"
                              },
                              "nativeSrc": "7085:73:66",
                              "nodeType": "YulExpressionStatement",
                              "src": "7085:73:66"
                            },
                            {
                              "nativeSrc": "7167:32:66",
                              "nodeType": "YulAssignment",
                              "src": "7167:32:66",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "pos",
                                        "nativeSrc": "7182:3:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "7182:3:66"
                                      },
                                      {
                                        "name": "length",
                                        "nativeSrc": "7187:6:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "7187:6:66"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "7178:3:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "7178:3:66"
                                    },
                                    "nativeSrc": "7178:16:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "7178:16:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "7196:2:66",
                                    "nodeType": "YulLiteral",
                                    "src": "7196:2:66",
                                    "type": "",
                                    "value": "41"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "7174:3:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "7174:3:66"
                                },
                                "nativeSrc": "7174:25:66",
                                "nodeType": "YulFunctionCall",
                                "src": "7174:25:66"
                              },
                              "variableNames": [
                                {
                                  "name": "end",
                                  "nativeSrc": "7167:3:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "7167:3:66"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_packed_t_stringliteral_29a2b74f226f0ae680d4b1730e672f85f1c84ce9f2c45ff21557229ab3df8027_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed",
                        "nativeSrc": "6701:504:66",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "pos",
                            "nativeSrc": "6917:3:66",
                            "nodeType": "YulTypedName",
                            "src": "6917:3:66",
                            "type": ""
                          },
                          {
                            "name": "value0",
                            "nativeSrc": "6922:6:66",
                            "nodeType": "YulTypedName",
                            "src": "6922:6:66",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "end",
                            "nativeSrc": "6933:3:66",
                            "nodeType": "YulTypedName",
                            "src": "6933:3:66",
                            "type": ""
                          }
                        ],
                        "src": "6701:504:66"
                      },
                      {
                        "body": {
                          "nativeSrc": "7450:267:66",
                          "nodeType": "YulBlock",
                          "src": "7450:267:66",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nativeSrc": "7467:3:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "7467:3:66"
                                  },
                                  {
                                    "hexValue": "55706772616465207361666574792076616c69646174696f6e206661696c6564",
                                    "kind": "string",
                                    "nativeSrc": "7472:34:66",
                                    "nodeType": "YulLiteral",
                                    "src": "7472:34:66",
                                    "type": "",
                                    "value": "Upgrade safety validation failed"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "7460:6:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "7460:6:66"
                                },
                                "nativeSrc": "7460:47:66",
                                "nodeType": "YulFunctionCall",
                                "src": "7460:47:66"
                              },
                              "nativeSrc": "7460:47:66",
                              "nodeType": "YulExpressionStatement",
                              "src": "7460:47:66"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "pos",
                                        "nativeSrc": "7527:3:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "7527:3:66"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "7532:2:66",
                                        "nodeType": "YulLiteral",
                                        "src": "7532:2:66",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "7523:3:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "7523:3:66"
                                    },
                                    "nativeSrc": "7523:12:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "7523:12:66"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nativeSrc": "7541:3:66",
                                        "nodeType": "YulLiteral",
                                        "src": "7541:3:66",
                                        "type": "",
                                        "value": "241"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "7546:4:66",
                                        "nodeType": "YulLiteral",
                                        "src": "7546:4:66",
                                        "type": "",
                                        "value": "7429"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nativeSrc": "7537:3:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "7537:3:66"
                                    },
                                    "nativeSrc": "7537:14:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "7537:14:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "7516:6:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "7516:6:66"
                                },
                                "nativeSrc": "7516:36:66",
                                "nodeType": "YulFunctionCall",
                                "src": "7516:36:66"
                              },
                              "nativeSrc": "7516:36:66",
                              "nodeType": "YulExpressionStatement",
                              "src": "7516:36:66"
                            },
                            {
                              "nativeSrc": "7561:27:66",
                              "nodeType": "YulVariableDeclaration",
                              "src": "7561:27:66",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nativeSrc": "7581:6:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "7581:6:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nativeSrc": "7575:5:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "7575:5:66"
                                },
                                "nativeSrc": "7575:13:66",
                                "nodeType": "YulFunctionCall",
                                "src": "7575:13:66"
                              },
                              "variables": [
                                {
                                  "name": "length",
                                  "nativeSrc": "7565:6:66",
                                  "nodeType": "YulTypedName",
                                  "src": "7565:6:66",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value0",
                                        "nativeSrc": "7636:6:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "7636:6:66"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "7644:2:66",
                                        "nodeType": "YulLiteral",
                                        "src": "7644:2:66",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "7632:3:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "7632:3:66"
                                    },
                                    "nativeSrc": "7632:15:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "7632:15:66"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "pos",
                                        "nativeSrc": "7653:3:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "7653:3:66"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "7658:2:66",
                                        "nodeType": "YulLiteral",
                                        "src": "7658:2:66",
                                        "type": "",
                                        "value": "34"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "7649:3:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "7649:3:66"
                                    },
                                    "nativeSrc": "7649:12:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "7649:12:66"
                                  },
                                  {
                                    "name": "length",
                                    "nativeSrc": "7663:6:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "7663:6:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "copy_memory_to_memory_with_cleanup",
                                  "nativeSrc": "7597:34:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "7597:34:66"
                                },
                                "nativeSrc": "7597:73:66",
                                "nodeType": "YulFunctionCall",
                                "src": "7597:73:66"
                              },
                              "nativeSrc": "7597:73:66",
                              "nodeType": "YulExpressionStatement",
                              "src": "7597:73:66"
                            },
                            {
                              "nativeSrc": "7679:32:66",
                              "nodeType": "YulAssignment",
                              "src": "7679:32:66",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "pos",
                                        "nativeSrc": "7694:3:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "7694:3:66"
                                      },
                                      {
                                        "name": "length",
                                        "nativeSrc": "7699:6:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "7699:6:66"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "7690:3:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "7690:3:66"
                                    },
                                    "nativeSrc": "7690:16:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "7690:16:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "7708:2:66",
                                    "nodeType": "YulLiteral",
                                    "src": "7708:2:66",
                                    "type": "",
                                    "value": "34"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "7686:3:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "7686:3:66"
                                },
                                "nativeSrc": "7686:25:66",
                                "nodeType": "YulFunctionCall",
                                "src": "7686:25:66"
                              },
                              "variableNames": [
                                {
                                  "name": "end",
                                  "nativeSrc": "7679:3:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "7679:3:66"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_packed_t_stringliteral_08801615ab40adc93bf881a8fa998cec8215450529dace7649c906794b645fd9_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed",
                        "nativeSrc": "7210:507:66",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "pos",
                            "nativeSrc": "7426:3:66",
                            "nodeType": "YulTypedName",
                            "src": "7426:3:66",
                            "type": ""
                          },
                          {
                            "name": "value0",
                            "nativeSrc": "7431:6:66",
                            "nodeType": "YulTypedName",
                            "src": "7431:6:66",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "end",
                            "nativeSrc": "7442:3:66",
                            "nodeType": "YulTypedName",
                            "src": "7442:3:66",
                            "type": ""
                          }
                        ],
                        "src": "7210:507:66"
                      },
                      {
                        "body": {
                          "nativeSrc": "7944:231:66",
                          "nodeType": "YulBlock",
                          "src": "7944:231:66",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "7961:9:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "7961:9:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "7972:2:66",
                                    "nodeType": "YulLiteral",
                                    "src": "7972:2:66",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "7954:6:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "7954:6:66"
                                },
                                "nativeSrc": "7954:21:66",
                                "nodeType": "YulFunctionCall",
                                "src": "7954:21:66"
                              },
                              "nativeSrc": "7954:21:66",
                              "nodeType": "YulExpressionStatement",
                              "src": "7954:21:66"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nativeSrc": "7995:9:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "7995:9:66"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "8006:2:66",
                                        "nodeType": "YulLiteral",
                                        "src": "8006:2:66",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "7991:3:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "7991:3:66"
                                    },
                                    "nativeSrc": "7991:18:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "7991:18:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "8011:2:66",
                                    "nodeType": "YulLiteral",
                                    "src": "8011:2:66",
                                    "type": "",
                                    "value": "11"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "7984:6:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "7984:6:66"
                                },
                                "nativeSrc": "7984:30:66",
                                "nodeType": "YulFunctionCall",
                                "src": "7984:30:66"
                              },
                              "nativeSrc": "7984:30:66",
                              "nodeType": "YulExpressionStatement",
                              "src": "7984:30:66"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nativeSrc": "8034:9:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "8034:9:66"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "8045:2:66",
                                        "nodeType": "YulLiteral",
                                        "src": "8045:2:66",
                                        "type": "",
                                        "value": "96"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "8030:3:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "8030:3:66"
                                    },
                                    "nativeSrc": "8030:18:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "8030:18:66"
                                  },
                                  {
                                    "hexValue": "464f554e4452595f4f5554",
                                    "kind": "string",
                                    "nativeSrc": "8050:13:66",
                                    "nodeType": "YulLiteral",
                                    "src": "8050:13:66",
                                    "type": "",
                                    "value": "FOUNDRY_OUT"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "8023:6:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "8023:6:66"
                                },
                                "nativeSrc": "8023:41:66",
                                "nodeType": "YulFunctionCall",
                                "src": "8023:41:66"
                              },
                              "nativeSrc": "8023:41:66",
                              "nodeType": "YulExpressionStatement",
                              "src": "8023:41:66"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nativeSrc": "8084:9:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "8084:9:66"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "8095:4:66",
                                        "nodeType": "YulLiteral",
                                        "src": "8095:4:66",
                                        "type": "",
                                        "value": "0x20"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "8080:3:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "8080:3:66"
                                    },
                                    "nativeSrc": "8080:20:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "8080:20:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "8102:3:66",
                                    "nodeType": "YulLiteral",
                                    "src": "8102:3:66",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "8073:6:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "8073:6:66"
                                },
                                "nativeSrc": "8073:33:66",
                                "nodeType": "YulFunctionCall",
                                "src": "8073:33:66"
                              },
                              "nativeSrc": "8073:33:66",
                              "nodeType": "YulExpressionStatement",
                              "src": "8073:33:66"
                            },
                            {
                              "nativeSrc": "8115:54:66",
                              "nodeType": "YulAssignment",
                              "src": "8115:54:66",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nativeSrc": "8141:6:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "8141:6:66"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nativeSrc": "8153:9:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "8153:9:66"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "8164:3:66",
                                        "nodeType": "YulLiteral",
                                        "src": "8164:3:66",
                                        "type": "",
                                        "value": "128"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "8149:3:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "8149:3:66"
                                    },
                                    "nativeSrc": "8149:19:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "8149:19:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_encode_string",
                                  "nativeSrc": "8123:17:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "8123:17:66"
                                },
                                "nativeSrc": "8123:46:66",
                                "nodeType": "YulFunctionCall",
                                "src": "8123:46:66"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nativeSrc": "8115:4:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "8115:4:66"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_stringliteral_ae11223e55da1785bb01a018df547ee9df83f6bfc03bcf9ee05fa29541f23f06_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__fromStack_reversed",
                        "nativeSrc": "7722:453:66",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nativeSrc": "7913:9:66",
                            "nodeType": "YulTypedName",
                            "src": "7913:9:66",
                            "type": ""
                          },
                          {
                            "name": "value0",
                            "nativeSrc": "7924:6:66",
                            "nodeType": "YulTypedName",
                            "src": "7924:6:66",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nativeSrc": "7935:4:66",
                            "nodeType": "YulTypedName",
                            "src": "7935:4:66",
                            "type": ""
                          }
                        ],
                        "src": "7722:453:66"
                      },
                      {
                        "body": {
                          "nativeSrc": "8271:367:66",
                          "nodeType": "YulBlock",
                          "src": "8271:367:66",
                          "statements": [
                            {
                              "body": {
                                "nativeSrc": "8317:16:66",
                                "nodeType": "YulBlock",
                                "src": "8317:16:66",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nativeSrc": "8326:1:66",
                                          "nodeType": "YulLiteral",
                                          "src": "8326:1:66",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nativeSrc": "8329:1:66",
                                          "nodeType": "YulLiteral",
                                          "src": "8329:1:66",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nativeSrc": "8319:6:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "8319:6:66"
                                      },
                                      "nativeSrc": "8319:12:66",
                                      "nodeType": "YulFunctionCall",
                                      "src": "8319:12:66"
                                    },
                                    "nativeSrc": "8319:12:66",
                                    "nodeType": "YulExpressionStatement",
                                    "src": "8319:12:66"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "dataEnd",
                                        "nativeSrc": "8292:7:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "8292:7:66"
                                      },
                                      {
                                        "name": "headStart",
                                        "nativeSrc": "8301:9:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "8301:9:66"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nativeSrc": "8288:3:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "8288:3:66"
                                    },
                                    "nativeSrc": "8288:23:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "8288:23:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "8313:2:66",
                                    "nodeType": "YulLiteral",
                                    "src": "8313:2:66",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nativeSrc": "8284:3:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "8284:3:66"
                                },
                                "nativeSrc": "8284:32:66",
                                "nodeType": "YulFunctionCall",
                                "src": "8284:32:66"
                              },
                              "nativeSrc": "8281:52:66",
                              "nodeType": "YulIf",
                              "src": "8281:52:66"
                            },
                            {
                              "nativeSrc": "8342:30:66",
                              "nodeType": "YulVariableDeclaration",
                              "src": "8342:30:66",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "8362:9:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "8362:9:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nativeSrc": "8356:5:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "8356:5:66"
                                },
                                "nativeSrc": "8356:16:66",
                                "nodeType": "YulFunctionCall",
                                "src": "8356:16:66"
                              },
                              "variables": [
                                {
                                  "name": "offset",
                                  "nativeSrc": "8346:6:66",
                                  "nodeType": "YulTypedName",
                                  "src": "8346:6:66",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "body": {
                                "nativeSrc": "8415:16:66",
                                "nodeType": "YulBlock",
                                "src": "8415:16:66",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nativeSrc": "8424:1:66",
                                          "nodeType": "YulLiteral",
                                          "src": "8424:1:66",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nativeSrc": "8427:1:66",
                                          "nodeType": "YulLiteral",
                                          "src": "8427:1:66",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nativeSrc": "8417:6:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "8417:6:66"
                                      },
                                      "nativeSrc": "8417:12:66",
                                      "nodeType": "YulFunctionCall",
                                      "src": "8417:12:66"
                                    },
                                    "nativeSrc": "8417:12:66",
                                    "nodeType": "YulExpressionStatement",
                                    "src": "8417:12:66"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "name": "offset",
                                    "nativeSrc": "8387:6:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "8387:6:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "8395:18:66",
                                    "nodeType": "YulLiteral",
                                    "src": "8395:18:66",
                                    "type": "",
                                    "value": "0xffffffffffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nativeSrc": "8384:2:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "8384:2:66"
                                },
                                "nativeSrc": "8384:30:66",
                                "nodeType": "YulFunctionCall",
                                "src": "8384:30:66"
                              },
                              "nativeSrc": "8381:50:66",
                              "nodeType": "YulIf",
                              "src": "8381:50:66"
                            },
                            {
                              "nativeSrc": "8440:32:66",
                              "nodeType": "YulVariableDeclaration",
                              "src": "8440:32:66",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "8454:9:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "8454:9:66"
                                  },
                                  {
                                    "name": "offset",
                                    "nativeSrc": "8465:6:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "8465:6:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "8450:3:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "8450:3:66"
                                },
                                "nativeSrc": "8450:22:66",
                                "nodeType": "YulFunctionCall",
                                "src": "8450:22:66"
                              },
                              "variables": [
                                {
                                  "name": "_1",
                                  "nativeSrc": "8444:2:66",
                                  "nodeType": "YulTypedName",
                                  "src": "8444:2:66",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "body": {
                                "nativeSrc": "8520:16:66",
                                "nodeType": "YulBlock",
                                "src": "8520:16:66",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nativeSrc": "8529:1:66",
                                          "nodeType": "YulLiteral",
                                          "src": "8529:1:66",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nativeSrc": "8532:1:66",
                                          "nodeType": "YulLiteral",
                                          "src": "8532:1:66",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nativeSrc": "8522:6:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "8522:6:66"
                                      },
                                      "nativeSrc": "8522:12:66",
                                      "nodeType": "YulFunctionCall",
                                      "src": "8522:12:66"
                                    },
                                    "nativeSrc": "8522:12:66",
                                    "nodeType": "YulExpressionStatement",
                                    "src": "8522:12:66"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "_1",
                                            "nativeSrc": "8499:2:66",
                                            "nodeType": "YulIdentifier",
                                            "src": "8499:2:66"
                                          },
                                          {
                                            "kind": "number",
                                            "nativeSrc": "8503:4:66",
                                            "nodeType": "YulLiteral",
                                            "src": "8503:4:66",
                                            "type": "",
                                            "value": "0x1f"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nativeSrc": "8495:3:66",
                                          "nodeType": "YulIdentifier",
                                          "src": "8495:3:66"
                                        },
                                        "nativeSrc": "8495:13:66",
                                        "nodeType": "YulFunctionCall",
                                        "src": "8495:13:66"
                                      },
                                      {
                                        "name": "dataEnd",
                                        "nativeSrc": "8510:7:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "8510:7:66"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "slt",
                                      "nativeSrc": "8491:3:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "8491:3:66"
                                    },
                                    "nativeSrc": "8491:27:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "8491:27:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nativeSrc": "8484:6:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "8484:6:66"
                                },
                                "nativeSrc": "8484:35:66",
                                "nodeType": "YulFunctionCall",
                                "src": "8484:35:66"
                              },
                              "nativeSrc": "8481:55:66",
                              "nodeType": "YulIf",
                              "src": "8481:55:66"
                            },
                            {
                              "nativeSrc": "8545:87:66",
                              "nodeType": "YulAssignment",
                              "src": "8545:87:66",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "_1",
                                        "nativeSrc": "8604:2:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "8604:2:66"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "8608:2:66",
                                        "nodeType": "YulLiteral",
                                        "src": "8608:2:66",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "8600:3:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "8600:3:66"
                                    },
                                    "nativeSrc": "8600:11:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "8600:11:66"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "_1",
                                        "nativeSrc": "8619:2:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "8619:2:66"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "mload",
                                      "nativeSrc": "8613:5:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "8613:5:66"
                                    },
                                    "nativeSrc": "8613:9:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "8613:9:66"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nativeSrc": "8624:7:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "8624:7:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_available_length_bytes_fromMemory",
                                  "nativeSrc": "8555:44:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "8555:44:66"
                                },
                                "nativeSrc": "8555:77:66",
                                "nodeType": "YulFunctionCall",
                                "src": "8555:77:66"
                              },
                              "variableNames": [
                                {
                                  "name": "value0",
                                  "nativeSrc": "8545:6:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "8545:6:66"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_decode_tuple_t_string_memory_ptr_fromMemory",
                        "nativeSrc": "8180:458:66",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nativeSrc": "8237:9:66",
                            "nodeType": "YulTypedName",
                            "src": "8237:9:66",
                            "type": ""
                          },
                          {
                            "name": "dataEnd",
                            "nativeSrc": "8248:7:66",
                            "nodeType": "YulTypedName",
                            "src": "8248:7:66",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "value0",
                            "nativeSrc": "8260:6:66",
                            "nodeType": "YulTypedName",
                            "src": "8260:6:66",
                            "type": ""
                          }
                        ],
                        "src": "8180:458:66"
                      },
                      {
                        "body": {
                          "nativeSrc": "9286:808:66",
                          "nodeType": "YulBlock",
                          "src": "9286:808:66",
                          "statements": [
                            {
                              "nativeSrc": "9296:27:66",
                              "nodeType": "YulVariableDeclaration",
                              "src": "9296:27:66",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nativeSrc": "9316:6:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "9316:6:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nativeSrc": "9310:5:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "9310:5:66"
                                },
                                "nativeSrc": "9310:13:66",
                                "nodeType": "YulFunctionCall",
                                "src": "9310:13:66"
                              },
                              "variables": [
                                {
                                  "name": "length",
                                  "nativeSrc": "9300:6:66",
                                  "nodeType": "YulTypedName",
                                  "src": "9300:6:66",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value0",
                                        "nativeSrc": "9371:6:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "9371:6:66"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "9379:4:66",
                                        "nodeType": "YulLiteral",
                                        "src": "9379:4:66",
                                        "type": "",
                                        "value": "0x20"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "9367:3:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "9367:3:66"
                                    },
                                    "nativeSrc": "9367:17:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "9367:17:66"
                                  },
                                  {
                                    "name": "pos",
                                    "nativeSrc": "9386:3:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "9386:3:66"
                                  },
                                  {
                                    "name": "length",
                                    "nativeSrc": "9391:6:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "9391:6:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "copy_memory_to_memory_with_cleanup",
                                  "nativeSrc": "9332:34:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "9332:34:66"
                                },
                                "nativeSrc": "9332:66:66",
                                "nodeType": "YulFunctionCall",
                                "src": "9332:66:66"
                              },
                              "nativeSrc": "9332:66:66",
                              "nodeType": "YulExpressionStatement",
                              "src": "9332:66:66"
                            },
                            {
                              "nativeSrc": "9407:29:66",
                              "nodeType": "YulVariableDeclaration",
                              "src": "9407:29:66",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nativeSrc": "9424:3:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "9424:3:66"
                                  },
                                  {
                                    "name": "length",
                                    "nativeSrc": "9429:6:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "9429:6:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "9420:3:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "9420:3:66"
                                },
                                "nativeSrc": "9420:16:66",
                                "nodeType": "YulFunctionCall",
                                "src": "9420:16:66"
                              },
                              "variables": [
                                {
                                  "name": "end_1",
                                  "nativeSrc": "9411:5:66",
                                  "nodeType": "YulTypedName",
                                  "src": "9411:5:66",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nativeSrc": "9445:13:66",
                              "nodeType": "YulVariableDeclaration",
                              "src": "9445:13:66",
                              "value": {
                                "hexValue": "2f",
                                "kind": "string",
                                "nativeSrc": "9455:3:66",
                                "nodeType": "YulLiteral",
                                "src": "9455:3:66",
                                "type": "",
                                "value": "/"
                              },
                              "variables": [
                                {
                                  "name": "_1",
                                  "nativeSrc": "9449:2:66",
                                  "nodeType": "YulTypedName",
                                  "src": "9449:2:66",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "end_1",
                                    "nativeSrc": "9474:5:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "9474:5:66"
                                  },
                                  {
                                    "name": "_1",
                                    "nativeSrc": "9481:2:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "9481:2:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "9467:6:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "9467:6:66"
                                },
                                "nativeSrc": "9467:17:66",
                                "nodeType": "YulFunctionCall",
                                "src": "9467:17:66"
                              },
                              "nativeSrc": "9467:17:66",
                              "nodeType": "YulExpressionStatement",
                              "src": "9467:17:66"
                            },
                            {
                              "nativeSrc": "9493:29:66",
                              "nodeType": "YulVariableDeclaration",
                              "src": "9493:29:66",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "value1",
                                    "nativeSrc": "9515:6:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "9515:6:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nativeSrc": "9509:5:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "9509:5:66"
                                },
                                "nativeSrc": "9509:13:66",
                                "nodeType": "YulFunctionCall",
                                "src": "9509:13:66"
                              },
                              "variables": [
                                {
                                  "name": "length_1",
                                  "nativeSrc": "9497:8:66",
                                  "nodeType": "YulTypedName",
                                  "src": "9497:8:66",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value1",
                                        "nativeSrc": "9570:6:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "9570:6:66"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "9578:4:66",
                                        "nodeType": "YulLiteral",
                                        "src": "9578:4:66",
                                        "type": "",
                                        "value": "0x20"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "9566:3:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "9566:3:66"
                                    },
                                    "nativeSrc": "9566:17:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "9566:17:66"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "end_1",
                                        "nativeSrc": "9589:5:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "9589:5:66"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "9596:1:66",
                                        "nodeType": "YulLiteral",
                                        "src": "9596:1:66",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "9585:3:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "9585:3:66"
                                    },
                                    "nativeSrc": "9585:13:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "9585:13:66"
                                  },
                                  {
                                    "name": "length_1",
                                    "nativeSrc": "9600:8:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "9600:8:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "copy_memory_to_memory_with_cleanup",
                                  "nativeSrc": "9531:34:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "9531:34:66"
                                },
                                "nativeSrc": "9531:78:66",
                                "nodeType": "YulFunctionCall",
                                "src": "9531:78:66"
                              },
                              "nativeSrc": "9531:78:66",
                              "nodeType": "YulExpressionStatement",
                              "src": "9531:78:66"
                            },
                            {
                              "nativeSrc": "9618:30:66",
                              "nodeType": "YulVariableDeclaration",
                              "src": "9618:30:66",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "end_1",
                                    "nativeSrc": "9632:5:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "9632:5:66"
                                  },
                                  {
                                    "name": "length_1",
                                    "nativeSrc": "9639:8:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "9639:8:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "9628:3:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "9628:3:66"
                                },
                                "nativeSrc": "9628:20:66",
                                "nodeType": "YulFunctionCall",
                                "src": "9628:20:66"
                              },
                              "variables": [
                                {
                                  "name": "_2",
                                  "nativeSrc": "9622:2:66",
                                  "nodeType": "YulTypedName",
                                  "src": "9622:2:66",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "_2",
                                        "nativeSrc": "9668:2:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "9668:2:66"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "9672:1:66",
                                        "nodeType": "YulLiteral",
                                        "src": "9672:1:66",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "9664:3:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "9664:3:66"
                                    },
                                    "nativeSrc": "9664:10:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "9664:10:66"
                                  },
                                  {
                                    "name": "_1",
                                    "nativeSrc": "9676:2:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "9676:2:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "9657:6:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "9657:6:66"
                                },
                                "nativeSrc": "9657:22:66",
                                "nodeType": "YulFunctionCall",
                                "src": "9657:22:66"
                              },
                              "nativeSrc": "9657:22:66",
                              "nodeType": "YulExpressionStatement",
                              "src": "9657:22:66"
                            },
                            {
                              "nativeSrc": "9688:29:66",
                              "nodeType": "YulVariableDeclaration",
                              "src": "9688:29:66",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "value2",
                                    "nativeSrc": "9710:6:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "9710:6:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nativeSrc": "9704:5:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "9704:5:66"
                                },
                                "nativeSrc": "9704:13:66",
                                "nodeType": "YulFunctionCall",
                                "src": "9704:13:66"
                              },
                              "variables": [
                                {
                                  "name": "length_2",
                                  "nativeSrc": "9692:8:66",
                                  "nodeType": "YulTypedName",
                                  "src": "9692:8:66",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value2",
                                        "nativeSrc": "9765:6:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "9765:6:66"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "9773:4:66",
                                        "nodeType": "YulLiteral",
                                        "src": "9773:4:66",
                                        "type": "",
                                        "value": "0x20"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "9761:3:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "9761:3:66"
                                    },
                                    "nativeSrc": "9761:17:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "9761:17:66"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "_2",
                                        "nativeSrc": "9784:2:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "9784:2:66"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "9788:1:66",
                                        "nodeType": "YulLiteral",
                                        "src": "9788:1:66",
                                        "type": "",
                                        "value": "2"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "9780:3:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "9780:3:66"
                                    },
                                    "nativeSrc": "9780:10:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "9780:10:66"
                                  },
                                  {
                                    "name": "length_2",
                                    "nativeSrc": "9792:8:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "9792:8:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "copy_memory_to_memory_with_cleanup",
                                  "nativeSrc": "9726:34:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "9726:34:66"
                                },
                                "nativeSrc": "9726:75:66",
                                "nodeType": "YulFunctionCall",
                                "src": "9726:75:66"
                              },
                              "nativeSrc": "9726:75:66",
                              "nodeType": "YulExpressionStatement",
                              "src": "9726:75:66"
                            },
                            {
                              "nativeSrc": "9810:27:66",
                              "nodeType": "YulVariableDeclaration",
                              "src": "9810:27:66",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "_2",
                                    "nativeSrc": "9824:2:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "9824:2:66"
                                  },
                                  {
                                    "name": "length_2",
                                    "nativeSrc": "9828:8:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "9828:8:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "9820:3:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "9820:3:66"
                                },
                                "nativeSrc": "9820:17:66",
                                "nodeType": "YulFunctionCall",
                                "src": "9820:17:66"
                              },
                              "variables": [
                                {
                                  "name": "_3",
                                  "nativeSrc": "9814:2:66",
                                  "nodeType": "YulTypedName",
                                  "src": "9814:2:66",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "_3",
                                        "nativeSrc": "9857:2:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "9857:2:66"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "9861:1:66",
                                        "nodeType": "YulLiteral",
                                        "src": "9861:1:66",
                                        "type": "",
                                        "value": "2"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "9853:3:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "9853:3:66"
                                    },
                                    "nativeSrc": "9853:10:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "9853:10:66"
                                  },
                                  {
                                    "name": "_1",
                                    "nativeSrc": "9865:2:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "9865:2:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "9846:6:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "9846:6:66"
                                },
                                "nativeSrc": "9846:22:66",
                                "nodeType": "YulFunctionCall",
                                "src": "9846:22:66"
                              },
                              "nativeSrc": "9846:22:66",
                              "nodeType": "YulExpressionStatement",
                              "src": "9846:22:66"
                            },
                            {
                              "nativeSrc": "9877:29:66",
                              "nodeType": "YulVariableDeclaration",
                              "src": "9877:29:66",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "value3",
                                    "nativeSrc": "9899:6:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "9899:6:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nativeSrc": "9893:5:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "9893:5:66"
                                },
                                "nativeSrc": "9893:13:66",
                                "nodeType": "YulFunctionCall",
                                "src": "9893:13:66"
                              },
                              "variables": [
                                {
                                  "name": "length_3",
                                  "nativeSrc": "9881:8:66",
                                  "nodeType": "YulTypedName",
                                  "src": "9881:8:66",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value3",
                                        "nativeSrc": "9954:6:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "9954:6:66"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "9962:4:66",
                                        "nodeType": "YulLiteral",
                                        "src": "9962:4:66",
                                        "type": "",
                                        "value": "0x20"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "9950:3:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "9950:3:66"
                                    },
                                    "nativeSrc": "9950:17:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "9950:17:66"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "_3",
                                        "nativeSrc": "9973:2:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "9973:2:66"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "9977:1:66",
                                        "nodeType": "YulLiteral",
                                        "src": "9977:1:66",
                                        "type": "",
                                        "value": "3"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "9969:3:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "9969:3:66"
                                    },
                                    "nativeSrc": "9969:10:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "9969:10:66"
                                  },
                                  {
                                    "name": "length_3",
                                    "nativeSrc": "9981:8:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "9981:8:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "copy_memory_to_memory_with_cleanup",
                                  "nativeSrc": "9915:34:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "9915:34:66"
                                },
                                "nativeSrc": "9915:75:66",
                                "nodeType": "YulFunctionCall",
                                "src": "9915:75:66"
                              },
                              "nativeSrc": "9915:75:66",
                              "nodeType": "YulExpressionStatement",
                              "src": "9915:75:66"
                            },
                            {
                              "nativeSrc": "9999:27:66",
                              "nodeType": "YulVariableDeclaration",
                              "src": "9999:27:66",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "_3",
                                    "nativeSrc": "10013:2:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "10013:2:66"
                                  },
                                  {
                                    "name": "length_3",
                                    "nativeSrc": "10017:8:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "10017:8:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "10009:3:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "10009:3:66"
                                },
                                "nativeSrc": "10009:17:66",
                                "nodeType": "YulFunctionCall",
                                "src": "10009:17:66"
                              },
                              "variables": [
                                {
                                  "name": "_4",
                                  "nativeSrc": "10003:2:66",
                                  "nodeType": "YulTypedName",
                                  "src": "10003:2:66",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "_4",
                                        "nativeSrc": "10046:2:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "10046:2:66"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "10050:1:66",
                                        "nodeType": "YulLiteral",
                                        "src": "10050:1:66",
                                        "type": "",
                                        "value": "3"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "10042:3:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "10042:3:66"
                                    },
                                    "nativeSrc": "10042:10:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "10042:10:66"
                                  },
                                  {
                                    "hexValue": "2e6a736f6e",
                                    "kind": "string",
                                    "nativeSrc": "10054:7:66",
                                    "nodeType": "YulLiteral",
                                    "src": "10054:7:66",
                                    "type": "",
                                    "value": ".json"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "10035:6:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "10035:6:66"
                                },
                                "nativeSrc": "10035:27:66",
                                "nodeType": "YulFunctionCall",
                                "src": "10035:27:66"
                              },
                              "nativeSrc": "10035:27:66",
                              "nodeType": "YulExpressionStatement",
                              "src": "10035:27:66"
                            },
                            {
                              "nativeSrc": "10071:17:66",
                              "nodeType": "YulAssignment",
                              "src": "10071:17:66",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "_4",
                                    "nativeSrc": "10082:2:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "10082:2:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "10086:1:66",
                                    "nodeType": "YulLiteral",
                                    "src": "10086:1:66",
                                    "type": "",
                                    "value": "8"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "10078:3:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "10078:3:66"
                                },
                                "nativeSrc": "10078:10:66",
                                "nodeType": "YulFunctionCall",
                                "src": "10078:10:66"
                              },
                              "variableNames": [
                                {
                                  "name": "end",
                                  "nativeSrc": "10071:3:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "10071:3:66"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_packed_t_string_memory_ptr_t_stringliteral_fba9715e477e68952d3f1df7a185b3708aadad50ec10cc793973864023868527_t_string_memory_ptr_t_stringliteral_fba9715e477e68952d3f1df7a185b3708aadad50ec10cc793973864023868527_t_string_memory_ptr_t_stringliteral_fba9715e477e68952d3f1df7a185b3708aadad50ec10cc793973864023868527_t_string_memory_ptr_t_stringliteral_94311adc0a0cd4e10be11b23bd4316b8cffa4adf693e8f96f5c075aa439a7972__to_t_string_memory_ptr_t_bytes1_t_string_memory_ptr_t_bytes1_t_string_memory_ptr_t_bytes1_t_string_memory_ptr_t_bytes5__nonPadded_inplace_fromStack_reversed",
                        "nativeSrc": "8643:1451:66",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "pos",
                            "nativeSrc": "9238:3:66",
                            "nodeType": "YulTypedName",
                            "src": "9238:3:66",
                            "type": ""
                          },
                          {
                            "name": "value3",
                            "nativeSrc": "9243:6:66",
                            "nodeType": "YulTypedName",
                            "src": "9243:6:66",
                            "type": ""
                          },
                          {
                            "name": "value2",
                            "nativeSrc": "9251:6:66",
                            "nodeType": "YulTypedName",
                            "src": "9251:6:66",
                            "type": ""
                          },
                          {
                            "name": "value1",
                            "nativeSrc": "9259:6:66",
                            "nodeType": "YulTypedName",
                            "src": "9259:6:66",
                            "type": ""
                          },
                          {
                            "name": "value0",
                            "nativeSrc": "9267:6:66",
                            "nodeType": "YulTypedName",
                            "src": "9267:6:66",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "end",
                            "nativeSrc": "9278:3:66",
                            "nodeType": "YulTypedName",
                            "src": "9278:3:66",
                            "type": ""
                          }
                        ],
                        "src": "8643:1451:66"
                      },
                      {
                        "body": {
                          "nativeSrc": "10321:262:66",
                          "nodeType": "YulBlock",
                          "src": "10321:262:66",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "10338:9:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "10338:9:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "10349:2:66",
                                    "nodeType": "YulLiteral",
                                    "src": "10349:2:66",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "10331:6:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "10331:6:66"
                                },
                                "nativeSrc": "10331:21:66",
                                "nodeType": "YulFunctionCall",
                                "src": "10331:21:66"
                              },
                              "nativeSrc": "10331:21:66",
                              "nodeType": "YulExpressionStatement",
                              "src": "10331:21:66"
                            },
                            {
                              "nativeSrc": "10361:59:66",
                              "nodeType": "YulVariableDeclaration",
                              "src": "10361:59:66",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nativeSrc": "10393:6:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "10393:6:66"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nativeSrc": "10405:9:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "10405:9:66"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "10416:2:66",
                                        "nodeType": "YulLiteral",
                                        "src": "10416:2:66",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "10401:3:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "10401:3:66"
                                    },
                                    "nativeSrc": "10401:18:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "10401:18:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_encode_string",
                                  "nativeSrc": "10375:17:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "10375:17:66"
                                },
                                "nativeSrc": "10375:45:66",
                                "nodeType": "YulFunctionCall",
                                "src": "10375:45:66"
                              },
                              "variables": [
                                {
                                  "name": "tail_1",
                                  "nativeSrc": "10365:6:66",
                                  "nodeType": "YulTypedName",
                                  "src": "10365:6:66",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nativeSrc": "10440:9:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "10440:9:66"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "10451:2:66",
                                        "nodeType": "YulLiteral",
                                        "src": "10451:2:66",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "10436:3:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "10436:3:66"
                                    },
                                    "nativeSrc": "10436:18:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "10436:18:66"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "tail_1",
                                        "nativeSrc": "10460:6:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "10460:6:66"
                                      },
                                      {
                                        "name": "headStart",
                                        "nativeSrc": "10468:9:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "10468:9:66"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nativeSrc": "10456:3:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "10456:3:66"
                                    },
                                    "nativeSrc": "10456:22:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "10456:22:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "10429:6:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "10429:6:66"
                                },
                                "nativeSrc": "10429:50:66",
                                "nodeType": "YulFunctionCall",
                                "src": "10429:50:66"
                              },
                              "nativeSrc": "10429:50:66",
                              "nodeType": "YulExpressionStatement",
                              "src": "10429:50:66"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "tail_1",
                                    "nativeSrc": "10495:6:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "10495:6:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "10503:1:66",
                                    "nodeType": "YulLiteral",
                                    "src": "10503:1:66",
                                    "type": "",
                                    "value": "4"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "10488:6:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "10488:6:66"
                                },
                                "nativeSrc": "10488:17:66",
                                "nodeType": "YulFunctionCall",
                                "src": "10488:17:66"
                              },
                              "nativeSrc": "10488:17:66",
                              "nodeType": "YulExpressionStatement",
                              "src": "10488:17:66"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "tail_1",
                                        "nativeSrc": "10525:6:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "10525:6:66"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "10533:2:66",
                                        "nodeType": "YulLiteral",
                                        "src": "10533:2:66",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "10521:3:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "10521:3:66"
                                    },
                                    "nativeSrc": "10521:15:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "10521:15:66"
                                  },
                                  {
                                    "hexValue": "2e617374",
                                    "kind": "string",
                                    "nativeSrc": "10538:6:66",
                                    "nodeType": "YulLiteral",
                                    "src": "10538:6:66",
                                    "type": "",
                                    "value": ".ast"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "10514:6:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "10514:6:66"
                                },
                                "nativeSrc": "10514:31:66",
                                "nodeType": "YulFunctionCall",
                                "src": "10514:31:66"
                              },
                              "nativeSrc": "10514:31:66",
                              "nodeType": "YulExpressionStatement",
                              "src": "10514:31:66"
                            },
                            {
                              "nativeSrc": "10554:23:66",
                              "nodeType": "YulAssignment",
                              "src": "10554:23:66",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "tail_1",
                                    "nativeSrc": "10566:6:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "10566:6:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "10574:2:66",
                                    "nodeType": "YulLiteral",
                                    "src": "10574:2:66",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "10562:3:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "10562:3:66"
                                },
                                "nativeSrc": "10562:15:66",
                                "nodeType": "YulFunctionCall",
                                "src": "10562:15:66"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nativeSrc": "10554:4:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "10554:4:66"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_string_memory_ptr_t_stringliteral_94ac7d5548e308c1d3c62d3cec2f12ac4e8340c7ba9c9bd462561ccfdd974d98__to_t_string_memory_ptr_t_string_memory_ptr__fromStack_reversed",
                        "nativeSrc": "10099:484:66",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nativeSrc": "10290:9:66",
                            "nodeType": "YulTypedName",
                            "src": "10290:9:66",
                            "type": ""
                          },
                          {
                            "name": "value0",
                            "nativeSrc": "10301:6:66",
                            "nodeType": "YulTypedName",
                            "src": "10301:6:66",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nativeSrc": "10312:4:66",
                            "nodeType": "YulTypedName",
                            "src": "10312:4:66",
                            "type": ""
                          }
                        ],
                        "src": "10099:484:66"
                      },
                      {
                        "body": {
                          "nativeSrc": "10666:199:66",
                          "nodeType": "YulBlock",
                          "src": "10666:199:66",
                          "statements": [
                            {
                              "body": {
                                "nativeSrc": "10712:16:66",
                                "nodeType": "YulBlock",
                                "src": "10712:16:66",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nativeSrc": "10721:1:66",
                                          "nodeType": "YulLiteral",
                                          "src": "10721:1:66",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nativeSrc": "10724:1:66",
                                          "nodeType": "YulLiteral",
                                          "src": "10724:1:66",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nativeSrc": "10714:6:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "10714:6:66"
                                      },
                                      "nativeSrc": "10714:12:66",
                                      "nodeType": "YulFunctionCall",
                                      "src": "10714:12:66"
                                    },
                                    "nativeSrc": "10714:12:66",
                                    "nodeType": "YulExpressionStatement",
                                    "src": "10714:12:66"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "dataEnd",
                                        "nativeSrc": "10687:7:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "10687:7:66"
                                      },
                                      {
                                        "name": "headStart",
                                        "nativeSrc": "10696:9:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "10696:9:66"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nativeSrc": "10683:3:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "10683:3:66"
                                    },
                                    "nativeSrc": "10683:23:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "10683:23:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "10708:2:66",
                                    "nodeType": "YulLiteral",
                                    "src": "10708:2:66",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nativeSrc": "10679:3:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "10679:3:66"
                                },
                                "nativeSrc": "10679:32:66",
                                "nodeType": "YulFunctionCall",
                                "src": "10679:32:66"
                              },
                              "nativeSrc": "10676:52:66",
                              "nodeType": "YulIf",
                              "src": "10676:52:66"
                            },
                            {
                              "nativeSrc": "10737:29:66",
                              "nodeType": "YulVariableDeclaration",
                              "src": "10737:29:66",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "10756:9:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "10756:9:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nativeSrc": "10750:5:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "10750:5:66"
                                },
                                "nativeSrc": "10750:16:66",
                                "nodeType": "YulFunctionCall",
                                "src": "10750:16:66"
                              },
                              "variables": [
                                {
                                  "name": "value",
                                  "nativeSrc": "10741:5:66",
                                  "nodeType": "YulTypedName",
                                  "src": "10741:5:66",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "body": {
                                "nativeSrc": "10819:16:66",
                                "nodeType": "YulBlock",
                                "src": "10819:16:66",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nativeSrc": "10828:1:66",
                                          "nodeType": "YulLiteral",
                                          "src": "10828:1:66",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nativeSrc": "10831:1:66",
                                          "nodeType": "YulLiteral",
                                          "src": "10831:1:66",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nativeSrc": "10821:6:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "10821:6:66"
                                      },
                                      "nativeSrc": "10821:12:66",
                                      "nodeType": "YulFunctionCall",
                                      "src": "10821:12:66"
                                    },
                                    "nativeSrc": "10821:12:66",
                                    "nodeType": "YulExpressionStatement",
                                    "src": "10821:12:66"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nativeSrc": "10788:5:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "10788:5:66"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "arguments": [
                                              {
                                                "name": "value",
                                                "nativeSrc": "10809:5:66",
                                                "nodeType": "YulIdentifier",
                                                "src": "10809:5:66"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "iszero",
                                              "nativeSrc": "10802:6:66",
                                              "nodeType": "YulIdentifier",
                                              "src": "10802:6:66"
                                            },
                                            "nativeSrc": "10802:13:66",
                                            "nodeType": "YulFunctionCall",
                                            "src": "10802:13:66"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "iszero",
                                          "nativeSrc": "10795:6:66",
                                          "nodeType": "YulIdentifier",
                                          "src": "10795:6:66"
                                        },
                                        "nativeSrc": "10795:21:66",
                                        "nodeType": "YulFunctionCall",
                                        "src": "10795:21:66"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "eq",
                                      "nativeSrc": "10785:2:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "10785:2:66"
                                    },
                                    "nativeSrc": "10785:32:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "10785:32:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nativeSrc": "10778:6:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "10778:6:66"
                                },
                                "nativeSrc": "10778:40:66",
                                "nodeType": "YulFunctionCall",
                                "src": "10778:40:66"
                              },
                              "nativeSrc": "10775:60:66",
                              "nodeType": "YulIf",
                              "src": "10775:60:66"
                            },
                            {
                              "nativeSrc": "10844:15:66",
                              "nodeType": "YulAssignment",
                              "src": "10844:15:66",
                              "value": {
                                "name": "value",
                                "nativeSrc": "10854:5:66",
                                "nodeType": "YulIdentifier",
                                "src": "10854:5:66"
                              },
                              "variableNames": [
                                {
                                  "name": "value0",
                                  "nativeSrc": "10844:6:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "10844:6:66"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_decode_tuple_t_bool_fromMemory",
                        "nativeSrc": "10588:277:66",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nativeSrc": "10632:9:66",
                            "nodeType": "YulTypedName",
                            "src": "10632:9:66",
                            "type": ""
                          },
                          {
                            "name": "dataEnd",
                            "nativeSrc": "10643:7:66",
                            "nodeType": "YulTypedName",
                            "src": "10643:7:66",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "value0",
                            "nativeSrc": "10655:6:66",
                            "nodeType": "YulTypedName",
                            "src": "10655:6:66",
                            "type": ""
                          }
                        ],
                        "src": "10588:277:66"
                      },
                      {
                        "body": {
                          "nativeSrc": "11201:342:66",
                          "nodeType": "YulBlock",
                          "src": "11201:342:66",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nativeSrc": "11218:3:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "11218:3:66"
                                  },
                                  {
                                    "hexValue": "436f756c64206e6f742066696e642041535420696e20617274696661637420",
                                    "kind": "string",
                                    "nativeSrc": "11223:33:66",
                                    "nodeType": "YulLiteral",
                                    "src": "11223:33:66",
                                    "type": "",
                                    "value": "Could not find AST in artifact "
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "11211:6:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "11211:6:66"
                                },
                                "nativeSrc": "11211:46:66",
                                "nodeType": "YulFunctionCall",
                                "src": "11211:46:66"
                              },
                              "nativeSrc": "11211:46:66",
                              "nodeType": "YulExpressionStatement",
                              "src": "11211:46:66"
                            },
                            {
                              "nativeSrc": "11266:27:66",
                              "nodeType": "YulVariableDeclaration",
                              "src": "11266:27:66",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nativeSrc": "11286:6:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "11286:6:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nativeSrc": "11280:5:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "11280:5:66"
                                },
                                "nativeSrc": "11280:13:66",
                                "nodeType": "YulFunctionCall",
                                "src": "11280:13:66"
                              },
                              "variables": [
                                {
                                  "name": "length",
                                  "nativeSrc": "11270:6:66",
                                  "nodeType": "YulTypedName",
                                  "src": "11270:6:66",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value0",
                                        "nativeSrc": "11341:6:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "11341:6:66"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "11349:4:66",
                                        "nodeType": "YulLiteral",
                                        "src": "11349:4:66",
                                        "type": "",
                                        "value": "0x20"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "11337:3:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "11337:3:66"
                                    },
                                    "nativeSrc": "11337:17:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "11337:17:66"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "pos",
                                        "nativeSrc": "11360:3:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "11360:3:66"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "11365:2:66",
                                        "nodeType": "YulLiteral",
                                        "src": "11365:2:66",
                                        "type": "",
                                        "value": "31"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "11356:3:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "11356:3:66"
                                    },
                                    "nativeSrc": "11356:12:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "11356:12:66"
                                  },
                                  {
                                    "name": "length",
                                    "nativeSrc": "11370:6:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "11370:6:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "copy_memory_to_memory_with_cleanup",
                                  "nativeSrc": "11302:34:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "11302:34:66"
                                },
                                "nativeSrc": "11302:75:66",
                                "nodeType": "YulFunctionCall",
                                "src": "11302:75:66"
                              },
                              "nativeSrc": "11302:75:66",
                              "nodeType": "YulExpressionStatement",
                              "src": "11302:75:66"
                            },
                            {
                              "nativeSrc": "11386:26:66",
                              "nodeType": "YulVariableDeclaration",
                              "src": "11386:26:66",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nativeSrc": "11400:3:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "11400:3:66"
                                  },
                                  {
                                    "name": "length",
                                    "nativeSrc": "11405:6:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "11405:6:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "11396:3:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "11396:3:66"
                                },
                                "nativeSrc": "11396:16:66",
                                "nodeType": "YulFunctionCall",
                                "src": "11396:16:66"
                              },
                              "variables": [
                                {
                                  "name": "_1",
                                  "nativeSrc": "11390:2:66",
                                  "nodeType": "YulTypedName",
                                  "src": "11390:2:66",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "_1",
                                        "nativeSrc": "11432:2:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "11432:2:66"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "11436:2:66",
                                        "nodeType": "YulLiteral",
                                        "src": "11436:2:66",
                                        "type": "",
                                        "value": "31"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "11428:3:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "11428:3:66"
                                    },
                                    "nativeSrc": "11428:11:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "11428:11:66"
                                  },
                                  {
                                    "hexValue": "2e205365742060617374203d20747275656020696e20666f756e6472792e746f",
                                    "kind": "string",
                                    "nativeSrc": "11441:34:66",
                                    "nodeType": "YulLiteral",
                                    "src": "11441:34:66",
                                    "type": "",
                                    "value": ". Set `ast = true` in foundry.to"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "11421:6:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "11421:6:66"
                                },
                                "nativeSrc": "11421:55:66",
                                "nodeType": "YulFunctionCall",
                                "src": "11421:55:66"
                              },
                              "nativeSrc": "11421:55:66",
                              "nodeType": "YulExpressionStatement",
                              "src": "11421:55:66"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "_1",
                                        "nativeSrc": "11496:2:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "11496:2:66"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "11500:2:66",
                                        "nodeType": "YulLiteral",
                                        "src": "11500:2:66",
                                        "type": "",
                                        "value": "63"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "11492:3:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "11492:3:66"
                                    },
                                    "nativeSrc": "11492:11:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "11492:11:66"
                                  },
                                  {
                                    "hexValue": "6d6c",
                                    "kind": "string",
                                    "nativeSrc": "11505:4:66",
                                    "nodeType": "YulLiteral",
                                    "src": "11505:4:66",
                                    "type": "",
                                    "value": "ml"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "11485:6:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "11485:6:66"
                                },
                                "nativeSrc": "11485:25:66",
                                "nodeType": "YulFunctionCall",
                                "src": "11485:25:66"
                              },
                              "nativeSrc": "11485:25:66",
                              "nodeType": "YulExpressionStatement",
                              "src": "11485:25:66"
                            },
                            {
                              "nativeSrc": "11519:18:66",
                              "nodeType": "YulAssignment",
                              "src": "11519:18:66",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "_1",
                                    "nativeSrc": "11530:2:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "11530:2:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "11534:2:66",
                                    "nodeType": "YulLiteral",
                                    "src": "11534:2:66",
                                    "type": "",
                                    "value": "65"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "11526:3:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "11526:3:66"
                                },
                                "nativeSrc": "11526:11:66",
                                "nodeType": "YulFunctionCall",
                                "src": "11526:11:66"
                              },
                              "variableNames": [
                                {
                                  "name": "end",
                                  "nativeSrc": "11519:3:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "11519:3:66"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_packed_t_stringliteral_3b0c29718fa0ccfd3c548e0fdf398a1d76969c362a61df53627e5e4f64fab1e8_t_string_memory_ptr_t_stringliteral_dd0e6e5fb2dfed5daf937831e40458612ea423d5675571cc5b1b64fd260d1245__to_t_bytes31_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed",
                        "nativeSrc": "10870:673:66",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "pos",
                            "nativeSrc": "11177:3:66",
                            "nodeType": "YulTypedName",
                            "src": "11177:3:66",
                            "type": ""
                          },
                          {
                            "name": "value0",
                            "nativeSrc": "11182:6:66",
                            "nodeType": "YulTypedName",
                            "src": "11182:6:66",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "end",
                            "nativeSrc": "11193:3:66",
                            "nodeType": "YulTypedName",
                            "src": "11193:3:66",
                            "type": ""
                          }
                        ],
                        "src": "10870:673:66"
                      },
                      {
                        "body": {
                          "nativeSrc": "11770:276:66",
                          "nodeType": "YulBlock",
                          "src": "11770:276:66",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "11787:9:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "11787:9:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "11798:2:66",
                                    "nodeType": "YulLiteral",
                                    "src": "11798:2:66",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "11780:6:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "11780:6:66"
                                },
                                "nativeSrc": "11780:21:66",
                                "nodeType": "YulFunctionCall",
                                "src": "11780:21:66"
                              },
                              "nativeSrc": "11780:21:66",
                              "nodeType": "YulExpressionStatement",
                              "src": "11780:21:66"
                            },
                            {
                              "nativeSrc": "11810:59:66",
                              "nodeType": "YulVariableDeclaration",
                              "src": "11810:59:66",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nativeSrc": "11842:6:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "11842:6:66"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nativeSrc": "11854:9:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "11854:9:66"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "11865:2:66",
                                        "nodeType": "YulLiteral",
                                        "src": "11865:2:66",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "11850:3:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "11850:3:66"
                                    },
                                    "nativeSrc": "11850:18:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "11850:18:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_encode_string",
                                  "nativeSrc": "11824:17:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "11824:17:66"
                                },
                                "nativeSrc": "11824:45:66",
                                "nodeType": "YulFunctionCall",
                                "src": "11824:45:66"
                              },
                              "variables": [
                                {
                                  "name": "tail_1",
                                  "nativeSrc": "11814:6:66",
                                  "nodeType": "YulTypedName",
                                  "src": "11814:6:66",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nativeSrc": "11889:9:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "11889:9:66"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "11900:2:66",
                                        "nodeType": "YulLiteral",
                                        "src": "11900:2:66",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "11885:3:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "11885:3:66"
                                    },
                                    "nativeSrc": "11885:18:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "11885:18:66"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "tail_1",
                                        "nativeSrc": "11909:6:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "11909:6:66"
                                      },
                                      {
                                        "name": "headStart",
                                        "nativeSrc": "11917:9:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "11917:9:66"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nativeSrc": "11905:3:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "11905:3:66"
                                    },
                                    "nativeSrc": "11905:22:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "11905:22:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "11878:6:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "11878:6:66"
                                },
                                "nativeSrc": "11878:50:66",
                                "nodeType": "YulFunctionCall",
                                "src": "11878:50:66"
                              },
                              "nativeSrc": "11878:50:66",
                              "nodeType": "YulExpressionStatement",
                              "src": "11878:50:66"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "tail_1",
                                    "nativeSrc": "11944:6:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "11944:6:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "11952:2:66",
                                    "nodeType": "YulLiteral",
                                    "src": "11952:2:66",
                                    "type": "",
                                    "value": "17"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "11937:6:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "11937:6:66"
                                },
                                "nativeSrc": "11937:18:66",
                                "nodeType": "YulFunctionCall",
                                "src": "11937:18:66"
                              },
                              "nativeSrc": "11937:18:66",
                              "nodeType": "YulExpressionStatement",
                              "src": "11937:18:66"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "tail_1",
                                        "nativeSrc": "11975:6:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "11975:6:66"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "11983:2:66",
                                        "nodeType": "YulLiteral",
                                        "src": "11983:2:66",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "11971:3:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "11971:3:66"
                                    },
                                    "nativeSrc": "11971:15:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "11971:15:66"
                                  },
                                  {
                                    "hexValue": "2e6173742e6162736f6c75746550617468",
                                    "kind": "string",
                                    "nativeSrc": "11988:19:66",
                                    "nodeType": "YulLiteral",
                                    "src": "11988:19:66",
                                    "type": "",
                                    "value": ".ast.absolutePath"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "11964:6:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "11964:6:66"
                                },
                                "nativeSrc": "11964:44:66",
                                "nodeType": "YulFunctionCall",
                                "src": "11964:44:66"
                              },
                              "nativeSrc": "11964:44:66",
                              "nodeType": "YulExpressionStatement",
                              "src": "11964:44:66"
                            },
                            {
                              "nativeSrc": "12017:23:66",
                              "nodeType": "YulAssignment",
                              "src": "12017:23:66",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "tail_1",
                                    "nativeSrc": "12029:6:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "12029:6:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "12037:2:66",
                                    "nodeType": "YulLiteral",
                                    "src": "12037:2:66",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "12025:3:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "12025:3:66"
                                },
                                "nativeSrc": "12025:15:66",
                                "nodeType": "YulFunctionCall",
                                "src": "12025:15:66"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nativeSrc": "12017:4:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "12017:4:66"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_string_memory_ptr_t_stringliteral_0f3ac612dde053e2dba53344fdd4fdfcedab8a75b1f141a9e2889b50a75851e1__to_t_string_memory_ptr_t_string_memory_ptr__fromStack_reversed",
                        "nativeSrc": "11548:498:66",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nativeSrc": "11739:9:66",
                            "nodeType": "YulTypedName",
                            "src": "11739:9:66",
                            "type": ""
                          },
                          {
                            "name": "value0",
                            "nativeSrc": "11750:6:66",
                            "nodeType": "YulTypedName",
                            "src": "11750:6:66",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nativeSrc": "11761:4:66",
                            "nodeType": "YulTypedName",
                            "src": "11761:4:66",
                            "type": ""
                          }
                        ],
                        "src": "11548:498:66"
                      },
                      {
                        "body": {
                          "nativeSrc": "12273:271:66",
                          "nodeType": "YulBlock",
                          "src": "12273:271:66",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "12290:9:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "12290:9:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "12301:2:66",
                                    "nodeType": "YulLiteral",
                                    "src": "12301:2:66",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "12283:6:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "12283:6:66"
                                },
                                "nativeSrc": "12283:21:66",
                                "nodeType": "YulFunctionCall",
                                "src": "12283:21:66"
                              },
                              "nativeSrc": "12283:21:66",
                              "nodeType": "YulExpressionStatement",
                              "src": "12283:21:66"
                            },
                            {
                              "nativeSrc": "12313:59:66",
                              "nodeType": "YulVariableDeclaration",
                              "src": "12313:59:66",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nativeSrc": "12345:6:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "12345:6:66"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nativeSrc": "12357:9:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "12357:9:66"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "12368:2:66",
                                        "nodeType": "YulLiteral",
                                        "src": "12368:2:66",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "12353:3:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "12353:3:66"
                                    },
                                    "nativeSrc": "12353:18:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "12353:18:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_encode_string",
                                  "nativeSrc": "12327:17:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "12327:17:66"
                                },
                                "nativeSrc": "12327:45:66",
                                "nodeType": "YulFunctionCall",
                                "src": "12327:45:66"
                              },
                              "variables": [
                                {
                                  "name": "tail_1",
                                  "nativeSrc": "12317:6:66",
                                  "nodeType": "YulTypedName",
                                  "src": "12317:6:66",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nativeSrc": "12392:9:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "12392:9:66"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "12403:2:66",
                                        "nodeType": "YulLiteral",
                                        "src": "12403:2:66",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "12388:3:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "12388:3:66"
                                    },
                                    "nativeSrc": "12388:18:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "12388:18:66"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "tail_1",
                                        "nativeSrc": "12412:6:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "12412:6:66"
                                      },
                                      {
                                        "name": "headStart",
                                        "nativeSrc": "12420:9:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "12420:9:66"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nativeSrc": "12408:3:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "12408:3:66"
                                    },
                                    "nativeSrc": "12408:22:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "12408:22:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "12381:6:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "12381:6:66"
                                },
                                "nativeSrc": "12381:50:66",
                                "nodeType": "YulFunctionCall",
                                "src": "12381:50:66"
                              },
                              "nativeSrc": "12381:50:66",
                              "nodeType": "YulExpressionStatement",
                              "src": "12381:50:66"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "tail_1",
                                    "nativeSrc": "12447:6:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "12447:6:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "12455:2:66",
                                    "nodeType": "YulLiteral",
                                    "src": "12455:2:66",
                                    "type": "",
                                    "value": "12"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "12440:6:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "12440:6:66"
                                },
                                "nativeSrc": "12440:18:66",
                                "nodeType": "YulFunctionCall",
                                "src": "12440:18:66"
                              },
                              "nativeSrc": "12440:18:66",
                              "nodeType": "YulExpressionStatement",
                              "src": "12440:18:66"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "tail_1",
                                        "nativeSrc": "12478:6:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "12478:6:66"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "12486:2:66",
                                        "nodeType": "YulLiteral",
                                        "src": "12486:2:66",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "12474:3:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "12474:3:66"
                                    },
                                    "nativeSrc": "12474:15:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "12474:15:66"
                                  },
                                  {
                                    "hexValue": "2e6173742e6c6963656e7365",
                                    "kind": "string",
                                    "nativeSrc": "12491:14:66",
                                    "nodeType": "YulLiteral",
                                    "src": "12491:14:66",
                                    "type": "",
                                    "value": ".ast.license"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "12467:6:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "12467:6:66"
                                },
                                "nativeSrc": "12467:39:66",
                                "nodeType": "YulFunctionCall",
                                "src": "12467:39:66"
                              },
                              "nativeSrc": "12467:39:66",
                              "nodeType": "YulExpressionStatement",
                              "src": "12467:39:66"
                            },
                            {
                              "nativeSrc": "12515:23:66",
                              "nodeType": "YulAssignment",
                              "src": "12515:23:66",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "tail_1",
                                    "nativeSrc": "12527:6:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "12527:6:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "12535:2:66",
                                    "nodeType": "YulLiteral",
                                    "src": "12535:2:66",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "12523:3:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "12523:3:66"
                                },
                                "nativeSrc": "12523:15:66",
                                "nodeType": "YulFunctionCall",
                                "src": "12523:15:66"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nativeSrc": "12515:4:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "12515:4:66"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_string_memory_ptr_t_stringliteral_0ec1952d7acb1df54d89163ca83f1d7b360061eb9c0c5c501b4eac52c5c807e4__to_t_string_memory_ptr_t_string_memory_ptr__fromStack_reversed",
                        "nativeSrc": "12051:493:66",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nativeSrc": "12242:9:66",
                            "nodeType": "YulTypedName",
                            "src": "12242:9:66",
                            "type": ""
                          },
                          {
                            "name": "value0",
                            "nativeSrc": "12253:6:66",
                            "nodeType": "YulTypedName",
                            "src": "12253:6:66",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nativeSrc": "12264:4:66",
                            "nodeType": "YulTypedName",
                            "src": "12264:4:66",
                            "type": ""
                          }
                        ],
                        "src": "12051:493:66"
                      },
                      {
                        "body": {
                          "nativeSrc": "12870:279:66",
                          "nodeType": "YulBlock",
                          "src": "12870:279:66",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nativeSrc": "12887:3:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "12887:3:66"
                                  },
                                  {
                                    "hexValue": "2e6d657461646174612e736f75726365732e5b27",
                                    "kind": "string",
                                    "nativeSrc": "12892:22:66",
                                    "nodeType": "YulLiteral",
                                    "src": "12892:22:66",
                                    "type": "",
                                    "value": ".metadata.sources.['"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "12880:6:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "12880:6:66"
                                },
                                "nativeSrc": "12880:35:66",
                                "nodeType": "YulFunctionCall",
                                "src": "12880:35:66"
                              },
                              "nativeSrc": "12880:35:66",
                              "nodeType": "YulExpressionStatement",
                              "src": "12880:35:66"
                            },
                            {
                              "nativeSrc": "12924:27:66",
                              "nodeType": "YulVariableDeclaration",
                              "src": "12924:27:66",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nativeSrc": "12944:6:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "12944:6:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nativeSrc": "12938:5:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "12938:5:66"
                                },
                                "nativeSrc": "12938:13:66",
                                "nodeType": "YulFunctionCall",
                                "src": "12938:13:66"
                              },
                              "variables": [
                                {
                                  "name": "length",
                                  "nativeSrc": "12928:6:66",
                                  "nodeType": "YulTypedName",
                                  "src": "12928:6:66",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value0",
                                        "nativeSrc": "12999:6:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "12999:6:66"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "13007:4:66",
                                        "nodeType": "YulLiteral",
                                        "src": "13007:4:66",
                                        "type": "",
                                        "value": "0x20"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "12995:3:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "12995:3:66"
                                    },
                                    "nativeSrc": "12995:17:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "12995:17:66"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "pos",
                                        "nativeSrc": "13018:3:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "13018:3:66"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "13023:2:66",
                                        "nodeType": "YulLiteral",
                                        "src": "13023:2:66",
                                        "type": "",
                                        "value": "20"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "13014:3:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "13014:3:66"
                                    },
                                    "nativeSrc": "13014:12:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "13014:12:66"
                                  },
                                  {
                                    "name": "length",
                                    "nativeSrc": "13028:6:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "13028:6:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "copy_memory_to_memory_with_cleanup",
                                  "nativeSrc": "12960:34:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "12960:34:66"
                                },
                                "nativeSrc": "12960:75:66",
                                "nodeType": "YulFunctionCall",
                                "src": "12960:75:66"
                              },
                              "nativeSrc": "12960:75:66",
                              "nodeType": "YulExpressionStatement",
                              "src": "12960:75:66"
                            },
                            {
                              "nativeSrc": "13044:26:66",
                              "nodeType": "YulVariableDeclaration",
                              "src": "13044:26:66",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nativeSrc": "13058:3:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "13058:3:66"
                                  },
                                  {
                                    "name": "length",
                                    "nativeSrc": "13063:6:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "13063:6:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "13054:3:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "13054:3:66"
                                },
                                "nativeSrc": "13054:16:66",
                                "nodeType": "YulFunctionCall",
                                "src": "13054:16:66"
                              },
                              "variables": [
                                {
                                  "name": "_1",
                                  "nativeSrc": "13048:2:66",
                                  "nodeType": "YulTypedName",
                                  "src": "13048:2:66",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "_1",
                                        "nativeSrc": "13090:2:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "13090:2:66"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "13094:2:66",
                                        "nodeType": "YulLiteral",
                                        "src": "13094:2:66",
                                        "type": "",
                                        "value": "20"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "13086:3:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "13086:3:66"
                                    },
                                    "nativeSrc": "13086:11:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "13086:11:66"
                                  },
                                  {
                                    "hexValue": "275d2e6b656363616b323536",
                                    "kind": "string",
                                    "nativeSrc": "13099:14:66",
                                    "nodeType": "YulLiteral",
                                    "src": "13099:14:66",
                                    "type": "",
                                    "value": "'].keccak256"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "13079:6:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "13079:6:66"
                                },
                                "nativeSrc": "13079:35:66",
                                "nodeType": "YulFunctionCall",
                                "src": "13079:35:66"
                              },
                              "nativeSrc": "13079:35:66",
                              "nodeType": "YulExpressionStatement",
                              "src": "13079:35:66"
                            },
                            {
                              "nativeSrc": "13123:20:66",
                              "nodeType": "YulAssignment",
                              "src": "13123:20:66",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "_1",
                                    "nativeSrc": "13134:2:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "13134:2:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "13138:4:66",
                                    "nodeType": "YulLiteral",
                                    "src": "13138:4:66",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "13130:3:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "13130:3:66"
                                },
                                "nativeSrc": "13130:13:66",
                                "nodeType": "YulFunctionCall",
                                "src": "13130:13:66"
                              },
                              "variableNames": [
                                {
                                  "name": "end",
                                  "nativeSrc": "13123:3:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "13123:3:66"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_packed_t_stringliteral_9acc65371218b2be388de4c512999c5773d7c7e8cfe55ef8b9c7f869e0e7945b_t_string_memory_ptr_t_stringliteral_aad8893e597421c55956295138eb041c0150d1e2975daa37e4c3a126e8685848__to_t_bytes20_t_string_memory_ptr_t_bytes12__nonPadded_inplace_fromStack_reversed",
                        "nativeSrc": "12549:600:66",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "pos",
                            "nativeSrc": "12846:3:66",
                            "nodeType": "YulTypedName",
                            "src": "12846:3:66",
                            "type": ""
                          },
                          {
                            "name": "value0",
                            "nativeSrc": "12851:6:66",
                            "nodeType": "YulTypedName",
                            "src": "12851:6:66",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "end",
                            "nativeSrc": "12862:3:66",
                            "nodeType": "YulTypedName",
                            "src": "12862:3:66",
                            "type": ""
                          }
                        ],
                        "src": "12549:600:66"
                      },
                      {
                        "body": {
                          "nativeSrc": "13323:214:66",
                          "nodeType": "YulBlock",
                          "src": "13323:214:66",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "13340:9:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "13340:9:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "13351:2:66",
                                    "nodeType": "YulLiteral",
                                    "src": "13351:2:66",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "13333:6:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "13333:6:66"
                                },
                                "nativeSrc": "13333:21:66",
                                "nodeType": "YulFunctionCall",
                                "src": "13333:21:66"
                              },
                              "nativeSrc": "13333:21:66",
                              "nodeType": "YulExpressionStatement",
                              "src": "13333:21:66"
                            },
                            {
                              "nativeSrc": "13363:59:66",
                              "nodeType": "YulVariableDeclaration",
                              "src": "13363:59:66",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nativeSrc": "13395:6:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "13395:6:66"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nativeSrc": "13407:9:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "13407:9:66"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "13418:2:66",
                                        "nodeType": "YulLiteral",
                                        "src": "13418:2:66",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "13403:3:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "13403:3:66"
                                    },
                                    "nativeSrc": "13403:18:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "13403:18:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_encode_string",
                                  "nativeSrc": "13377:17:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "13377:17:66"
                                },
                                "nativeSrc": "13377:45:66",
                                "nodeType": "YulFunctionCall",
                                "src": "13377:45:66"
                              },
                              "variables": [
                                {
                                  "name": "tail_1",
                                  "nativeSrc": "13367:6:66",
                                  "nodeType": "YulTypedName",
                                  "src": "13367:6:66",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nativeSrc": "13442:9:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "13442:9:66"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "13453:2:66",
                                        "nodeType": "YulLiteral",
                                        "src": "13453:2:66",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "13438:3:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "13438:3:66"
                                    },
                                    "nativeSrc": "13438:18:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "13438:18:66"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "tail_1",
                                        "nativeSrc": "13462:6:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "13462:6:66"
                                      },
                                      {
                                        "name": "headStart",
                                        "nativeSrc": "13470:9:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "13470:9:66"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nativeSrc": "13458:3:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "13458:3:66"
                                    },
                                    "nativeSrc": "13458:22:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "13458:22:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "13431:6:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "13431:6:66"
                                },
                                "nativeSrc": "13431:50:66",
                                "nodeType": "YulFunctionCall",
                                "src": "13431:50:66"
                              },
                              "nativeSrc": "13431:50:66",
                              "nodeType": "YulExpressionStatement",
                              "src": "13431:50:66"
                            },
                            {
                              "nativeSrc": "13490:41:66",
                              "nodeType": "YulAssignment",
                              "src": "13490:41:66",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "value1",
                                    "nativeSrc": "13516:6:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "13516:6:66"
                                  },
                                  {
                                    "name": "tail_1",
                                    "nativeSrc": "13524:6:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "13524:6:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_encode_string",
                                  "nativeSrc": "13498:17:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "13498:17:66"
                                },
                                "nativeSrc": "13498:33:66",
                                "nodeType": "YulFunctionCall",
                                "src": "13498:33:66"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nativeSrc": "13490:4:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "13490:4:66"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__fromStack_reversed",
                        "nativeSrc": "13154:383:66",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nativeSrc": "13284:9:66",
                            "nodeType": "YulTypedName",
                            "src": "13284:9:66",
                            "type": ""
                          },
                          {
                            "name": "value1",
                            "nativeSrc": "13295:6:66",
                            "nodeType": "YulTypedName",
                            "src": "13295:6:66",
                            "type": ""
                          },
                          {
                            "name": "value0",
                            "nativeSrc": "13303:6:66",
                            "nodeType": "YulTypedName",
                            "src": "13303:6:66",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nativeSrc": "13314:4:66",
                            "nodeType": "YulTypedName",
                            "src": "13314:4:66",
                            "type": ""
                          }
                        ],
                        "src": "13154:383:66"
                      },
                      {
                        "body": {
                          "nativeSrc": "13574:95:66",
                          "nodeType": "YulBlock",
                          "src": "13574:95:66",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nativeSrc": "13591:1:66",
                                    "nodeType": "YulLiteral",
                                    "src": "13591:1:66",
                                    "type": "",
                                    "value": "0"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nativeSrc": "13598:3:66",
                                        "nodeType": "YulLiteral",
                                        "src": "13598:3:66",
                                        "type": "",
                                        "value": "224"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "13603:10:66",
                                        "nodeType": "YulLiteral",
                                        "src": "13603:10:66",
                                        "type": "",
                                        "value": "0x4e487b71"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nativeSrc": "13594:3:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "13594:3:66"
                                    },
                                    "nativeSrc": "13594:20:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "13594:20:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "13584:6:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "13584:6:66"
                                },
                                "nativeSrc": "13584:31:66",
                                "nodeType": "YulFunctionCall",
                                "src": "13584:31:66"
                              },
                              "nativeSrc": "13584:31:66",
                              "nodeType": "YulExpressionStatement",
                              "src": "13584:31:66"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nativeSrc": "13631:1:66",
                                    "nodeType": "YulLiteral",
                                    "src": "13631:1:66",
                                    "type": "",
                                    "value": "4"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "13634:4:66",
                                    "nodeType": "YulLiteral",
                                    "src": "13634:4:66",
                                    "type": "",
                                    "value": "0x32"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "13624:6:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "13624:6:66"
                                },
                                "nativeSrc": "13624:15:66",
                                "nodeType": "YulFunctionCall",
                                "src": "13624:15:66"
                              },
                              "nativeSrc": "13624:15:66",
                              "nodeType": "YulExpressionStatement",
                              "src": "13624:15:66"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nativeSrc": "13655:1:66",
                                    "nodeType": "YulLiteral",
                                    "src": "13655:1:66",
                                    "type": "",
                                    "value": "0"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "13658:4:66",
                                    "nodeType": "YulLiteral",
                                    "src": "13658:4:66",
                                    "type": "",
                                    "value": "0x24"
                                  }
                                ],
                                "functionName": {
                                  "name": "revert",
                                  "nativeSrc": "13648:6:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "13648:6:66"
                                },
                                "nativeSrc": "13648:15:66",
                                "nodeType": "YulFunctionCall",
                                "src": "13648:15:66"
                              },
                              "nativeSrc": "13648:15:66",
                              "nodeType": "YulExpressionStatement",
                              "src": "13648:15:66"
                            }
                          ]
                        },
                        "name": "panic_error_0x32",
                        "nativeSrc": "13542:127:66",
                        "nodeType": "YulFunctionDefinition",
                        "src": "13542:127:66"
                      },
                      {
                        "body": {
                          "nativeSrc": "13993:273:66",
                          "nodeType": "YulBlock",
                          "src": "13993:273:66",
                          "statements": [
                            {
                              "nativeSrc": "14003:22:66",
                              "nodeType": "YulVariableDeclaration",
                              "src": "14003:22:66",
                              "value": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nativeSrc": "14017:3:66",
                                    "nodeType": "YulLiteral",
                                    "src": "14017:3:66",
                                    "type": "",
                                    "value": "249"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "14022:2:66",
                                    "nodeType": "YulLiteral",
                                    "src": "14022:2:66",
                                    "type": "",
                                    "value": "17"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nativeSrc": "14013:3:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "14013:3:66"
                                },
                                "nativeSrc": "14013:12:66",
                                "nodeType": "YulFunctionCall",
                                "src": "14013:12:66"
                              },
                              "variables": [
                                {
                                  "name": "_1",
                                  "nativeSrc": "14007:2:66",
                                  "nodeType": "YulTypedName",
                                  "src": "14007:2:66",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nativeSrc": "14041:3:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "14041:3:66"
                                  },
                                  {
                                    "name": "_1",
                                    "nativeSrc": "14046:2:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "14046:2:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "14034:6:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "14034:6:66"
                                },
                                "nativeSrc": "14034:15:66",
                                "nodeType": "YulFunctionCall",
                                "src": "14034:15:66"
                              },
                              "nativeSrc": "14034:15:66",
                              "nodeType": "YulExpressionStatement",
                              "src": "14034:15:66"
                            },
                            {
                              "nativeSrc": "14058:27:66",
                              "nodeType": "YulVariableDeclaration",
                              "src": "14058:27:66",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nativeSrc": "14078:6:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "14078:6:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nativeSrc": "14072:5:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "14072:5:66"
                                },
                                "nativeSrc": "14072:13:66",
                                "nodeType": "YulFunctionCall",
                                "src": "14072:13:66"
                              },
                              "variables": [
                                {
                                  "name": "length",
                                  "nativeSrc": "14062:6:66",
                                  "nodeType": "YulTypedName",
                                  "src": "14062:6:66",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value0",
                                        "nativeSrc": "14133:6:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "14133:6:66"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "14141:4:66",
                                        "nodeType": "YulLiteral",
                                        "src": "14141:4:66",
                                        "type": "",
                                        "value": "0x20"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "14129:3:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "14129:3:66"
                                    },
                                    "nativeSrc": "14129:17:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "14129:17:66"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "pos",
                                        "nativeSrc": "14152:3:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "14152:3:66"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "14157:1:66",
                                        "nodeType": "YulLiteral",
                                        "src": "14157:1:66",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "14148:3:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "14148:3:66"
                                    },
                                    "nativeSrc": "14148:11:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "14148:11:66"
                                  },
                                  {
                                    "name": "length",
                                    "nativeSrc": "14161:6:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "14161:6:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "copy_memory_to_memory_with_cleanup",
                                  "nativeSrc": "14094:34:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "14094:34:66"
                                },
                                "nativeSrc": "14094:74:66",
                                "nodeType": "YulFunctionCall",
                                "src": "14094:74:66"
                              },
                              "nativeSrc": "14094:74:66",
                              "nodeType": "YulExpressionStatement",
                              "src": "14094:74:66"
                            },
                            {
                              "nativeSrc": "14177:26:66",
                              "nodeType": "YulVariableDeclaration",
                              "src": "14177:26:66",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nativeSrc": "14191:3:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "14191:3:66"
                                  },
                                  {
                                    "name": "length",
                                    "nativeSrc": "14196:6:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "14196:6:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "14187:3:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "14187:3:66"
                                },
                                "nativeSrc": "14187:16:66",
                                "nodeType": "YulFunctionCall",
                                "src": "14187:16:66"
                              },
                              "variables": [
                                {
                                  "name": "_2",
                                  "nativeSrc": "14181:2:66",
                                  "nodeType": "YulTypedName",
                                  "src": "14181:2:66",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "_2",
                                        "nativeSrc": "14223:2:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "14223:2:66"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "14227:1:66",
                                        "nodeType": "YulLiteral",
                                        "src": "14227:1:66",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "14219:3:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "14219:3:66"
                                    },
                                    "nativeSrc": "14219:10:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "14219:10:66"
                                  },
                                  {
                                    "name": "_1",
                                    "nativeSrc": "14231:2:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "14231:2:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "14212:6:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "14212:6:66"
                                },
                                "nativeSrc": "14212:22:66",
                                "nodeType": "YulFunctionCall",
                                "src": "14212:22:66"
                              },
                              "nativeSrc": "14212:22:66",
                              "nodeType": "YulExpressionStatement",
                              "src": "14212:22:66"
                            },
                            {
                              "nativeSrc": "14243:17:66",
                              "nodeType": "YulAssignment",
                              "src": "14243:17:66",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "_2",
                                    "nativeSrc": "14254:2:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "14254:2:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "14258:1:66",
                                    "nodeType": "YulLiteral",
                                    "src": "14258:1:66",
                                    "type": "",
                                    "value": "2"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "14250:3:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "14250:3:66"
                                },
                                "nativeSrc": "14250:10:66",
                                "nodeType": "YulFunctionCall",
                                "src": "14250:10:66"
                              },
                              "variableNames": [
                                {
                                  "name": "end",
                                  "nativeSrc": "14243:3:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "14243:3:66"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_packed_t_stringliteral_6e9f33448a4153023cdaf3eb759f1afdc24aba433a3e18b683f8c04a6eaa69f0_t_string_memory_ptr_t_stringliteral_6e9f33448a4153023cdaf3eb759f1afdc24aba433a3e18b683f8c04a6eaa69f0__to_t_bytes1_t_string_memory_ptr_t_bytes1__nonPadded_inplace_fromStack_reversed",
                        "nativeSrc": "13674:592:66",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "pos",
                            "nativeSrc": "13969:3:66",
                            "nodeType": "YulTypedName",
                            "src": "13969:3:66",
                            "type": ""
                          },
                          {
                            "name": "value0",
                            "nativeSrc": "13974:6:66",
                            "nodeType": "YulTypedName",
                            "src": "13974:6:66",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "end",
                            "nativeSrc": "13985:3:66",
                            "nodeType": "YulTypedName",
                            "src": "13985:3:66",
                            "type": ""
                          }
                        ],
                        "src": "13674:592:66"
                      },
                      {
                        "body": {
                          "nativeSrc": "14501:223:66",
                          "nodeType": "YulBlock",
                          "src": "14501:223:66",
                          "statements": [
                            {
                              "nativeSrc": "14511:27:66",
                              "nodeType": "YulVariableDeclaration",
                              "src": "14511:27:66",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nativeSrc": "14531:6:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "14531:6:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nativeSrc": "14525:5:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "14525:5:66"
                                },
                                "nativeSrc": "14525:13:66",
                                "nodeType": "YulFunctionCall",
                                "src": "14525:13:66"
                              },
                              "variables": [
                                {
                                  "name": "length",
                                  "nativeSrc": "14515:6:66",
                                  "nodeType": "YulTypedName",
                                  "src": "14515:6:66",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value0",
                                        "nativeSrc": "14586:6:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "14586:6:66"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "14594:4:66",
                                        "nodeType": "YulLiteral",
                                        "src": "14594:4:66",
                                        "type": "",
                                        "value": "0x20"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "14582:3:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "14582:3:66"
                                    },
                                    "nativeSrc": "14582:17:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "14582:17:66"
                                  },
                                  {
                                    "name": "pos",
                                    "nativeSrc": "14601:3:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "14601:3:66"
                                  },
                                  {
                                    "name": "length",
                                    "nativeSrc": "14606:6:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "14606:6:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "copy_memory_to_memory_with_cleanup",
                                  "nativeSrc": "14547:34:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "14547:34:66"
                                },
                                "nativeSrc": "14547:66:66",
                                "nodeType": "YulFunctionCall",
                                "src": "14547:66:66"
                              },
                              "nativeSrc": "14547:66:66",
                              "nodeType": "YulExpressionStatement",
                              "src": "14547:66:66"
                            },
                            {
                              "nativeSrc": "14622:29:66",
                              "nodeType": "YulVariableDeclaration",
                              "src": "14622:29:66",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nativeSrc": "14639:3:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "14639:3:66"
                                  },
                                  {
                                    "name": "length",
                                    "nativeSrc": "14644:6:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "14644:6:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "14635:3:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "14635:3:66"
                                },
                                "nativeSrc": "14635:16:66",
                                "nodeType": "YulFunctionCall",
                                "src": "14635:16:66"
                              },
                              "variables": [
                                {
                                  "name": "end_1",
                                  "nativeSrc": "14626:5:66",
                                  "nodeType": "YulTypedName",
                                  "src": "14626:5:66",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "end_1",
                                    "nativeSrc": "14667:5:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "14667:5:66"
                                  },
                                  {
                                    "hexValue": "2f6275696c642d696e666f",
                                    "kind": "string",
                                    "nativeSrc": "14674:13:66",
                                    "nodeType": "YulLiteral",
                                    "src": "14674:13:66",
                                    "type": "",
                                    "value": "/build-info"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "14660:6:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "14660:6:66"
                                },
                                "nativeSrc": "14660:28:66",
                                "nodeType": "YulFunctionCall",
                                "src": "14660:28:66"
                              },
                              "nativeSrc": "14660:28:66",
                              "nodeType": "YulExpressionStatement",
                              "src": "14660:28:66"
                            },
                            {
                              "nativeSrc": "14697:21:66",
                              "nodeType": "YulAssignment",
                              "src": "14697:21:66",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "end_1",
                                    "nativeSrc": "14708:5:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "14708:5:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "14715:2:66",
                                    "nodeType": "YulLiteral",
                                    "src": "14715:2:66",
                                    "type": "",
                                    "value": "11"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "14704:3:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "14704:3:66"
                                },
                                "nativeSrc": "14704:14:66",
                                "nodeType": "YulFunctionCall",
                                "src": "14704:14:66"
                              },
                              "variableNames": [
                                {
                                  "name": "end",
                                  "nativeSrc": "14697:3:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "14697:3:66"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_packed_t_string_memory_ptr_t_stringliteral_69ae65ff9142d8f87b3884b153358f78dcd4f6339bb046b9a6d16c966fa813af__to_t_string_memory_ptr_t_bytes11__nonPadded_inplace_fromStack_reversed",
                        "nativeSrc": "14271:453:66",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "pos",
                            "nativeSrc": "14477:3:66",
                            "nodeType": "YulTypedName",
                            "src": "14477:3:66",
                            "type": ""
                          },
                          {
                            "name": "value0",
                            "nativeSrc": "14482:6:66",
                            "nodeType": "YulTypedName",
                            "src": "14482:6:66",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "end",
                            "nativeSrc": "14493:3:66",
                            "nodeType": "YulTypedName",
                            "src": "14493:3:66",
                            "type": ""
                          }
                        ],
                        "src": "14271:453:66"
                      },
                      {
                        "body": {
                          "nativeSrc": "14969:331:66",
                          "nodeType": "YulBlock",
                          "src": "14969:331:66",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nativeSrc": "14986:3:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "14986:3:66"
                                  },
                                  {
                                    "hexValue": "436f756c64206e6f742066696e64206275696c642d696e666f2066696c652077",
                                    "kind": "string",
                                    "nativeSrc": "14991:34:66",
                                    "nodeType": "YulLiteral",
                                    "src": "14991:34:66",
                                    "type": "",
                                    "value": "Could not find build-info file w"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "14979:6:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "14979:6:66"
                                },
                                "nativeSrc": "14979:47:66",
                                "nodeType": "YulFunctionCall",
                                "src": "14979:47:66"
                              },
                              "nativeSrc": "14979:47:66",
                              "nodeType": "YulExpressionStatement",
                              "src": "14979:47:66"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "pos",
                                        "nativeSrc": "15046:3:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "15046:3:66"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "15051:2:66",
                                        "nodeType": "YulLiteral",
                                        "src": "15051:2:66",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "15042:3:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "15042:3:66"
                                    },
                                    "nativeSrc": "15042:12:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "15042:12:66"
                                  },
                                  {
                                    "hexValue": "697468206d61746368696e6720736f7572636520636f6465206861736820666f",
                                    "kind": "string",
                                    "nativeSrc": "15056:34:66",
                                    "nodeType": "YulLiteral",
                                    "src": "15056:34:66",
                                    "type": "",
                                    "value": "ith matching source code hash fo"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "15035:6:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "15035:6:66"
                                },
                                "nativeSrc": "15035:56:66",
                                "nodeType": "YulFunctionCall",
                                "src": "15035:56:66"
                              },
                              "nativeSrc": "15035:56:66",
                              "nodeType": "YulExpressionStatement",
                              "src": "15035:56:66"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "pos",
                                        "nativeSrc": "15111:3:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "15111:3:66"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "15116:2:66",
                                        "nodeType": "YulLiteral",
                                        "src": "15116:2:66",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "15107:3:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "15107:3:66"
                                    },
                                    "nativeSrc": "15107:12:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "15107:12:66"
                                  },
                                  {
                                    "hexValue": "7220636f6e747261637420",
                                    "kind": "string",
                                    "nativeSrc": "15121:13:66",
                                    "nodeType": "YulLiteral",
                                    "src": "15121:13:66",
                                    "type": "",
                                    "value": "r contract "
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "15100:6:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "15100:6:66"
                                },
                                "nativeSrc": "15100:35:66",
                                "nodeType": "YulFunctionCall",
                                "src": "15100:35:66"
                              },
                              "nativeSrc": "15100:35:66",
                              "nodeType": "YulExpressionStatement",
                              "src": "15100:35:66"
                            },
                            {
                              "nativeSrc": "15144:27:66",
                              "nodeType": "YulVariableDeclaration",
                              "src": "15144:27:66",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nativeSrc": "15164:6:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "15164:6:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nativeSrc": "15158:5:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "15158:5:66"
                                },
                                "nativeSrc": "15158:13:66",
                                "nodeType": "YulFunctionCall",
                                "src": "15158:13:66"
                              },
                              "variables": [
                                {
                                  "name": "length",
                                  "nativeSrc": "15148:6:66",
                                  "nodeType": "YulTypedName",
                                  "src": "15148:6:66",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value0",
                                        "nativeSrc": "15219:6:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "15219:6:66"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "15227:2:66",
                                        "nodeType": "YulLiteral",
                                        "src": "15227:2:66",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "15215:3:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "15215:3:66"
                                    },
                                    "nativeSrc": "15215:15:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "15215:15:66"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "pos",
                                        "nativeSrc": "15236:3:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "15236:3:66"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "15241:2:66",
                                        "nodeType": "YulLiteral",
                                        "src": "15241:2:66",
                                        "type": "",
                                        "value": "75"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "15232:3:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "15232:3:66"
                                    },
                                    "nativeSrc": "15232:12:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "15232:12:66"
                                  },
                                  {
                                    "name": "length",
                                    "nativeSrc": "15246:6:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "15246:6:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "copy_memory_to_memory_with_cleanup",
                                  "nativeSrc": "15180:34:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "15180:34:66"
                                },
                                "nativeSrc": "15180:73:66",
                                "nodeType": "YulFunctionCall",
                                "src": "15180:73:66"
                              },
                              "nativeSrc": "15180:73:66",
                              "nodeType": "YulExpressionStatement",
                              "src": "15180:73:66"
                            },
                            {
                              "nativeSrc": "15262:32:66",
                              "nodeType": "YulAssignment",
                              "src": "15262:32:66",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "pos",
                                        "nativeSrc": "15277:3:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "15277:3:66"
                                      },
                                      {
                                        "name": "length",
                                        "nativeSrc": "15282:6:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "15282:6:66"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "15273:3:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "15273:3:66"
                                    },
                                    "nativeSrc": "15273:16:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "15273:16:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "15291:2:66",
                                    "nodeType": "YulLiteral",
                                    "src": "15291:2:66",
                                    "type": "",
                                    "value": "75"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "15269:3:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "15269:3:66"
                                },
                                "nativeSrc": "15269:25:66",
                                "nodeType": "YulFunctionCall",
                                "src": "15269:25:66"
                              },
                              "variableNames": [
                                {
                                  "name": "end",
                                  "nativeSrc": "15262:3:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "15262:3:66"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_packed_t_stringliteral_97996f6d547fd3154e3c44156fcd12ba2952d6646db5187f6bd117ff435085a8_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed",
                        "nativeSrc": "14729:571:66",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "pos",
                            "nativeSrc": "14945:3:66",
                            "nodeType": "YulTypedName",
                            "src": "14945:3:66",
                            "type": ""
                          },
                          {
                            "name": "value0",
                            "nativeSrc": "14950:6:66",
                            "nodeType": "YulTypedName",
                            "src": "14950:6:66",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "end",
                            "nativeSrc": "14961:3:66",
                            "nodeType": "YulTypedName",
                            "src": "14961:3:66",
                            "type": ""
                          }
                        ],
                        "src": "14729:571:66"
                      },
                      {
                        "body": {
                          "nativeSrc": "15337:95:66",
                          "nodeType": "YulBlock",
                          "src": "15337:95:66",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nativeSrc": "15354:1:66",
                                    "nodeType": "YulLiteral",
                                    "src": "15354:1:66",
                                    "type": "",
                                    "value": "0"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nativeSrc": "15361:3:66",
                                        "nodeType": "YulLiteral",
                                        "src": "15361:3:66",
                                        "type": "",
                                        "value": "224"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "15366:10:66",
                                        "nodeType": "YulLiteral",
                                        "src": "15366:10:66",
                                        "type": "",
                                        "value": "0x4e487b71"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nativeSrc": "15357:3:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "15357:3:66"
                                    },
                                    "nativeSrc": "15357:20:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "15357:20:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "15347:6:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "15347:6:66"
                                },
                                "nativeSrc": "15347:31:66",
                                "nodeType": "YulFunctionCall",
                                "src": "15347:31:66"
                              },
                              "nativeSrc": "15347:31:66",
                              "nodeType": "YulExpressionStatement",
                              "src": "15347:31:66"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nativeSrc": "15394:1:66",
                                    "nodeType": "YulLiteral",
                                    "src": "15394:1:66",
                                    "type": "",
                                    "value": "4"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "15397:4:66",
                                    "nodeType": "YulLiteral",
                                    "src": "15397:4:66",
                                    "type": "",
                                    "value": "0x11"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "15387:6:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "15387:6:66"
                                },
                                "nativeSrc": "15387:15:66",
                                "nodeType": "YulFunctionCall",
                                "src": "15387:15:66"
                              },
                              "nativeSrc": "15387:15:66",
                              "nodeType": "YulExpressionStatement",
                              "src": "15387:15:66"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nativeSrc": "15418:1:66",
                                    "nodeType": "YulLiteral",
                                    "src": "15418:1:66",
                                    "type": "",
                                    "value": "0"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "15421:4:66",
                                    "nodeType": "YulLiteral",
                                    "src": "15421:4:66",
                                    "type": "",
                                    "value": "0x24"
                                  }
                                ],
                                "functionName": {
                                  "name": "revert",
                                  "nativeSrc": "15411:6:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "15411:6:66"
                                },
                                "nativeSrc": "15411:15:66",
                                "nodeType": "YulFunctionCall",
                                "src": "15411:15:66"
                              },
                              "nativeSrc": "15411:15:66",
                              "nodeType": "YulExpressionStatement",
                              "src": "15411:15:66"
                            }
                          ]
                        },
                        "name": "panic_error_0x11",
                        "nativeSrc": "15305:127:66",
                        "nodeType": "YulFunctionDefinition",
                        "src": "15305:127:66"
                      },
                      {
                        "body": {
                          "nativeSrc": "15482:130:66",
                          "nodeType": "YulBlock",
                          "src": "15482:130:66",
                          "statements": [
                            {
                              "nativeSrc": "15492:31:66",
                              "nodeType": "YulVariableDeclaration",
                              "src": "15492:31:66",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nativeSrc": "15511:5:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "15511:5:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "15518:4:66",
                                    "nodeType": "YulLiteral",
                                    "src": "15518:4:66",
                                    "type": "",
                                    "value": "0xff"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nativeSrc": "15507:3:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "15507:3:66"
                                },
                                "nativeSrc": "15507:16:66",
                                "nodeType": "YulFunctionCall",
                                "src": "15507:16:66"
                              },
                              "variables": [
                                {
                                  "name": "value_1",
                                  "nativeSrc": "15496:7:66",
                                  "nodeType": "YulTypedName",
                                  "src": "15496:7:66",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "body": {
                                "nativeSrc": "15553:22:66",
                                "nodeType": "YulBlock",
                                "src": "15553:22:66",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [],
                                      "functionName": {
                                        "name": "panic_error_0x11",
                                        "nativeSrc": "15555:16:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "15555:16:66"
                                      },
                                      "nativeSrc": "15555:18:66",
                                      "nodeType": "YulFunctionCall",
                                      "src": "15555:18:66"
                                    },
                                    "nativeSrc": "15555:18:66",
                                    "nodeType": "YulExpressionStatement",
                                    "src": "15555:18:66"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "name": "value_1",
                                    "nativeSrc": "15538:7:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "15538:7:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "15547:4:66",
                                    "nodeType": "YulLiteral",
                                    "src": "15547:4:66",
                                    "type": "",
                                    "value": "0xff"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nativeSrc": "15535:2:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "15535:2:66"
                                },
                                "nativeSrc": "15535:17:66",
                                "nodeType": "YulFunctionCall",
                                "src": "15535:17:66"
                              },
                              "nativeSrc": "15532:43:66",
                              "nodeType": "YulIf",
                              "src": "15532:43:66"
                            },
                            {
                              "nativeSrc": "15584:22:66",
                              "nodeType": "YulAssignment",
                              "src": "15584:22:66",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "value_1",
                                    "nativeSrc": "15595:7:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "15595:7:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "15604:1:66",
                                    "nodeType": "YulLiteral",
                                    "src": "15604:1:66",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "15591:3:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "15591:3:66"
                                },
                                "nativeSrc": "15591:15:66",
                                "nodeType": "YulFunctionCall",
                                "src": "15591:15:66"
                              },
                              "variableNames": [
                                {
                                  "name": "ret",
                                  "nativeSrc": "15584:3:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "15584:3:66"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "increment_t_uint8",
                        "nativeSrc": "15437:175:66",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "value",
                            "nativeSrc": "15464:5:66",
                            "nodeType": "YulTypedName",
                            "src": "15464:5:66",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "ret",
                            "nativeSrc": "15474:3:66",
                            "nodeType": "YulTypedName",
                            "src": "15474:3:66",
                            "type": ""
                          }
                        ],
                        "src": "15437:175:66"
                      },
                      {
                        "body": {
                          "nativeSrc": "15857:264:66",
                          "nodeType": "YulBlock",
                          "src": "15857:264:66",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nativeSrc": "15874:3:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "15874:3:66"
                                  },
                                  {
                                    "hexValue": "406f70656e7a657070656c696e2f646566656e6465722d6465706c6f792d636c",
                                    "kind": "string",
                                    "nativeSrc": "15879:34:66",
                                    "nodeType": "YulLiteral",
                                    "src": "15879:34:66",
                                    "type": "",
                                    "value": "@openzeppelin/defender-deploy-cl"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "15867:6:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "15867:6:66"
                                },
                                "nativeSrc": "15867:47:66",
                                "nodeType": "YulFunctionCall",
                                "src": "15867:47:66"
                              },
                              "nativeSrc": "15867:47:66",
                              "nodeType": "YulExpressionStatement",
                              "src": "15867:47:66"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "pos",
                                        "nativeSrc": "15934:3:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "15934:3:66"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "15939:2:66",
                                        "nodeType": "YulLiteral",
                                        "src": "15939:2:66",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "15930:3:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "15930:3:66"
                                    },
                                    "nativeSrc": "15930:12:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "15930:12:66"
                                  },
                                  {
                                    "hexValue": "69656e742d636c6940",
                                    "kind": "string",
                                    "nativeSrc": "15944:11:66",
                                    "nodeType": "YulLiteral",
                                    "src": "15944:11:66",
                                    "type": "",
                                    "value": "ient-cli@"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "15923:6:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "15923:6:66"
                                },
                                "nativeSrc": "15923:33:66",
                                "nodeType": "YulFunctionCall",
                                "src": "15923:33:66"
                              },
                              "nativeSrc": "15923:33:66",
                              "nodeType": "YulExpressionStatement",
                              "src": "15923:33:66"
                            },
                            {
                              "nativeSrc": "15965:27:66",
                              "nodeType": "YulVariableDeclaration",
                              "src": "15965:27:66",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nativeSrc": "15985:6:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "15985:6:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nativeSrc": "15979:5:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "15979:5:66"
                                },
                                "nativeSrc": "15979:13:66",
                                "nodeType": "YulFunctionCall",
                                "src": "15979:13:66"
                              },
                              "variables": [
                                {
                                  "name": "length",
                                  "nativeSrc": "15969:6:66",
                                  "nodeType": "YulTypedName",
                                  "src": "15969:6:66",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value0",
                                        "nativeSrc": "16040:6:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "16040:6:66"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "16048:2:66",
                                        "nodeType": "YulLiteral",
                                        "src": "16048:2:66",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "16036:3:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "16036:3:66"
                                    },
                                    "nativeSrc": "16036:15:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "16036:15:66"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "pos",
                                        "nativeSrc": "16057:3:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "16057:3:66"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "16062:2:66",
                                        "nodeType": "YulLiteral",
                                        "src": "16062:2:66",
                                        "type": "",
                                        "value": "41"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "16053:3:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "16053:3:66"
                                    },
                                    "nativeSrc": "16053:12:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "16053:12:66"
                                  },
                                  {
                                    "name": "length",
                                    "nativeSrc": "16067:6:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "16067:6:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "copy_memory_to_memory_with_cleanup",
                                  "nativeSrc": "16001:34:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "16001:34:66"
                                },
                                "nativeSrc": "16001:73:66",
                                "nodeType": "YulFunctionCall",
                                "src": "16001:73:66"
                              },
                              "nativeSrc": "16001:73:66",
                              "nodeType": "YulExpressionStatement",
                              "src": "16001:73:66"
                            },
                            {
                              "nativeSrc": "16083:32:66",
                              "nodeType": "YulAssignment",
                              "src": "16083:32:66",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "pos",
                                        "nativeSrc": "16098:3:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "16098:3:66"
                                      },
                                      {
                                        "name": "length",
                                        "nativeSrc": "16103:6:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "16103:6:66"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "16094:3:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "16094:3:66"
                                    },
                                    "nativeSrc": "16094:16:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "16094:16:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "16112:2:66",
                                    "nodeType": "YulLiteral",
                                    "src": "16112:2:66",
                                    "type": "",
                                    "value": "41"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "16090:3:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "16090:3:66"
                                },
                                "nativeSrc": "16090:25:66",
                                "nodeType": "YulFunctionCall",
                                "src": "16090:25:66"
                              },
                              "variableNames": [
                                {
                                  "name": "end",
                                  "nativeSrc": "16083:3:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "16083:3:66"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_packed_t_stringliteral_911dd02035025c2cb695e87f546c8657a33a4f437472b320b67efab6662a5c76_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed",
                        "nativeSrc": "15617:504:66",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "pos",
                            "nativeSrc": "15833:3:66",
                            "nodeType": "YulTypedName",
                            "src": "15833:3:66",
                            "type": ""
                          },
                          {
                            "name": "value0",
                            "nativeSrc": "15838:6:66",
                            "nodeType": "YulTypedName",
                            "src": "15838:6:66",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "end",
                            "nativeSrc": "15849:3:66",
                            "nodeType": "YulTypedName",
                            "src": "15849:3:66",
                            "type": ""
                          }
                        ],
                        "src": "15617:504:66"
                      },
                      {
                        "body": {
                          "nativeSrc": "16245:99:66",
                          "nodeType": "YulBlock",
                          "src": "16245:99:66",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "16262:9:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "16262:9:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "16273:2:66",
                                    "nodeType": "YulLiteral",
                                    "src": "16273:2:66",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "16255:6:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "16255:6:66"
                                },
                                "nativeSrc": "16255:21:66",
                                "nodeType": "YulFunctionCall",
                                "src": "16255:21:66"
                              },
                              "nativeSrc": "16255:21:66",
                              "nodeType": "YulExpressionStatement",
                              "src": "16255:21:66"
                            },
                            {
                              "nativeSrc": "16285:53:66",
                              "nodeType": "YulAssignment",
                              "src": "16285:53:66",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nativeSrc": "16311:6:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "16311:6:66"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nativeSrc": "16323:9:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "16323:9:66"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "16334:2:66",
                                        "nodeType": "YulLiteral",
                                        "src": "16334:2:66",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "16319:3:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "16319:3:66"
                                    },
                                    "nativeSrc": "16319:18:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "16319:18:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_encode_string",
                                  "nativeSrc": "16293:17:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "16293:17:66"
                                },
                                "nativeSrc": "16293:45:66",
                                "nodeType": "YulFunctionCall",
                                "src": "16293:45:66"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nativeSrc": "16285:4:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "16285:4:66"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_bytes_memory_ptr__to_t_bytes_memory_ptr__fromStack_reversed",
                        "nativeSrc": "16126:218:66",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nativeSrc": "16214:9:66",
                            "nodeType": "YulTypedName",
                            "src": "16214:9:66",
                            "type": ""
                          },
                          {
                            "name": "value0",
                            "nativeSrc": "16225:6:66",
                            "nodeType": "YulTypedName",
                            "src": "16225:6:66",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nativeSrc": "16236:4:66",
                            "nodeType": "YulTypedName",
                            "src": "16236:4:66",
                            "type": ""
                          }
                        ],
                        "src": "16126:218:66"
                      },
                      {
                        "body": {
                          "nativeSrc": "16450:76:66",
                          "nodeType": "YulBlock",
                          "src": "16450:76:66",
                          "statements": [
                            {
                              "nativeSrc": "16460:26:66",
                              "nodeType": "YulAssignment",
                              "src": "16460:26:66",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "16472:9:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "16472:9:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "16483:2:66",
                                    "nodeType": "YulLiteral",
                                    "src": "16483:2:66",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "16468:3:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "16468:3:66"
                                },
                                "nativeSrc": "16468:18:66",
                                "nodeType": "YulFunctionCall",
                                "src": "16468:18:66"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nativeSrc": "16460:4:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "16460:4:66"
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "16502:9:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "16502:9:66"
                                  },
                                  {
                                    "name": "value0",
                                    "nativeSrc": "16513:6:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "16513:6:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "16495:6:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "16495:6:66"
                                },
                                "nativeSrc": "16495:25:66",
                                "nodeType": "YulFunctionCall",
                                "src": "16495:25:66"
                              },
                              "nativeSrc": "16495:25:66",
                              "nodeType": "YulExpressionStatement",
                              "src": "16495:25:66"
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed",
                        "nativeSrc": "16349:177:66",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nativeSrc": "16419:9:66",
                            "nodeType": "YulTypedName",
                            "src": "16419:9:66",
                            "type": ""
                          },
                          {
                            "name": "value0",
                            "nativeSrc": "16430:6:66",
                            "nodeType": "YulTypedName",
                            "src": "16430:6:66",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nativeSrc": "16441:4:66",
                            "nodeType": "YulTypedName",
                            "src": "16441:4:66",
                            "type": ""
                          }
                        ],
                        "src": "16349:177:66"
                      },
                      {
                        "body": {
                          "nativeSrc": "16753:242:66",
                          "nodeType": "YulBlock",
                          "src": "16753:242:66",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "16770:9:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "16770:9:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "16781:2:66",
                                    "nodeType": "YulLiteral",
                                    "src": "16781:2:66",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "16763:6:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "16763:6:66"
                                },
                                "nativeSrc": "16763:21:66",
                                "nodeType": "YulFunctionCall",
                                "src": "16763:21:66"
                              },
                              "nativeSrc": "16763:21:66",
                              "nodeType": "YulExpressionStatement",
                              "src": "16763:21:66"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nativeSrc": "16804:9:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "16804:9:66"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "16815:2:66",
                                        "nodeType": "YulLiteral",
                                        "src": "16815:2:66",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "16800:3:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "16800:3:66"
                                    },
                                    "nativeSrc": "16800:18:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "16800:18:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "16820:2:66",
                                    "nodeType": "YulLiteral",
                                    "src": "16820:2:66",
                                    "type": "",
                                    "value": "22"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "16793:6:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "16793:6:66"
                                },
                                "nativeSrc": "16793:30:66",
                                "nodeType": "YulFunctionCall",
                                "src": "16793:30:66"
                              },
                              "nativeSrc": "16793:30:66",
                              "nodeType": "YulExpressionStatement",
                              "src": "16793:30:66"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nativeSrc": "16843:9:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "16843:9:66"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "16854:2:66",
                                        "nodeType": "YulLiteral",
                                        "src": "16854:2:66",
                                        "type": "",
                                        "value": "96"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "16839:3:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "16839:3:66"
                                    },
                                    "nativeSrc": "16839:18:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "16839:18:66"
                                  },
                                  {
                                    "hexValue": "4f50454e5a455050454c494e5f424153485f50415448",
                                    "kind": "string",
                                    "nativeSrc": "16859:24:66",
                                    "nodeType": "YulLiteral",
                                    "src": "16859:24:66",
                                    "type": "",
                                    "value": "OPENZEPPELIN_BASH_PATH"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "16832:6:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "16832:6:66"
                                },
                                "nativeSrc": "16832:52:66",
                                "nodeType": "YulFunctionCall",
                                "src": "16832:52:66"
                              },
                              "nativeSrc": "16832:52:66",
                              "nodeType": "YulExpressionStatement",
                              "src": "16832:52:66"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nativeSrc": "16904:9:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "16904:9:66"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "16915:4:66",
                                        "nodeType": "YulLiteral",
                                        "src": "16915:4:66",
                                        "type": "",
                                        "value": "0x20"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "16900:3:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "16900:3:66"
                                    },
                                    "nativeSrc": "16900:20:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "16900:20:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "16922:3:66",
                                    "nodeType": "YulLiteral",
                                    "src": "16922:3:66",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "16893:6:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "16893:6:66"
                                },
                                "nativeSrc": "16893:33:66",
                                "nodeType": "YulFunctionCall",
                                "src": "16893:33:66"
                              },
                              "nativeSrc": "16893:33:66",
                              "nodeType": "YulExpressionStatement",
                              "src": "16893:33:66"
                            },
                            {
                              "nativeSrc": "16935:54:66",
                              "nodeType": "YulAssignment",
                              "src": "16935:54:66",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nativeSrc": "16961:6:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "16961:6:66"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nativeSrc": "16973:9:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "16973:9:66"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "16984:3:66",
                                        "nodeType": "YulLiteral",
                                        "src": "16984:3:66",
                                        "type": "",
                                        "value": "128"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "16969:3:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "16969:3:66"
                                    },
                                    "nativeSrc": "16969:19:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "16969:19:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_encode_string",
                                  "nativeSrc": "16943:17:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "16943:17:66"
                                },
                                "nativeSrc": "16943:46:66",
                                "nodeType": "YulFunctionCall",
                                "src": "16943:46:66"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nativeSrc": "16935:4:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "16935:4:66"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_stringliteral_524873d67beb7637903c52887510c8a7ea71785147c24441a8c36e6df12a4c44_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__fromStack_reversed",
                        "nativeSrc": "16531:464:66",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nativeSrc": "16722:9:66",
                            "nodeType": "YulTypedName",
                            "src": "16722:9:66",
                            "type": ""
                          },
                          {
                            "name": "value0",
                            "nativeSrc": "16733:6:66",
                            "nodeType": "YulTypedName",
                            "src": "16733:6:66",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nativeSrc": "16744:4:66",
                            "nodeType": "YulTypedName",
                            "src": "16744:4:66",
                            "type": ""
                          }
                        ],
                        "src": "16531:464:66"
                      },
                      {
                        "body": {
                          "nativeSrc": "17171:632:66",
                          "nodeType": "YulBlock",
                          "src": "17171:632:66",
                          "statements": [
                            {
                              "nativeSrc": "17181:12:66",
                              "nodeType": "YulVariableDeclaration",
                              "src": "17181:12:66",
                              "value": {
                                "kind": "number",
                                "nativeSrc": "17191:2:66",
                                "nodeType": "YulLiteral",
                                "src": "17191:2:66",
                                "type": "",
                                "value": "32"
                              },
                              "variables": [
                                {
                                  "name": "_1",
                                  "nativeSrc": "17185:2:66",
                                  "nodeType": "YulTypedName",
                                  "src": "17185:2:66",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nativeSrc": "17202:32:66",
                              "nodeType": "YulVariableDeclaration",
                              "src": "17202:32:66",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "17220:9:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "17220:9:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "17231:2:66",
                                    "nodeType": "YulLiteral",
                                    "src": "17231:2:66",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "17216:3:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "17216:3:66"
                                },
                                "nativeSrc": "17216:18:66",
                                "nodeType": "YulFunctionCall",
                                "src": "17216:18:66"
                              },
                              "variables": [
                                {
                                  "name": "tail_1",
                                  "nativeSrc": "17206:6:66",
                                  "nodeType": "YulTypedName",
                                  "src": "17206:6:66",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "17250:9:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "17250:9:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "17261:2:66",
                                    "nodeType": "YulLiteral",
                                    "src": "17261:2:66",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "17243:6:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "17243:6:66"
                                },
                                "nativeSrc": "17243:21:66",
                                "nodeType": "YulFunctionCall",
                                "src": "17243:21:66"
                              },
                              "nativeSrc": "17243:21:66",
                              "nodeType": "YulExpressionStatement",
                              "src": "17243:21:66"
                            },
                            {
                              "nativeSrc": "17273:17:66",
                              "nodeType": "YulVariableDeclaration",
                              "src": "17273:17:66",
                              "value": {
                                "name": "tail_1",
                                "nativeSrc": "17284:6:66",
                                "nodeType": "YulIdentifier",
                                "src": "17284:6:66"
                              },
                              "variables": [
                                {
                                  "name": "pos",
                                  "nativeSrc": "17277:3:66",
                                  "nodeType": "YulTypedName",
                                  "src": "17277:3:66",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nativeSrc": "17299:27:66",
                              "nodeType": "YulVariableDeclaration",
                              "src": "17299:27:66",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nativeSrc": "17319:6:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "17319:6:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nativeSrc": "17313:5:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "17313:5:66"
                                },
                                "nativeSrc": "17313:13:66",
                                "nodeType": "YulFunctionCall",
                                "src": "17313:13:66"
                              },
                              "variables": [
                                {
                                  "name": "length",
                                  "nativeSrc": "17303:6:66",
                                  "nodeType": "YulTypedName",
                                  "src": "17303:6:66",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "tail_1",
                                    "nativeSrc": "17342:6:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "17342:6:66"
                                  },
                                  {
                                    "name": "length",
                                    "nativeSrc": "17350:6:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "17350:6:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "17335:6:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "17335:6:66"
                                },
                                "nativeSrc": "17335:22:66",
                                "nodeType": "YulFunctionCall",
                                "src": "17335:22:66"
                              },
                              "nativeSrc": "17335:22:66",
                              "nodeType": "YulExpressionStatement",
                              "src": "17335:22:66"
                            },
                            {
                              "nativeSrc": "17366:25:66",
                              "nodeType": "YulAssignment",
                              "src": "17366:25:66",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "17377:9:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "17377:9:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "17388:2:66",
                                    "nodeType": "YulLiteral",
                                    "src": "17388:2:66",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "17373:3:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "17373:3:66"
                                },
                                "nativeSrc": "17373:18:66",
                                "nodeType": "YulFunctionCall",
                                "src": "17373:18:66"
                              },
                              "variableNames": [
                                {
                                  "name": "pos",
                                  "nativeSrc": "17366:3:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "17366:3:66"
                                }
                              ]
                            },
                            {
                              "nativeSrc": "17400:53:66",
                              "nodeType": "YulVariableDeclaration",
                              "src": "17400:53:66",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nativeSrc": "17422:9:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "17422:9:66"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nativeSrc": "17437:1:66",
                                            "nodeType": "YulLiteral",
                                            "src": "17437:1:66",
                                            "type": "",
                                            "value": "5"
                                          },
                                          {
                                            "name": "length",
                                            "nativeSrc": "17440:6:66",
                                            "nodeType": "YulIdentifier",
                                            "src": "17440:6:66"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shl",
                                          "nativeSrc": "17433:3:66",
                                          "nodeType": "YulIdentifier",
                                          "src": "17433:3:66"
                                        },
                                        "nativeSrc": "17433:14:66",
                                        "nodeType": "YulFunctionCall",
                                        "src": "17433:14:66"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "17418:3:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "17418:3:66"
                                    },
                                    "nativeSrc": "17418:30:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "17418:30:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "17450:2:66",
                                    "nodeType": "YulLiteral",
                                    "src": "17450:2:66",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "17414:3:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "17414:3:66"
                                },
                                "nativeSrc": "17414:39:66",
                                "nodeType": "YulFunctionCall",
                                "src": "17414:39:66"
                              },
                              "variables": [
                                {
                                  "name": "tail_2",
                                  "nativeSrc": "17404:6:66",
                                  "nodeType": "YulTypedName",
                                  "src": "17404:6:66",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nativeSrc": "17462:29:66",
                              "nodeType": "YulVariableDeclaration",
                              "src": "17462:29:66",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nativeSrc": "17480:6:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "17480:6:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "17488:2:66",
                                    "nodeType": "YulLiteral",
                                    "src": "17488:2:66",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "17476:3:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "17476:3:66"
                                },
                                "nativeSrc": "17476:15:66",
                                "nodeType": "YulFunctionCall",
                                "src": "17476:15:66"
                              },
                              "variables": [
                                {
                                  "name": "srcPtr",
                                  "nativeSrc": "17466:6:66",
                                  "nodeType": "YulTypedName",
                                  "src": "17466:6:66",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nativeSrc": "17500:10:66",
                              "nodeType": "YulVariableDeclaration",
                              "src": "17500:10:66",
                              "value": {
                                "kind": "number",
                                "nativeSrc": "17509:1:66",
                                "nodeType": "YulLiteral",
                                "src": "17509:1:66",
                                "type": "",
                                "value": "0"
                              },
                              "variables": [
                                {
                                  "name": "i",
                                  "nativeSrc": "17504:1:66",
                                  "nodeType": "YulTypedName",
                                  "src": "17504:1:66",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "body": {
                                "nativeSrc": "17568:206:66",
                                "nodeType": "YulBlock",
                                "src": "17568:206:66",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "name": "pos",
                                          "nativeSrc": "17589:3:66",
                                          "nodeType": "YulIdentifier",
                                          "src": "17589:3:66"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "arguments": [
                                                {
                                                  "name": "tail_2",
                                                  "nativeSrc": "17602:6:66",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "17602:6:66"
                                                },
                                                {
                                                  "name": "headStart",
                                                  "nativeSrc": "17610:9:66",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "17610:9:66"
                                                }
                                              ],
                                              "functionName": {
                                                "name": "sub",
                                                "nativeSrc": "17598:3:66",
                                                "nodeType": "YulIdentifier",
                                                "src": "17598:3:66"
                                              },
                                              "nativeSrc": "17598:22:66",
                                              "nodeType": "YulFunctionCall",
                                              "src": "17598:22:66"
                                            },
                                            {
                                              "arguments": [
                                                {
                                                  "kind": "number",
                                                  "nativeSrc": "17626:2:66",
                                                  "nodeType": "YulLiteral",
                                                  "src": "17626:2:66",
                                                  "type": "",
                                                  "value": "63"
                                                }
                                              ],
                                              "functionName": {
                                                "name": "not",
                                                "nativeSrc": "17622:3:66",
                                                "nodeType": "YulIdentifier",
                                                "src": "17622:3:66"
                                              },
                                              "nativeSrc": "17622:7:66",
                                              "nodeType": "YulFunctionCall",
                                              "src": "17622:7:66"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nativeSrc": "17594:3:66",
                                            "nodeType": "YulIdentifier",
                                            "src": "17594:3:66"
                                          },
                                          "nativeSrc": "17594:36:66",
                                          "nodeType": "YulFunctionCall",
                                          "src": "17594:36:66"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mstore",
                                        "nativeSrc": "17582:6:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "17582:6:66"
                                      },
                                      "nativeSrc": "17582:49:66",
                                      "nodeType": "YulFunctionCall",
                                      "src": "17582:49:66"
                                    },
                                    "nativeSrc": "17582:49:66",
                                    "nodeType": "YulExpressionStatement",
                                    "src": "17582:49:66"
                                  },
                                  {
                                    "nativeSrc": "17644:50:66",
                                    "nodeType": "YulAssignment",
                                    "src": "17644:50:66",
                                    "value": {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "name": "srcPtr",
                                              "nativeSrc": "17678:6:66",
                                              "nodeType": "YulIdentifier",
                                              "src": "17678:6:66"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "mload",
                                            "nativeSrc": "17672:5:66",
                                            "nodeType": "YulIdentifier",
                                            "src": "17672:5:66"
                                          },
                                          "nativeSrc": "17672:13:66",
                                          "nodeType": "YulFunctionCall",
                                          "src": "17672:13:66"
                                        },
                                        {
                                          "name": "tail_2",
                                          "nativeSrc": "17687:6:66",
                                          "nodeType": "YulIdentifier",
                                          "src": "17687:6:66"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "abi_encode_string",
                                        "nativeSrc": "17654:17:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "17654:17:66"
                                      },
                                      "nativeSrc": "17654:40:66",
                                      "nodeType": "YulFunctionCall",
                                      "src": "17654:40:66"
                                    },
                                    "variableNames": [
                                      {
                                        "name": "tail_2",
                                        "nativeSrc": "17644:6:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "17644:6:66"
                                      }
                                    ]
                                  },
                                  {
                                    "nativeSrc": "17707:25:66",
                                    "nodeType": "YulAssignment",
                                    "src": "17707:25:66",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "srcPtr",
                                          "nativeSrc": "17721:6:66",
                                          "nodeType": "YulIdentifier",
                                          "src": "17721:6:66"
                                        },
                                        {
                                          "name": "_1",
                                          "nativeSrc": "17729:2:66",
                                          "nodeType": "YulIdentifier",
                                          "src": "17729:2:66"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nativeSrc": "17717:3:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "17717:3:66"
                                      },
                                      "nativeSrc": "17717:15:66",
                                      "nodeType": "YulFunctionCall",
                                      "src": "17717:15:66"
                                    },
                                    "variableNames": [
                                      {
                                        "name": "srcPtr",
                                        "nativeSrc": "17707:6:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "17707:6:66"
                                      }
                                    ]
                                  },
                                  {
                                    "nativeSrc": "17745:19:66",
                                    "nodeType": "YulAssignment",
                                    "src": "17745:19:66",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "pos",
                                          "nativeSrc": "17756:3:66",
                                          "nodeType": "YulIdentifier",
                                          "src": "17756:3:66"
                                        },
                                        {
                                          "name": "_1",
                                          "nativeSrc": "17761:2:66",
                                          "nodeType": "YulIdentifier",
                                          "src": "17761:2:66"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nativeSrc": "17752:3:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "17752:3:66"
                                      },
                                      "nativeSrc": "17752:12:66",
                                      "nodeType": "YulFunctionCall",
                                      "src": "17752:12:66"
                                    },
                                    "variableNames": [
                                      {
                                        "name": "pos",
                                        "nativeSrc": "17745:3:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "17745:3:66"
                                      }
                                    ]
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "name": "i",
                                    "nativeSrc": "17530:1:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "17530:1:66"
                                  },
                                  {
                                    "name": "length",
                                    "nativeSrc": "17533:6:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "17533:6:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nativeSrc": "17527:2:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "17527:2:66"
                                },
                                "nativeSrc": "17527:13:66",
                                "nodeType": "YulFunctionCall",
                                "src": "17527:13:66"
                              },
                              "nativeSrc": "17519:255:66",
                              "nodeType": "YulForLoop",
                              "post": {
                                "nativeSrc": "17541:18:66",
                                "nodeType": "YulBlock",
                                "src": "17541:18:66",
                                "statements": [
                                  {
                                    "nativeSrc": "17543:14:66",
                                    "nodeType": "YulAssignment",
                                    "src": "17543:14:66",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "i",
                                          "nativeSrc": "17552:1:66",
                                          "nodeType": "YulIdentifier",
                                          "src": "17552:1:66"
                                        },
                                        {
                                          "kind": "number",
                                          "nativeSrc": "17555:1:66",
                                          "nodeType": "YulLiteral",
                                          "src": "17555:1:66",
                                          "type": "",
                                          "value": "1"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nativeSrc": "17548:3:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "17548:3:66"
                                      },
                                      "nativeSrc": "17548:9:66",
                                      "nodeType": "YulFunctionCall",
                                      "src": "17548:9:66"
                                    },
                                    "variableNames": [
                                      {
                                        "name": "i",
                                        "nativeSrc": "17543:1:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "17543:1:66"
                                      }
                                    ]
                                  }
                                ]
                              },
                              "pre": {
                                "nativeSrc": "17523:3:66",
                                "nodeType": "YulBlock",
                                "src": "17523:3:66",
                                "statements": []
                              },
                              "src": "17519:255:66"
                            },
                            {
                              "nativeSrc": "17783:14:66",
                              "nodeType": "YulAssignment",
                              "src": "17783:14:66",
                              "value": {
                                "name": "tail_2",
                                "nativeSrc": "17791:6:66",
                                "nodeType": "YulIdentifier",
                                "src": "17791:6:66"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nativeSrc": "17783:4:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "17783:4:66"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_array$_t_string_memory_ptr_$dyn_memory_ptr__to_t_array$_t_string_memory_ptr_$dyn_memory_ptr__fromStack_reversed",
                        "nativeSrc": "17000:803:66",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nativeSrc": "17140:9:66",
                            "nodeType": "YulTypedName",
                            "src": "17140:9:66",
                            "type": ""
                          },
                          {
                            "name": "value0",
                            "nativeSrc": "17151:6:66",
                            "nodeType": "YulTypedName",
                            "src": "17151:6:66",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nativeSrc": "17162:4:66",
                            "nodeType": "YulTypedName",
                            "src": "17162:4:66",
                            "type": ""
                          }
                        ],
                        "src": "17000:803:66"
                      },
                      {
                        "body": {
                          "nativeSrc": "17916:835:66",
                          "nodeType": "YulBlock",
                          "src": "17916:835:66",
                          "statements": [
                            {
                              "body": {
                                "nativeSrc": "17962:16:66",
                                "nodeType": "YulBlock",
                                "src": "17962:16:66",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nativeSrc": "17971:1:66",
                                          "nodeType": "YulLiteral",
                                          "src": "17971:1:66",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nativeSrc": "17974:1:66",
                                          "nodeType": "YulLiteral",
                                          "src": "17974:1:66",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nativeSrc": "17964:6:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "17964:6:66"
                                      },
                                      "nativeSrc": "17964:12:66",
                                      "nodeType": "YulFunctionCall",
                                      "src": "17964:12:66"
                                    },
                                    "nativeSrc": "17964:12:66",
                                    "nodeType": "YulExpressionStatement",
                                    "src": "17964:12:66"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "dataEnd",
                                        "nativeSrc": "17937:7:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "17937:7:66"
                                      },
                                      {
                                        "name": "headStart",
                                        "nativeSrc": "17946:9:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "17946:9:66"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nativeSrc": "17933:3:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "17933:3:66"
                                    },
                                    "nativeSrc": "17933:23:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "17933:23:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "17958:2:66",
                                    "nodeType": "YulLiteral",
                                    "src": "17958:2:66",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nativeSrc": "17929:3:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "17929:3:66"
                                },
                                "nativeSrc": "17929:32:66",
                                "nodeType": "YulFunctionCall",
                                "src": "17929:32:66"
                              },
                              "nativeSrc": "17926:52:66",
                              "nodeType": "YulIf",
                              "src": "17926:52:66"
                            },
                            {
                              "nativeSrc": "17987:30:66",
                              "nodeType": "YulVariableDeclaration",
                              "src": "17987:30:66",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "18007:9:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "18007:9:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nativeSrc": "18001:5:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "18001:5:66"
                                },
                                "nativeSrc": "18001:16:66",
                                "nodeType": "YulFunctionCall",
                                "src": "18001:16:66"
                              },
                              "variables": [
                                {
                                  "name": "offset",
                                  "nativeSrc": "17991:6:66",
                                  "nodeType": "YulTypedName",
                                  "src": "17991:6:66",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nativeSrc": "18026:28:66",
                              "nodeType": "YulVariableDeclaration",
                              "src": "18026:28:66",
                              "value": {
                                "kind": "number",
                                "nativeSrc": "18036:18:66",
                                "nodeType": "YulLiteral",
                                "src": "18036:18:66",
                                "type": "",
                                "value": "0xffffffffffffffff"
                              },
                              "variables": [
                                {
                                  "name": "_1",
                                  "nativeSrc": "18030:2:66",
                                  "nodeType": "YulTypedName",
                                  "src": "18030:2:66",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "body": {
                                "nativeSrc": "18081:16:66",
                                "nodeType": "YulBlock",
                                "src": "18081:16:66",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nativeSrc": "18090:1:66",
                                          "nodeType": "YulLiteral",
                                          "src": "18090:1:66",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nativeSrc": "18093:1:66",
                                          "nodeType": "YulLiteral",
                                          "src": "18093:1:66",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nativeSrc": "18083:6:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "18083:6:66"
                                      },
                                      "nativeSrc": "18083:12:66",
                                      "nodeType": "YulFunctionCall",
                                      "src": "18083:12:66"
                                    },
                                    "nativeSrc": "18083:12:66",
                                    "nodeType": "YulExpressionStatement",
                                    "src": "18083:12:66"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "name": "offset",
                                    "nativeSrc": "18069:6:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "18069:6:66"
                                  },
                                  {
                                    "name": "_1",
                                    "nativeSrc": "18077:2:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "18077:2:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nativeSrc": "18066:2:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "18066:2:66"
                                },
                                "nativeSrc": "18066:14:66",
                                "nodeType": "YulFunctionCall",
                                "src": "18066:14:66"
                              },
                              "nativeSrc": "18063:34:66",
                              "nodeType": "YulIf",
                              "src": "18063:34:66"
                            },
                            {
                              "nativeSrc": "18106:32:66",
                              "nodeType": "YulVariableDeclaration",
                              "src": "18106:32:66",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "18120:9:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "18120:9:66"
                                  },
                                  {
                                    "name": "offset",
                                    "nativeSrc": "18131:6:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "18131:6:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "18116:3:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "18116:3:66"
                                },
                                "nativeSrc": "18116:22:66",
                                "nodeType": "YulFunctionCall",
                                "src": "18116:22:66"
                              },
                              "variables": [
                                {
                                  "name": "_2",
                                  "nativeSrc": "18110:2:66",
                                  "nodeType": "YulTypedName",
                                  "src": "18110:2:66",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "body": {
                                "nativeSrc": "18178:16:66",
                                "nodeType": "YulBlock",
                                "src": "18178:16:66",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nativeSrc": "18187:1:66",
                                          "nodeType": "YulLiteral",
                                          "src": "18187:1:66",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nativeSrc": "18190:1:66",
                                          "nodeType": "YulLiteral",
                                          "src": "18190:1:66",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nativeSrc": "18180:6:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "18180:6:66"
                                      },
                                      "nativeSrc": "18180:12:66",
                                      "nodeType": "YulFunctionCall",
                                      "src": "18180:12:66"
                                    },
                                    "nativeSrc": "18180:12:66",
                                    "nodeType": "YulExpressionStatement",
                                    "src": "18180:12:66"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "dataEnd",
                                        "nativeSrc": "18158:7:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "18158:7:66"
                                      },
                                      {
                                        "name": "_2",
                                        "nativeSrc": "18167:2:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "18167:2:66"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nativeSrc": "18154:3:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "18154:3:66"
                                    },
                                    "nativeSrc": "18154:16:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "18154:16:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "18172:4:66",
                                    "nodeType": "YulLiteral",
                                    "src": "18172:4:66",
                                    "type": "",
                                    "value": "0x60"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nativeSrc": "18150:3:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "18150:3:66"
                                },
                                "nativeSrc": "18150:27:66",
                                "nodeType": "YulFunctionCall",
                                "src": "18150:27:66"
                              },
                              "nativeSrc": "18147:47:66",
                              "nodeType": "YulIf",
                              "src": "18147:47:66"
                            },
                            {
                              "nativeSrc": "18203:30:66",
                              "nodeType": "YulVariableDeclaration",
                              "src": "18203:30:66",
                              "value": {
                                "arguments": [],
                                "functionName": {
                                  "name": "allocate_memory",
                                  "nativeSrc": "18216:15:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "18216:15:66"
                                },
                                "nativeSrc": "18216:17:66",
                                "nodeType": "YulFunctionCall",
                                "src": "18216:17:66"
                              },
                              "variables": [
                                {
                                  "name": "value",
                                  "nativeSrc": "18207:5:66",
                                  "nodeType": "YulTypedName",
                                  "src": "18207:5:66",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nativeSrc": "18242:24:66",
                              "nodeType": "YulVariableDeclaration",
                              "src": "18242:24:66",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "_2",
                                    "nativeSrc": "18263:2:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "18263:2:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nativeSrc": "18257:5:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "18257:5:66"
                                },
                                "nativeSrc": "18257:9:66",
                                "nodeType": "YulFunctionCall",
                                "src": "18257:9:66"
                              },
                              "variables": [
                                {
                                  "name": "value_1",
                                  "nativeSrc": "18246:7:66",
                                  "nodeType": "YulTypedName",
                                  "src": "18246:7:66",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "body": {
                                "nativeSrc": "18322:16:66",
                                "nodeType": "YulBlock",
                                "src": "18322:16:66",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nativeSrc": "18331:1:66",
                                          "nodeType": "YulLiteral",
                                          "src": "18331:1:66",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nativeSrc": "18334:1:66",
                                          "nodeType": "YulLiteral",
                                          "src": "18334:1:66",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nativeSrc": "18324:6:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "18324:6:66"
                                      },
                                      "nativeSrc": "18324:12:66",
                                      "nodeType": "YulFunctionCall",
                                      "src": "18324:12:66"
                                    },
                                    "nativeSrc": "18324:12:66",
                                    "nodeType": "YulExpressionStatement",
                                    "src": "18324:12:66"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value_1",
                                        "nativeSrc": "18288:7:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "18288:7:66"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nativeSrc": "18308:1:66",
                                            "nodeType": "YulLiteral",
                                            "src": "18308:1:66",
                                            "type": "",
                                            "value": "3"
                                          },
                                          {
                                            "name": "value_1",
                                            "nativeSrc": "18311:7:66",
                                            "nodeType": "YulIdentifier",
                                            "src": "18311:7:66"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "signextend",
                                          "nativeSrc": "18297:10:66",
                                          "nodeType": "YulIdentifier",
                                          "src": "18297:10:66"
                                        },
                                        "nativeSrc": "18297:22:66",
                                        "nodeType": "YulFunctionCall",
                                        "src": "18297:22:66"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "eq",
                                      "nativeSrc": "18285:2:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "18285:2:66"
                                    },
                                    "nativeSrc": "18285:35:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "18285:35:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nativeSrc": "18278:6:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "18278:6:66"
                                },
                                "nativeSrc": "18278:43:66",
                                "nodeType": "YulFunctionCall",
                                "src": "18278:43:66"
                              },
                              "nativeSrc": "18275:63:66",
                              "nodeType": "YulIf",
                              "src": "18275:63:66"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nativeSrc": "18354:5:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "18354:5:66"
                                  },
                                  {
                                    "name": "value_1",
                                    "nativeSrc": "18361:7:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "18361:7:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "18347:6:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "18347:6:66"
                                },
                                "nativeSrc": "18347:22:66",
                                "nodeType": "YulFunctionCall",
                                "src": "18347:22:66"
                              },
                              "nativeSrc": "18347:22:66",
                              "nodeType": "YulExpressionStatement",
                              "src": "18347:22:66"
                            },
                            {
                              "nativeSrc": "18378:34:66",
                              "nodeType": "YulVariableDeclaration",
                              "src": "18378:34:66",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "_2",
                                        "nativeSrc": "18404:2:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "18404:2:66"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "18408:2:66",
                                        "nodeType": "YulLiteral",
                                        "src": "18408:2:66",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "18400:3:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "18400:3:66"
                                    },
                                    "nativeSrc": "18400:11:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "18400:11:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nativeSrc": "18394:5:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "18394:5:66"
                                },
                                "nativeSrc": "18394:18:66",
                                "nodeType": "YulFunctionCall",
                                "src": "18394:18:66"
                              },
                              "variables": [
                                {
                                  "name": "offset_1",
                                  "nativeSrc": "18382:8:66",
                                  "nodeType": "YulTypedName",
                                  "src": "18382:8:66",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "body": {
                                "nativeSrc": "18441:16:66",
                                "nodeType": "YulBlock",
                                "src": "18441:16:66",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nativeSrc": "18450:1:66",
                                          "nodeType": "YulLiteral",
                                          "src": "18450:1:66",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nativeSrc": "18453:1:66",
                                          "nodeType": "YulLiteral",
                                          "src": "18453:1:66",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nativeSrc": "18443:6:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "18443:6:66"
                                      },
                                      "nativeSrc": "18443:12:66",
                                      "nodeType": "YulFunctionCall",
                                      "src": "18443:12:66"
                                    },
                                    "nativeSrc": "18443:12:66",
                                    "nodeType": "YulExpressionStatement",
                                    "src": "18443:12:66"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "name": "offset_1",
                                    "nativeSrc": "18427:8:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "18427:8:66"
                                  },
                                  {
                                    "name": "_1",
                                    "nativeSrc": "18437:2:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "18437:2:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nativeSrc": "18424:2:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "18424:2:66"
                                },
                                "nativeSrc": "18424:16:66",
                                "nodeType": "YulFunctionCall",
                                "src": "18424:16:66"
                              },
                              "nativeSrc": "18421:36:66",
                              "nodeType": "YulIf",
                              "src": "18421:36:66"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nativeSrc": "18477:5:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "18477:5:66"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "18484:2:66",
                                        "nodeType": "YulLiteral",
                                        "src": "18484:2:66",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "18473:3:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "18473:3:66"
                                    },
                                    "nativeSrc": "18473:14:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "18473:14:66"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "_2",
                                            "nativeSrc": "18521:2:66",
                                            "nodeType": "YulIdentifier",
                                            "src": "18521:2:66"
                                          },
                                          {
                                            "name": "offset_1",
                                            "nativeSrc": "18525:8:66",
                                            "nodeType": "YulIdentifier",
                                            "src": "18525:8:66"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nativeSrc": "18517:3:66",
                                          "nodeType": "YulIdentifier",
                                          "src": "18517:3:66"
                                        },
                                        "nativeSrc": "18517:17:66",
                                        "nodeType": "YulFunctionCall",
                                        "src": "18517:17:66"
                                      },
                                      {
                                        "name": "dataEnd",
                                        "nativeSrc": "18536:7:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "18536:7:66"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "abi_decode_bytes_fromMemory",
                                      "nativeSrc": "18489:27:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "18489:27:66"
                                    },
                                    "nativeSrc": "18489:55:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "18489:55:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "18466:6:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "18466:6:66"
                                },
                                "nativeSrc": "18466:79:66",
                                "nodeType": "YulFunctionCall",
                                "src": "18466:79:66"
                              },
                              "nativeSrc": "18466:79:66",
                              "nodeType": "YulExpressionStatement",
                              "src": "18466:79:66"
                            },
                            {
                              "nativeSrc": "18554:34:66",
                              "nodeType": "YulVariableDeclaration",
                              "src": "18554:34:66",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "_2",
                                        "nativeSrc": "18580:2:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "18580:2:66"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "18584:2:66",
                                        "nodeType": "YulLiteral",
                                        "src": "18584:2:66",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "18576:3:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "18576:3:66"
                                    },
                                    "nativeSrc": "18576:11:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "18576:11:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nativeSrc": "18570:5:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "18570:5:66"
                                },
                                "nativeSrc": "18570:18:66",
                                "nodeType": "YulFunctionCall",
                                "src": "18570:18:66"
                              },
                              "variables": [
                                {
                                  "name": "offset_2",
                                  "nativeSrc": "18558:8:66",
                                  "nodeType": "YulTypedName",
                                  "src": "18558:8:66",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "body": {
                                "nativeSrc": "18617:16:66",
                                "nodeType": "YulBlock",
                                "src": "18617:16:66",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nativeSrc": "18626:1:66",
                                          "nodeType": "YulLiteral",
                                          "src": "18626:1:66",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "kind": "number",
                                          "nativeSrc": "18629:1:66",
                                          "nodeType": "YulLiteral",
                                          "src": "18629:1:66",
                                          "type": "",
                                          "value": "0"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "revert",
                                        "nativeSrc": "18619:6:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "18619:6:66"
                                      },
                                      "nativeSrc": "18619:12:66",
                                      "nodeType": "YulFunctionCall",
                                      "src": "18619:12:66"
                                    },
                                    "nativeSrc": "18619:12:66",
                                    "nodeType": "YulExpressionStatement",
                                    "src": "18619:12:66"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "name": "offset_2",
                                    "nativeSrc": "18603:8:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "18603:8:66"
                                  },
                                  {
                                    "name": "_1",
                                    "nativeSrc": "18613:2:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "18613:2:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nativeSrc": "18600:2:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "18600:2:66"
                                },
                                "nativeSrc": "18600:16:66",
                                "nodeType": "YulFunctionCall",
                                "src": "18600:16:66"
                              },
                              "nativeSrc": "18597:36:66",
                              "nodeType": "YulIf",
                              "src": "18597:36:66"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nativeSrc": "18653:5:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "18653:5:66"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "18660:2:66",
                                        "nodeType": "YulLiteral",
                                        "src": "18660:2:66",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "18649:3:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "18649:3:66"
                                    },
                                    "nativeSrc": "18649:14:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "18649:14:66"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "_2",
                                            "nativeSrc": "18697:2:66",
                                            "nodeType": "YulIdentifier",
                                            "src": "18697:2:66"
                                          },
                                          {
                                            "name": "offset_2",
                                            "nativeSrc": "18701:8:66",
                                            "nodeType": "YulIdentifier",
                                            "src": "18701:8:66"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nativeSrc": "18693:3:66",
                                          "nodeType": "YulIdentifier",
                                          "src": "18693:3:66"
                                        },
                                        "nativeSrc": "18693:17:66",
                                        "nodeType": "YulFunctionCall",
                                        "src": "18693:17:66"
                                      },
                                      {
                                        "name": "dataEnd",
                                        "nativeSrc": "18712:7:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "18712:7:66"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "abi_decode_bytes_fromMemory",
                                      "nativeSrc": "18665:27:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "18665:27:66"
                                    },
                                    "nativeSrc": "18665:55:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "18665:55:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "18642:6:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "18642:6:66"
                                },
                                "nativeSrc": "18642:79:66",
                                "nodeType": "YulFunctionCall",
                                "src": "18642:79:66"
                              },
                              "nativeSrc": "18642:79:66",
                              "nodeType": "YulExpressionStatement",
                              "src": "18642:79:66"
                            },
                            {
                              "nativeSrc": "18730:15:66",
                              "nodeType": "YulAssignment",
                              "src": "18730:15:66",
                              "value": {
                                "name": "value",
                                "nativeSrc": "18740:5:66",
                                "nodeType": "YulIdentifier",
                                "src": "18740:5:66"
                              },
                              "variableNames": [
                                {
                                  "name": "value0",
                                  "nativeSrc": "18730:6:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "18730:6:66"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_decode_tuple_t_struct$_FfiResult_$8582_memory_ptr_fromMemory",
                        "nativeSrc": "17808:943:66",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nativeSrc": "17882:9:66",
                            "nodeType": "YulTypedName",
                            "src": "17882:9:66",
                            "type": ""
                          },
                          {
                            "name": "dataEnd",
                            "nativeSrc": "17893:7:66",
                            "nodeType": "YulTypedName",
                            "src": "17893:7:66",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "value0",
                            "nativeSrc": "17905:6:66",
                            "nodeType": "YulTypedName",
                            "src": "17905:6:66",
                            "type": ""
                          }
                        ],
                        "src": "17808:943:66"
                      },
                      {
                        "body": {
                          "nativeSrc": "19097:1030:66",
                          "nodeType": "YulBlock",
                          "src": "19097:1030:66",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nativeSrc": "19114:3:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "19114:3:66"
                                  },
                                  {
                                    "hexValue": "4661696c656420746f2072756e206261736820636f6d6d616e64207769746820",
                                    "kind": "string",
                                    "nativeSrc": "19119:34:66",
                                    "nodeType": "YulLiteral",
                                    "src": "19119:34:66",
                                    "type": "",
                                    "value": "Failed to run bash command with "
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "19107:6:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "19107:6:66"
                                },
                                "nativeSrc": "19107:47:66",
                                "nodeType": "YulFunctionCall",
                                "src": "19107:47:66"
                              },
                              "nativeSrc": "19107:47:66",
                              "nodeType": "YulExpressionStatement",
                              "src": "19107:47:66"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "pos",
                                        "nativeSrc": "19174:3:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "19174:3:66"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "19179:2:66",
                                        "nodeType": "YulLiteral",
                                        "src": "19179:2:66",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "19170:3:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "19170:3:66"
                                    },
                                    "nativeSrc": "19170:12:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "19170:12:66"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nativeSrc": "19188:3:66",
                                        "nodeType": "YulLiteral",
                                        "src": "19188:3:66",
                                        "type": "",
                                        "value": "249"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "19193:2:66",
                                        "nodeType": "YulLiteral",
                                        "src": "19193:2:66",
                                        "type": "",
                                        "value": "17"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nativeSrc": "19184:3:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "19184:3:66"
                                    },
                                    "nativeSrc": "19184:12:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "19184:12:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "19163:6:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "19163:6:66"
                                },
                                "nativeSrc": "19163:34:66",
                                "nodeType": "YulFunctionCall",
                                "src": "19163:34:66"
                              },
                              "nativeSrc": "19163:34:66",
                              "nodeType": "YulExpressionStatement",
                              "src": "19163:34:66"
                            },
                            {
                              "nativeSrc": "19206:27:66",
                              "nodeType": "YulVariableDeclaration",
                              "src": "19206:27:66",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nativeSrc": "19226:6:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "19226:6:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nativeSrc": "19220:5:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "19220:5:66"
                                },
                                "nativeSrc": "19220:13:66",
                                "nodeType": "YulFunctionCall",
                                "src": "19220:13:66"
                              },
                              "variables": [
                                {
                                  "name": "length",
                                  "nativeSrc": "19210:6:66",
                                  "nodeType": "YulTypedName",
                                  "src": "19210:6:66",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value0",
                                        "nativeSrc": "19281:6:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "19281:6:66"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "19289:2:66",
                                        "nodeType": "YulLiteral",
                                        "src": "19289:2:66",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "19277:3:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "19277:3:66"
                                    },
                                    "nativeSrc": "19277:15:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "19277:15:66"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "pos",
                                        "nativeSrc": "19298:3:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "19298:3:66"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "19303:2:66",
                                        "nodeType": "YulLiteral",
                                        "src": "19303:2:66",
                                        "type": "",
                                        "value": "33"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "19294:3:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "19294:3:66"
                                    },
                                    "nativeSrc": "19294:12:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "19294:12:66"
                                  },
                                  {
                                    "name": "length",
                                    "nativeSrc": "19308:6:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "19308:6:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "copy_memory_to_memory_with_cleanup",
                                  "nativeSrc": "19242:34:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "19242:34:66"
                                },
                                "nativeSrc": "19242:73:66",
                                "nodeType": "YulFunctionCall",
                                "src": "19242:73:66"
                              },
                              "nativeSrc": "19242:73:66",
                              "nodeType": "YulExpressionStatement",
                              "src": "19242:73:66"
                            },
                            {
                              "nativeSrc": "19324:26:66",
                              "nodeType": "YulVariableDeclaration",
                              "src": "19324:26:66",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nativeSrc": "19338:3:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "19338:3:66"
                                  },
                                  {
                                    "name": "length",
                                    "nativeSrc": "19343:6:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "19343:6:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "19334:3:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "19334:3:66"
                                },
                                "nativeSrc": "19334:16:66",
                                "nodeType": "YulFunctionCall",
                                "src": "19334:16:66"
                              },
                              "variables": [
                                {
                                  "name": "_1",
                                  "nativeSrc": "19328:2:66",
                                  "nodeType": "YulTypedName",
                                  "src": "19328:2:66",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "_1",
                                        "nativeSrc": "19370:2:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "19370:2:66"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "19374:2:66",
                                        "nodeType": "YulLiteral",
                                        "src": "19374:2:66",
                                        "type": "",
                                        "value": "33"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "19366:3:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "19366:3:66"
                                    },
                                    "nativeSrc": "19366:11:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "19366:11:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "19379:66:66",
                                    "nodeType": "YulLiteral",
                                    "src": "19379:66:66",
                                    "type": "",
                                    "value": "0x222e20496620796f7520617265207573696e672057696e646f77732c20736574"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "19359:6:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "19359:6:66"
                                },
                                "nativeSrc": "19359:87:66",
                                "nodeType": "YulFunctionCall",
                                "src": "19359:87:66"
                              },
                              "nativeSrc": "19359:87:66",
                              "nodeType": "YulExpressionStatement",
                              "src": "19359:87:66"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "_1",
                                        "nativeSrc": "19466:2:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "19466:2:66"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "19470:2:66",
                                        "nodeType": "YulLiteral",
                                        "src": "19470:2:66",
                                        "type": "",
                                        "value": "65"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "19462:3:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "19462:3:66"
                                    },
                                    "nativeSrc": "19462:11:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "19462:11:66"
                                  },
                                  {
                                    "hexValue": "20746865204f50454e5a455050454c494e5f424153485f5041544820656e7669",
                                    "kind": "string",
                                    "nativeSrc": "19475:34:66",
                                    "nodeType": "YulLiteral",
                                    "src": "19475:34:66",
                                    "type": "",
                                    "value": " the OPENZEPPELIN_BASH_PATH envi"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "19455:6:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "19455:6:66"
                                },
                                "nativeSrc": "19455:55:66",
                                "nodeType": "YulFunctionCall",
                                "src": "19455:55:66"
                              },
                              "nativeSrc": "19455:55:66",
                              "nodeType": "YulExpressionStatement",
                              "src": "19455:55:66"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "_1",
                                        "nativeSrc": "19530:2:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "19530:2:66"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "19534:2:66",
                                        "nodeType": "YulLiteral",
                                        "src": "19534:2:66",
                                        "type": "",
                                        "value": "97"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "19526:3:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "19526:3:66"
                                    },
                                    "nativeSrc": "19526:11:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "19526:11:66"
                                  },
                                  {
                                    "hexValue": "726f6e6d656e74207661726961626c6520746f207468652066756c6c79207175",
                                    "kind": "string",
                                    "nativeSrc": "19539:34:66",
                                    "nodeType": "YulLiteral",
                                    "src": "19539:34:66",
                                    "type": "",
                                    "value": "ronment variable to the fully qu"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "19519:6:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "19519:6:66"
                                },
                                "nativeSrc": "19519:55:66",
                                "nodeType": "YulFunctionCall",
                                "src": "19519:55:66"
                              },
                              "nativeSrc": "19519:55:66",
                              "nodeType": "YulExpressionStatement",
                              "src": "19519:55:66"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "_1",
                                        "nativeSrc": "19594:2:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "19594:2:66"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "19598:3:66",
                                        "nodeType": "YulLiteral",
                                        "src": "19598:3:66",
                                        "type": "",
                                        "value": "129"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "19590:3:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "19590:3:66"
                                    },
                                    "nativeSrc": "19590:12:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "19590:12:66"
                                  },
                                  {
                                    "hexValue": "616c69666965642070617468206f662074686520626173682065786563757461",
                                    "kind": "string",
                                    "nativeSrc": "19604:34:66",
                                    "nodeType": "YulLiteral",
                                    "src": "19604:34:66",
                                    "type": "",
                                    "value": "alified path of the bash executa"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "19583:6:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "19583:6:66"
                                },
                                "nativeSrc": "19583:56:66",
                                "nodeType": "YulFunctionCall",
                                "src": "19583:56:66"
                              },
                              "nativeSrc": "19583:56:66",
                              "nodeType": "YulExpressionStatement",
                              "src": "19583:56:66"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "_1",
                                        "nativeSrc": "19659:2:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "19659:2:66"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "19663:3:66",
                                        "nodeType": "YulLiteral",
                                        "src": "19663:3:66",
                                        "type": "",
                                        "value": "161"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "19655:3:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "19655:3:66"
                                    },
                                    "nativeSrc": "19655:12:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "19655:12:66"
                                  },
                                  {
                                    "hexValue": "626c652e20466f72206578616d706c652c20696620796f752061726520757369",
                                    "kind": "string",
                                    "nativeSrc": "19669:34:66",
                                    "nodeType": "YulLiteral",
                                    "src": "19669:34:66",
                                    "type": "",
                                    "value": "ble. For example, if you are usi"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "19648:6:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "19648:6:66"
                                },
                                "nativeSrc": "19648:56:66",
                                "nodeType": "YulFunctionCall",
                                "src": "19648:56:66"
                              },
                              "nativeSrc": "19648:56:66",
                              "nodeType": "YulExpressionStatement",
                              "src": "19648:56:66"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "_1",
                                        "nativeSrc": "19724:2:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "19724:2:66"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "19728:3:66",
                                        "nodeType": "YulLiteral",
                                        "src": "19728:3:66",
                                        "type": "",
                                        "value": "193"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "19720:3:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "19720:3:66"
                                    },
                                    "nativeSrc": "19720:12:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "19720:12:66"
                                  },
                                  {
                                    "hexValue": "6e672047697420666f722057696e646f77732c206164642074686520666f6c6c",
                                    "kind": "string",
                                    "nativeSrc": "19734:34:66",
                                    "nodeType": "YulLiteral",
                                    "src": "19734:34:66",
                                    "type": "",
                                    "value": "ng Git for Windows, add the foll"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "19713:6:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "19713:6:66"
                                },
                                "nativeSrc": "19713:56:66",
                                "nodeType": "YulFunctionCall",
                                "src": "19713:56:66"
                              },
                              "nativeSrc": "19713:56:66",
                              "nodeType": "YulExpressionStatement",
                              "src": "19713:56:66"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "_1",
                                        "nativeSrc": "19789:2:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "19789:2:66"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "19793:3:66",
                                        "nodeType": "YulLiteral",
                                        "src": "19793:3:66",
                                        "type": "",
                                        "value": "225"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "19785:3:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "19785:3:66"
                                    },
                                    "nativeSrc": "19785:12:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "19785:12:66"
                                  },
                                  {
                                    "hexValue": "6f77696e67206c696e6520696e20746865202e656e762066696c65206f662079",
                                    "kind": "string",
                                    "nativeSrc": "19799:34:66",
                                    "nodeType": "YulLiteral",
                                    "src": "19799:34:66",
                                    "type": "",
                                    "value": "owing line in the .env file of y"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "19778:6:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "19778:6:66"
                                },
                                "nativeSrc": "19778:56:66",
                                "nodeType": "YulFunctionCall",
                                "src": "19778:56:66"
                              },
                              "nativeSrc": "19778:56:66",
                              "nodeType": "YulExpressionStatement",
                              "src": "19778:56:66"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "_1",
                                        "nativeSrc": "19854:2:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "19854:2:66"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "19858:3:66",
                                        "nodeType": "YulLiteral",
                                        "src": "19858:3:66",
                                        "type": "",
                                        "value": "257"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "19850:3:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "19850:3:66"
                                    },
                                    "nativeSrc": "19850:12:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "19850:12:66"
                                  },
                                  {
                                    "hexValue": "6f75722070726f6a65637420287573696e6720666f727761726420736c617368",
                                    "kind": "string",
                                    "nativeSrc": "19864:34:66",
                                    "nodeType": "YulLiteral",
                                    "src": "19864:34:66",
                                    "type": "",
                                    "value": "our project (using forward slash"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "19843:6:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "19843:6:66"
                                },
                                "nativeSrc": "19843:56:66",
                                "nodeType": "YulFunctionCall",
                                "src": "19843:56:66"
                              },
                              "nativeSrc": "19843:56:66",
                              "nodeType": "YulExpressionStatement",
                              "src": "19843:56:66"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "_1",
                                        "nativeSrc": "19919:2:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "19919:2:66"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "19923:3:66",
                                        "nodeType": "YulLiteral",
                                        "src": "19923:3:66",
                                        "type": "",
                                        "value": "289"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "19915:3:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "19915:3:66"
                                    },
                                    "nativeSrc": "19915:12:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "19915:12:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "19929:66:66",
                                    "nodeType": "YulLiteral",
                                    "src": "19929:66:66",
                                    "type": "",
                                    "value": "0x6573293a0a4f50454e5a455050454c494e5f424153485f504154483d22433a2f"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "19908:6:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "19908:6:66"
                                },
                                "nativeSrc": "19908:88:66",
                                "nodeType": "YulFunctionCall",
                                "src": "19908:88:66"
                              },
                              "nativeSrc": "19908:88:66",
                              "nodeType": "YulExpressionStatement",
                              "src": "19908:88:66"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "_1",
                                        "nativeSrc": "20016:2:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "20016:2:66"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "20020:3:66",
                                        "nodeType": "YulLiteral",
                                        "src": "20020:3:66",
                                        "type": "",
                                        "value": "321"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "20012:3:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "20012:3:66"
                                    },
                                    "nativeSrc": "20012:12:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "20012:12:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "20026:66:66",
                                    "nodeType": "YulLiteral",
                                    "src": "20026:66:66",
                                    "type": "",
                                    "value": "0x50726f6772616d2046696c65732f4769742f62696e2f62617368220000000000"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "20005:6:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "20005:6:66"
                                },
                                "nativeSrc": "20005:88:66",
                                "nodeType": "YulFunctionCall",
                                "src": "20005:88:66"
                              },
                              "nativeSrc": "20005:88:66",
                              "nodeType": "YulExpressionStatement",
                              "src": "20005:88:66"
                            },
                            {
                              "nativeSrc": "20102:19:66",
                              "nodeType": "YulAssignment",
                              "src": "20102:19:66",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "_1",
                                    "nativeSrc": "20113:2:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "20113:2:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "20117:3:66",
                                    "nodeType": "YulLiteral",
                                    "src": "20117:3:66",
                                    "type": "",
                                    "value": "348"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "20109:3:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "20109:3:66"
                                },
                                "nativeSrc": "20109:12:66",
                                "nodeType": "YulFunctionCall",
                                "src": "20109:12:66"
                              },
                              "variableNames": [
                                {
                                  "name": "end",
                                  "nativeSrc": "20102:3:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "20102:3:66"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_packed_t_stringliteral_9645b1309bf78e4558cd11f0c8b7c479bbb946c623d04c306a8843ee1cc47506_t_string_memory_ptr_t_stringliteral_3b53890135633717feb8747563f231c42249fa1cfe7d1f04d5790e40902f3b91__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed",
                        "nativeSrc": "18756:1371:66",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "pos",
                            "nativeSrc": "19073:3:66",
                            "nodeType": "YulTypedName",
                            "src": "19073:3:66",
                            "type": ""
                          },
                          {
                            "name": "value0",
                            "nativeSrc": "19078:6:66",
                            "nodeType": "YulTypedName",
                            "src": "19078:6:66",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "end",
                            "nativeSrc": "19089:3:66",
                            "nodeType": "YulTypedName",
                            "src": "19089:3:66",
                            "type": ""
                          }
                        ],
                        "src": "18756:1371:66"
                      },
                      {
                        "body": {
                          "nativeSrc": "20511:458:66",
                          "nodeType": "YulBlock",
                          "src": "20511:458:66",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nativeSrc": "20528:3:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "20528:3:66"
                                  },
                                  {
                                    "hexValue": "4661696c656420746f2066696e64206c696e6520776974682070726566697820",
                                    "kind": "string",
                                    "nativeSrc": "20533:34:66",
                                    "nodeType": "YulLiteral",
                                    "src": "20533:34:66",
                                    "type": "",
                                    "value": "Failed to find line with prefix "
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "20521:6:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "20521:6:66"
                                },
                                "nativeSrc": "20521:47:66",
                                "nodeType": "YulFunctionCall",
                                "src": "20521:47:66"
                              },
                              "nativeSrc": "20521:47:66",
                              "nodeType": "YulExpressionStatement",
                              "src": "20521:47:66"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "pos",
                                        "nativeSrc": "20588:3:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "20588:3:66"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "20593:2:66",
                                        "nodeType": "YulLiteral",
                                        "src": "20593:2:66",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "20584:3:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "20584:3:66"
                                    },
                                    "nativeSrc": "20584:12:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "20584:12:66"
                                  },
                                  {
                                    "hexValue": "27",
                                    "kind": "string",
                                    "nativeSrc": "20598:3:66",
                                    "nodeType": "YulLiteral",
                                    "src": "20598:3:66",
                                    "type": "",
                                    "value": "'"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "20577:6:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "20577:6:66"
                                },
                                "nativeSrc": "20577:25:66",
                                "nodeType": "YulFunctionCall",
                                "src": "20577:25:66"
                              },
                              "nativeSrc": "20577:25:66",
                              "nodeType": "YulExpressionStatement",
                              "src": "20577:25:66"
                            },
                            {
                              "nativeSrc": "20611:27:66",
                              "nodeType": "YulVariableDeclaration",
                              "src": "20611:27:66",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nativeSrc": "20631:6:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "20631:6:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nativeSrc": "20625:5:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "20625:5:66"
                                },
                                "nativeSrc": "20625:13:66",
                                "nodeType": "YulFunctionCall",
                                "src": "20625:13:66"
                              },
                              "variables": [
                                {
                                  "name": "length",
                                  "nativeSrc": "20615:6:66",
                                  "nodeType": "YulTypedName",
                                  "src": "20615:6:66",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value0",
                                        "nativeSrc": "20686:6:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "20686:6:66"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "20694:2:66",
                                        "nodeType": "YulLiteral",
                                        "src": "20694:2:66",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "20682:3:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "20682:3:66"
                                    },
                                    "nativeSrc": "20682:15:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "20682:15:66"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "pos",
                                        "nativeSrc": "20703:3:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "20703:3:66"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "20708:2:66",
                                        "nodeType": "YulLiteral",
                                        "src": "20708:2:66",
                                        "type": "",
                                        "value": "33"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "20699:3:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "20699:3:66"
                                    },
                                    "nativeSrc": "20699:12:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "20699:12:66"
                                  },
                                  {
                                    "name": "length",
                                    "nativeSrc": "20713:6:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "20713:6:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "copy_memory_to_memory_with_cleanup",
                                  "nativeSrc": "20647:34:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "20647:34:66"
                                },
                                "nativeSrc": "20647:73:66",
                                "nodeType": "YulFunctionCall",
                                "src": "20647:73:66"
                              },
                              "nativeSrc": "20647:73:66",
                              "nodeType": "YulExpressionStatement",
                              "src": "20647:73:66"
                            },
                            {
                              "nativeSrc": "20729:26:66",
                              "nodeType": "YulVariableDeclaration",
                              "src": "20729:26:66",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nativeSrc": "20743:3:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "20743:3:66"
                                  },
                                  {
                                    "name": "length",
                                    "nativeSrc": "20748:6:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "20748:6:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "20739:3:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "20739:3:66"
                                },
                                "nativeSrc": "20739:16:66",
                                "nodeType": "YulFunctionCall",
                                "src": "20739:16:66"
                              },
                              "variables": [
                                {
                                  "name": "_1",
                                  "nativeSrc": "20733:2:66",
                                  "nodeType": "YulTypedName",
                                  "src": "20733:2:66",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "_1",
                                        "nativeSrc": "20775:2:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "20775:2:66"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "20779:2:66",
                                        "nodeType": "YulLiteral",
                                        "src": "20779:2:66",
                                        "type": "",
                                        "value": "33"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "20771:3:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "20771:3:66"
                                    },
                                    "nativeSrc": "20771:11:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "20771:11:66"
                                  },
                                  {
                                    "hexValue": "2720696e206f75747075743a20",
                                    "kind": "string",
                                    "nativeSrc": "20784:15:66",
                                    "nodeType": "YulLiteral",
                                    "src": "20784:15:66",
                                    "type": "",
                                    "value": "' in output: "
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "20764:6:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "20764:6:66"
                                },
                                "nativeSrc": "20764:36:66",
                                "nodeType": "YulFunctionCall",
                                "src": "20764:36:66"
                              },
                              "nativeSrc": "20764:36:66",
                              "nodeType": "YulExpressionStatement",
                              "src": "20764:36:66"
                            },
                            {
                              "nativeSrc": "20809:29:66",
                              "nodeType": "YulVariableDeclaration",
                              "src": "20809:29:66",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "value1",
                                    "nativeSrc": "20831:6:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "20831:6:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nativeSrc": "20825:5:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "20825:5:66"
                                },
                                "nativeSrc": "20825:13:66",
                                "nodeType": "YulFunctionCall",
                                "src": "20825:13:66"
                              },
                              "variables": [
                                {
                                  "name": "length_1",
                                  "nativeSrc": "20813:8:66",
                                  "nodeType": "YulTypedName",
                                  "src": "20813:8:66",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value1",
                                        "nativeSrc": "20886:6:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "20886:6:66"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "20894:2:66",
                                        "nodeType": "YulLiteral",
                                        "src": "20894:2:66",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "20882:3:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "20882:3:66"
                                    },
                                    "nativeSrc": "20882:15:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "20882:15:66"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "_1",
                                        "nativeSrc": "20903:2:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "20903:2:66"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "20907:2:66",
                                        "nodeType": "YulLiteral",
                                        "src": "20907:2:66",
                                        "type": "",
                                        "value": "46"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "20899:3:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "20899:3:66"
                                    },
                                    "nativeSrc": "20899:11:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "20899:11:66"
                                  },
                                  {
                                    "name": "length_1",
                                    "nativeSrc": "20912:8:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "20912:8:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "copy_memory_to_memory_with_cleanup",
                                  "nativeSrc": "20847:34:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "20847:34:66"
                                },
                                "nativeSrc": "20847:74:66",
                                "nodeType": "YulFunctionCall",
                                "src": "20847:74:66"
                              },
                              "nativeSrc": "20847:74:66",
                              "nodeType": "YulExpressionStatement",
                              "src": "20847:74:66"
                            },
                            {
                              "nativeSrc": "20930:33:66",
                              "nodeType": "YulAssignment",
                              "src": "20930:33:66",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "_1",
                                        "nativeSrc": "20945:2:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "20945:2:66"
                                      },
                                      {
                                        "name": "length_1",
                                        "nativeSrc": "20949:8:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "20949:8:66"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "20941:3:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "20941:3:66"
                                    },
                                    "nativeSrc": "20941:17:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "20941:17:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "20960:2:66",
                                    "nodeType": "YulLiteral",
                                    "src": "20960:2:66",
                                    "type": "",
                                    "value": "46"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "20937:3:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "20937:3:66"
                                },
                                "nativeSrc": "20937:26:66",
                                "nodeType": "YulFunctionCall",
                                "src": "20937:26:66"
                              },
                              "variableNames": [
                                {
                                  "name": "end",
                                  "nativeSrc": "20930:3:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "20930:3:66"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_packed_t_stringliteral_47a92f1f2e2401ec3324f84072908fea4ea6788425ad1f8f366b1db3c55810d9_t_string_memory_ptr_t_stringliteral_93bcd8f909ee99a96370a8190ddeafae0a627cb872c93cfdab495c157ddc6c8f_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_bytes13_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed",
                        "nativeSrc": "20132:837:66",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "pos",
                            "nativeSrc": "20479:3:66",
                            "nodeType": "YulTypedName",
                            "src": "20479:3:66",
                            "type": ""
                          },
                          {
                            "name": "value1",
                            "nativeSrc": "20484:6:66",
                            "nodeType": "YulTypedName",
                            "src": "20484:6:66",
                            "type": ""
                          },
                          {
                            "name": "value0",
                            "nativeSrc": "20492:6:66",
                            "nodeType": "YulTypedName",
                            "src": "20492:6:66",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "end",
                            "nativeSrc": "20503:3:66",
                            "nodeType": "YulTypedName",
                            "src": "20503:3:66",
                            "type": ""
                          }
                        ],
                        "src": "20132:837:66"
                      },
                      {
                        "body": {
                          "nativeSrc": "21204:220:66",
                          "nodeType": "YulBlock",
                          "src": "21204:220:66",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nativeSrc": "21221:3:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "21221:3:66"
                                  },
                                  {
                                    "hexValue": "406f70656e7a657070656c696e2f75706772616465732d636f726540",
                                    "kind": "string",
                                    "nativeSrc": "21226:30:66",
                                    "nodeType": "YulLiteral",
                                    "src": "21226:30:66",
                                    "type": "",
                                    "value": "@openzeppelin/upgrades-core@"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "21214:6:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "21214:6:66"
                                },
                                "nativeSrc": "21214:43:66",
                                "nodeType": "YulFunctionCall",
                                "src": "21214:43:66"
                              },
                              "nativeSrc": "21214:43:66",
                              "nodeType": "YulExpressionStatement",
                              "src": "21214:43:66"
                            },
                            {
                              "nativeSrc": "21266:27:66",
                              "nodeType": "YulVariableDeclaration",
                              "src": "21266:27:66",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nativeSrc": "21286:6:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "21286:6:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nativeSrc": "21280:5:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "21280:5:66"
                                },
                                "nativeSrc": "21280:13:66",
                                "nodeType": "YulFunctionCall",
                                "src": "21280:13:66"
                              },
                              "variables": [
                                {
                                  "name": "length",
                                  "nativeSrc": "21270:6:66",
                                  "nodeType": "YulTypedName",
                                  "src": "21270:6:66",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value0",
                                        "nativeSrc": "21341:6:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "21341:6:66"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "21349:4:66",
                                        "nodeType": "YulLiteral",
                                        "src": "21349:4:66",
                                        "type": "",
                                        "value": "0x20"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "21337:3:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "21337:3:66"
                                    },
                                    "nativeSrc": "21337:17:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "21337:17:66"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "pos",
                                        "nativeSrc": "21360:3:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "21360:3:66"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "21365:2:66",
                                        "nodeType": "YulLiteral",
                                        "src": "21365:2:66",
                                        "type": "",
                                        "value": "28"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "21356:3:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "21356:3:66"
                                    },
                                    "nativeSrc": "21356:12:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "21356:12:66"
                                  },
                                  {
                                    "name": "length",
                                    "nativeSrc": "21370:6:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "21370:6:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "copy_memory_to_memory_with_cleanup",
                                  "nativeSrc": "21302:34:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "21302:34:66"
                                },
                                "nativeSrc": "21302:75:66",
                                "nodeType": "YulFunctionCall",
                                "src": "21302:75:66"
                              },
                              "nativeSrc": "21302:75:66",
                              "nodeType": "YulExpressionStatement",
                              "src": "21302:75:66"
                            },
                            {
                              "nativeSrc": "21386:32:66",
                              "nodeType": "YulAssignment",
                              "src": "21386:32:66",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "pos",
                                        "nativeSrc": "21401:3:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "21401:3:66"
                                      },
                                      {
                                        "name": "length",
                                        "nativeSrc": "21406:6:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "21406:6:66"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "21397:3:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "21397:3:66"
                                    },
                                    "nativeSrc": "21397:16:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "21397:16:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "21415:2:66",
                                    "nodeType": "YulLiteral",
                                    "src": "21415:2:66",
                                    "type": "",
                                    "value": "28"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "21393:3:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "21393:3:66"
                                },
                                "nativeSrc": "21393:25:66",
                                "nodeType": "YulFunctionCall",
                                "src": "21393:25:66"
                              },
                              "variableNames": [
                                {
                                  "name": "end",
                                  "nativeSrc": "21386:3:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "21386:3:66"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_packed_t_stringliteral_459e684ed08b96f40b9b516154105232b46d6e25e3ebbcc2460d0ad2691a0f84_t_string_memory_ptr__to_t_bytes28_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed",
                        "nativeSrc": "20974:450:66",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "pos",
                            "nativeSrc": "21180:3:66",
                            "nodeType": "YulTypedName",
                            "src": "21180:3:66",
                            "type": ""
                          },
                          {
                            "name": "value0",
                            "nativeSrc": "21185:6:66",
                            "nodeType": "YulTypedName",
                            "src": "21185:6:66",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "end",
                            "nativeSrc": "21196:3:66",
                            "nodeType": "YulTypedName",
                            "src": "21196:3:66",
                            "type": ""
                          }
                        ],
                        "src": "20974:450:66"
                      },
                      {
                        "body": {
                          "nativeSrc": "21478:79:66",
                          "nodeType": "YulBlock",
                          "src": "21478:79:66",
                          "statements": [
                            {
                              "nativeSrc": "21488:17:66",
                              "nodeType": "YulAssignment",
                              "src": "21488:17:66",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "x",
                                    "nativeSrc": "21500:1:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "21500:1:66"
                                  },
                                  {
                                    "name": "y",
                                    "nativeSrc": "21503:1:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "21503:1:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nativeSrc": "21496:3:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "21496:3:66"
                                },
                                "nativeSrc": "21496:9:66",
                                "nodeType": "YulFunctionCall",
                                "src": "21496:9:66"
                              },
                              "variableNames": [
                                {
                                  "name": "diff",
                                  "nativeSrc": "21488:4:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "21488:4:66"
                                }
                              ]
                            },
                            {
                              "body": {
                                "nativeSrc": "21529:22:66",
                                "nodeType": "YulBlock",
                                "src": "21529:22:66",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [],
                                      "functionName": {
                                        "name": "panic_error_0x11",
                                        "nativeSrc": "21531:16:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "21531:16:66"
                                      },
                                      "nativeSrc": "21531:18:66",
                                      "nodeType": "YulFunctionCall",
                                      "src": "21531:18:66"
                                    },
                                    "nativeSrc": "21531:18:66",
                                    "nodeType": "YulExpressionStatement",
                                    "src": "21531:18:66"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "name": "diff",
                                    "nativeSrc": "21520:4:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "21520:4:66"
                                  },
                                  {
                                    "name": "x",
                                    "nativeSrc": "21526:1:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "21526:1:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nativeSrc": "21517:2:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "21517:2:66"
                                },
                                "nativeSrc": "21517:11:66",
                                "nodeType": "YulFunctionCall",
                                "src": "21517:11:66"
                              },
                              "nativeSrc": "21514:37:66",
                              "nodeType": "YulIf",
                              "src": "21514:37:66"
                            }
                          ]
                        },
                        "name": "checked_sub_t_uint256",
                        "nativeSrc": "21429:128:66",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "x",
                            "nativeSrc": "21460:1:66",
                            "nodeType": "YulTypedName",
                            "src": "21460:1:66",
                            "type": ""
                          },
                          {
                            "name": "y",
                            "nativeSrc": "21463:1:66",
                            "nodeType": "YulTypedName",
                            "src": "21463:1:66",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "diff",
                            "nativeSrc": "21469:4:66",
                            "nodeType": "YulTypedName",
                            "src": "21469:4:66",
                            "type": ""
                          }
                        ],
                        "src": "21429:128:66"
                      },
                      {
                        "body": {
                          "nativeSrc": "21893:461:66",
                          "nodeType": "YulBlock",
                          "src": "21893:461:66",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nativeSrc": "21910:3:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "21910:3:66"
                                  },
                                  {
                                    "hexValue": "436f6e7472616374206e616d6520",
                                    "kind": "string",
                                    "nativeSrc": "21915:16:66",
                                    "nodeType": "YulLiteral",
                                    "src": "21915:16:66",
                                    "type": "",
                                    "value": "Contract name "
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "21903:6:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "21903:6:66"
                                },
                                "nativeSrc": "21903:29:66",
                                "nodeType": "YulFunctionCall",
                                "src": "21903:29:66"
                              },
                              "nativeSrc": "21903:29:66",
                              "nodeType": "YulExpressionStatement",
                              "src": "21903:29:66"
                            },
                            {
                              "nativeSrc": "21941:27:66",
                              "nodeType": "YulVariableDeclaration",
                              "src": "21941:27:66",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nativeSrc": "21961:6:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "21961:6:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nativeSrc": "21955:5:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "21955:5:66"
                                },
                                "nativeSrc": "21955:13:66",
                                "nodeType": "YulFunctionCall",
                                "src": "21955:13:66"
                              },
                              "variables": [
                                {
                                  "name": "length",
                                  "nativeSrc": "21945:6:66",
                                  "nodeType": "YulTypedName",
                                  "src": "21945:6:66",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value0",
                                        "nativeSrc": "22016:6:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "22016:6:66"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "22024:4:66",
                                        "nodeType": "YulLiteral",
                                        "src": "22024:4:66",
                                        "type": "",
                                        "value": "0x20"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "22012:3:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "22012:3:66"
                                    },
                                    "nativeSrc": "22012:17:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "22012:17:66"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "pos",
                                        "nativeSrc": "22035:3:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "22035:3:66"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "22040:2:66",
                                        "nodeType": "YulLiteral",
                                        "src": "22040:2:66",
                                        "type": "",
                                        "value": "14"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "22031:3:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "22031:3:66"
                                    },
                                    "nativeSrc": "22031:12:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "22031:12:66"
                                  },
                                  {
                                    "name": "length",
                                    "nativeSrc": "22045:6:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "22045:6:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "copy_memory_to_memory_with_cleanup",
                                  "nativeSrc": "21977:34:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "21977:34:66"
                                },
                                "nativeSrc": "21977:75:66",
                                "nodeType": "YulFunctionCall",
                                "src": "21977:75:66"
                              },
                              "nativeSrc": "21977:75:66",
                              "nodeType": "YulExpressionStatement",
                              "src": "21977:75:66"
                            },
                            {
                              "nativeSrc": "22061:26:66",
                              "nodeType": "YulVariableDeclaration",
                              "src": "22061:26:66",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nativeSrc": "22075:3:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "22075:3:66"
                                  },
                                  {
                                    "name": "length",
                                    "nativeSrc": "22080:6:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "22080:6:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "22071:3:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "22071:3:66"
                                },
                                "nativeSrc": "22071:16:66",
                                "nodeType": "YulFunctionCall",
                                "src": "22071:16:66"
                              },
                              "variables": [
                                {
                                  "name": "_1",
                                  "nativeSrc": "22065:2:66",
                                  "nodeType": "YulTypedName",
                                  "src": "22065:2:66",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "_1",
                                        "nativeSrc": "22107:2:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "22107:2:66"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "22111:2:66",
                                        "nodeType": "YulLiteral",
                                        "src": "22111:2:66",
                                        "type": "",
                                        "value": "14"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "22103:3:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "22103:3:66"
                                    },
                                    "nativeSrc": "22103:11:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "22103:11:66"
                                  },
                                  {
                                    "hexValue": "206d75737420626520696e2074686520666f726d6174204d79436f6e74726163",
                                    "kind": "string",
                                    "nativeSrc": "22116:34:66",
                                    "nodeType": "YulLiteral",
                                    "src": "22116:34:66",
                                    "type": "",
                                    "value": " must be in the format MyContrac"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "22096:6:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "22096:6:66"
                                },
                                "nativeSrc": "22096:55:66",
                                "nodeType": "YulFunctionCall",
                                "src": "22096:55:66"
                              },
                              "nativeSrc": "22096:55:66",
                              "nodeType": "YulExpressionStatement",
                              "src": "22096:55:66"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "_1",
                                        "nativeSrc": "22171:2:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "22171:2:66"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "22175:2:66",
                                        "nodeType": "YulLiteral",
                                        "src": "22175:2:66",
                                        "type": "",
                                        "value": "46"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "22167:3:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "22167:3:66"
                                    },
                                    "nativeSrc": "22167:11:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "22167:11:66"
                                  },
                                  {
                                    "hexValue": "742e736f6c3a4d79436f6e7472616374206f72204d79436f6e74726163742e73",
                                    "kind": "string",
                                    "nativeSrc": "22180:34:66",
                                    "nodeType": "YulLiteral",
                                    "src": "22180:34:66",
                                    "type": "",
                                    "value": "t.sol:MyContract or MyContract.s"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "22160:6:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "22160:6:66"
                                },
                                "nativeSrc": "22160:55:66",
                                "nodeType": "YulFunctionCall",
                                "src": "22160:55:66"
                              },
                              "nativeSrc": "22160:55:66",
                              "nodeType": "YulExpressionStatement",
                              "src": "22160:55:66"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "_1",
                                        "nativeSrc": "22235:2:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "22235:2:66"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "22239:2:66",
                                        "nodeType": "YulLiteral",
                                        "src": "22239:2:66",
                                        "type": "",
                                        "value": "78"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "22231:3:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "22231:3:66"
                                    },
                                    "nativeSrc": "22231:11:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "22231:11:66"
                                  },
                                  {
                                    "hexValue": "6f6c206f72206f75742f4d79436f6e74726163742e736f6c2f4d79436f6e7472",
                                    "kind": "string",
                                    "nativeSrc": "22244:34:66",
                                    "nodeType": "YulLiteral",
                                    "src": "22244:34:66",
                                    "type": "",
                                    "value": "ol or out/MyContract.sol/MyContr"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "22224:6:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "22224:6:66"
                                },
                                "nativeSrc": "22224:55:66",
                                "nodeType": "YulFunctionCall",
                                "src": "22224:55:66"
                              },
                              "nativeSrc": "22224:55:66",
                              "nodeType": "YulExpressionStatement",
                              "src": "22224:55:66"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "_1",
                                        "nativeSrc": "22299:2:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "22299:2:66"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "22303:3:66",
                                        "nodeType": "YulLiteral",
                                        "src": "22303:3:66",
                                        "type": "",
                                        "value": "110"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "22295:3:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "22295:3:66"
                                    },
                                    "nativeSrc": "22295:12:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "22295:12:66"
                                  },
                                  {
                                    "hexValue": "6163742e6a736f6e",
                                    "kind": "string",
                                    "nativeSrc": "22309:10:66",
                                    "nodeType": "YulLiteral",
                                    "src": "22309:10:66",
                                    "type": "",
                                    "value": "act.json"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "22288:6:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "22288:6:66"
                                },
                                "nativeSrc": "22288:32:66",
                                "nodeType": "YulFunctionCall",
                                "src": "22288:32:66"
                              },
                              "nativeSrc": "22288:32:66",
                              "nodeType": "YulExpressionStatement",
                              "src": "22288:32:66"
                            },
                            {
                              "nativeSrc": "22329:19:66",
                              "nodeType": "YulAssignment",
                              "src": "22329:19:66",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "_1",
                                    "nativeSrc": "22340:2:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "22340:2:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "22344:3:66",
                                    "nodeType": "YulLiteral",
                                    "src": "22344:3:66",
                                    "type": "",
                                    "value": "118"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "22336:3:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "22336:3:66"
                                },
                                "nativeSrc": "22336:12:66",
                                "nodeType": "YulFunctionCall",
                                "src": "22336:12:66"
                              },
                              "variableNames": [
                                {
                                  "name": "end",
                                  "nativeSrc": "22329:3:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "22329:3:66"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_packed_t_stringliteral_3f120aa75756516f8ad13d558a5b9e5a44bb19eefe0388ce8c7f36f6df8edea5_t_string_memory_ptr_t_stringliteral_9a274a4ef728d0f993bc2f4dc24a093c4d7da9d1cb0dff5da2bf5cfca4271809__to_t_bytes14_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed",
                        "nativeSrc": "21562:792:66",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "pos",
                            "nativeSrc": "21869:3:66",
                            "nodeType": "YulTypedName",
                            "src": "21869:3:66",
                            "type": ""
                          },
                          {
                            "name": "value0",
                            "nativeSrc": "21874:6:66",
                            "nodeType": "YulTypedName",
                            "src": "21874:6:66",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "end",
                            "nativeSrc": "21885:3:66",
                            "nodeType": "YulTypedName",
                            "src": "21885:3:66",
                            "type": ""
                          }
                        ],
                        "src": "21562:792:66"
                      },
                      {
                        "body": {
                          "nativeSrc": "22407:77:66",
                          "nodeType": "YulBlock",
                          "src": "22407:77:66",
                          "statements": [
                            {
                              "nativeSrc": "22417:16:66",
                              "nodeType": "YulAssignment",
                              "src": "22417:16:66",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "x",
                                    "nativeSrc": "22428:1:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "22428:1:66"
                                  },
                                  {
                                    "name": "y",
                                    "nativeSrc": "22431:1:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "22431:1:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "22424:3:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "22424:3:66"
                                },
                                "nativeSrc": "22424:9:66",
                                "nodeType": "YulFunctionCall",
                                "src": "22424:9:66"
                              },
                              "variableNames": [
                                {
                                  "name": "sum",
                                  "nativeSrc": "22417:3:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "22417:3:66"
                                }
                              ]
                            },
                            {
                              "body": {
                                "nativeSrc": "22456:22:66",
                                "nodeType": "YulBlock",
                                "src": "22456:22:66",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [],
                                      "functionName": {
                                        "name": "panic_error_0x11",
                                        "nativeSrc": "22458:16:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "22458:16:66"
                                      },
                                      "nativeSrc": "22458:18:66",
                                      "nodeType": "YulFunctionCall",
                                      "src": "22458:18:66"
                                    },
                                    "nativeSrc": "22458:18:66",
                                    "nodeType": "YulExpressionStatement",
                                    "src": "22458:18:66"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "name": "x",
                                    "nativeSrc": "22448:1:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "22448:1:66"
                                  },
                                  {
                                    "name": "sum",
                                    "nativeSrc": "22451:3:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "22451:3:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nativeSrc": "22445:2:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "22445:2:66"
                                },
                                "nativeSrc": "22445:10:66",
                                "nodeType": "YulFunctionCall",
                                "src": "22445:10:66"
                              },
                              "nativeSrc": "22442:36:66",
                              "nodeType": "YulIf",
                              "src": "22442:36:66"
                            }
                          ]
                        },
                        "name": "checked_add_t_uint256",
                        "nativeSrc": "22359:125:66",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "x",
                            "nativeSrc": "22390:1:66",
                            "nodeType": "YulTypedName",
                            "src": "22390:1:66",
                            "type": ""
                          },
                          {
                            "name": "y",
                            "nativeSrc": "22393:1:66",
                            "nodeType": "YulTypedName",
                            "src": "22393:1:66",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "sum",
                            "nativeSrc": "22399:3:66",
                            "nodeType": "YulTypedName",
                            "src": "22399:3:66",
                            "type": ""
                          }
                        ],
                        "src": "22359:125:66"
                      },
                      {
                        "body": {
                          "nativeSrc": "22521:95:66",
                          "nodeType": "YulBlock",
                          "src": "22521:95:66",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nativeSrc": "22538:1:66",
                                    "nodeType": "YulLiteral",
                                    "src": "22538:1:66",
                                    "type": "",
                                    "value": "0"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nativeSrc": "22545:3:66",
                                        "nodeType": "YulLiteral",
                                        "src": "22545:3:66",
                                        "type": "",
                                        "value": "224"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "22550:10:66",
                                        "nodeType": "YulLiteral",
                                        "src": "22550:10:66",
                                        "type": "",
                                        "value": "0x4e487b71"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nativeSrc": "22541:3:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "22541:3:66"
                                    },
                                    "nativeSrc": "22541:20:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "22541:20:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "22531:6:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "22531:6:66"
                                },
                                "nativeSrc": "22531:31:66",
                                "nodeType": "YulFunctionCall",
                                "src": "22531:31:66"
                              },
                              "nativeSrc": "22531:31:66",
                              "nodeType": "YulExpressionStatement",
                              "src": "22531:31:66"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nativeSrc": "22578:1:66",
                                    "nodeType": "YulLiteral",
                                    "src": "22578:1:66",
                                    "type": "",
                                    "value": "4"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "22581:4:66",
                                    "nodeType": "YulLiteral",
                                    "src": "22581:4:66",
                                    "type": "",
                                    "value": "0x12"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "22571:6:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "22571:6:66"
                                },
                                "nativeSrc": "22571:15:66",
                                "nodeType": "YulFunctionCall",
                                "src": "22571:15:66"
                              },
                              "nativeSrc": "22571:15:66",
                              "nodeType": "YulExpressionStatement",
                              "src": "22571:15:66"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nativeSrc": "22602:1:66",
                                    "nodeType": "YulLiteral",
                                    "src": "22602:1:66",
                                    "type": "",
                                    "value": "0"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "22605:4:66",
                                    "nodeType": "YulLiteral",
                                    "src": "22605:4:66",
                                    "type": "",
                                    "value": "0x24"
                                  }
                                ],
                                "functionName": {
                                  "name": "revert",
                                  "nativeSrc": "22595:6:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "22595:6:66"
                                },
                                "nativeSrc": "22595:15:66",
                                "nodeType": "YulFunctionCall",
                                "src": "22595:15:66"
                              },
                              "nativeSrc": "22595:15:66",
                              "nodeType": "YulExpressionStatement",
                              "src": "22595:15:66"
                            }
                          ]
                        },
                        "name": "panic_error_0x12",
                        "nativeSrc": "22489:127:66",
                        "nodeType": "YulFunctionDefinition",
                        "src": "22489:127:66"
                      },
                      {
                        "body": {
                          "nativeSrc": "22808:309:66",
                          "nodeType": "YulBlock",
                          "src": "22808:309:66",
                          "statements": [
                            {
                              "nativeSrc": "22818:27:66",
                              "nodeType": "YulVariableDeclaration",
                              "src": "22818:27:66",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nativeSrc": "22838:6:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "22838:6:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nativeSrc": "22832:5:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "22832:5:66"
                                },
                                "nativeSrc": "22832:13:66",
                                "nodeType": "YulFunctionCall",
                                "src": "22832:13:66"
                              },
                              "variables": [
                                {
                                  "name": "length",
                                  "nativeSrc": "22822:6:66",
                                  "nodeType": "YulTypedName",
                                  "src": "22822:6:66",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value0",
                                        "nativeSrc": "22893:6:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "22893:6:66"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "22901:4:66",
                                        "nodeType": "YulLiteral",
                                        "src": "22901:4:66",
                                        "type": "",
                                        "value": "0x20"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "22889:3:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "22889:3:66"
                                    },
                                    "nativeSrc": "22889:17:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "22889:17:66"
                                  },
                                  {
                                    "name": "pos",
                                    "nativeSrc": "22908:3:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "22908:3:66"
                                  },
                                  {
                                    "name": "length",
                                    "nativeSrc": "22913:6:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "22913:6:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "copy_memory_to_memory_with_cleanup",
                                  "nativeSrc": "22854:34:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "22854:34:66"
                                },
                                "nativeSrc": "22854:66:66",
                                "nodeType": "YulFunctionCall",
                                "src": "22854:66:66"
                              },
                              "nativeSrc": "22854:66:66",
                              "nodeType": "YulExpressionStatement",
                              "src": "22854:66:66"
                            },
                            {
                              "nativeSrc": "22929:29:66",
                              "nodeType": "YulVariableDeclaration",
                              "src": "22929:29:66",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nativeSrc": "22946:3:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "22946:3:66"
                                  },
                                  {
                                    "name": "length",
                                    "nativeSrc": "22951:6:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "22951:6:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "22942:3:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "22942:3:66"
                                },
                                "nativeSrc": "22942:16:66",
                                "nodeType": "YulFunctionCall",
                                "src": "22942:16:66"
                              },
                              "variables": [
                                {
                                  "name": "end_1",
                                  "nativeSrc": "22933:5:66",
                                  "nodeType": "YulTypedName",
                                  "src": "22933:5:66",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nativeSrc": "22967:29:66",
                              "nodeType": "YulVariableDeclaration",
                              "src": "22967:29:66",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "value1",
                                    "nativeSrc": "22989:6:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "22989:6:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nativeSrc": "22983:5:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "22983:5:66"
                                },
                                "nativeSrc": "22983:13:66",
                                "nodeType": "YulFunctionCall",
                                "src": "22983:13:66"
                              },
                              "variables": [
                                {
                                  "name": "length_1",
                                  "nativeSrc": "22971:8:66",
                                  "nodeType": "YulTypedName",
                                  "src": "22971:8:66",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value1",
                                        "nativeSrc": "23044:6:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "23044:6:66"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "23052:4:66",
                                        "nodeType": "YulLiteral",
                                        "src": "23052:4:66",
                                        "type": "",
                                        "value": "0x20"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "23040:3:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "23040:3:66"
                                    },
                                    "nativeSrc": "23040:17:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "23040:17:66"
                                  },
                                  {
                                    "name": "end_1",
                                    "nativeSrc": "23059:5:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "23059:5:66"
                                  },
                                  {
                                    "name": "length_1",
                                    "nativeSrc": "23066:8:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "23066:8:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "copy_memory_to_memory_with_cleanup",
                                  "nativeSrc": "23005:34:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "23005:34:66"
                                },
                                "nativeSrc": "23005:70:66",
                                "nodeType": "YulFunctionCall",
                                "src": "23005:70:66"
                              },
                              "nativeSrc": "23005:70:66",
                              "nodeType": "YulExpressionStatement",
                              "src": "23005:70:66"
                            },
                            {
                              "nativeSrc": "23084:27:66",
                              "nodeType": "YulAssignment",
                              "src": "23084:27:66",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "end_1",
                                    "nativeSrc": "23095:5:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "23095:5:66"
                                  },
                                  {
                                    "name": "length_1",
                                    "nativeSrc": "23102:8:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "23102:8:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "23091:3:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "23091:3:66"
                                },
                                "nativeSrc": "23091:20:66",
                                "nodeType": "YulFunctionCall",
                                "src": "23091:20:66"
                              },
                              "variableNames": [
                                {
                                  "name": "end",
                                  "nativeSrc": "23084:3:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "23084:3:66"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed",
                        "nativeSrc": "22621:496:66",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "pos",
                            "nativeSrc": "22776:3:66",
                            "nodeType": "YulTypedName",
                            "src": "22776:3:66",
                            "type": ""
                          },
                          {
                            "name": "value1",
                            "nativeSrc": "22781:6:66",
                            "nodeType": "YulTypedName",
                            "src": "22781:6:66",
                            "type": ""
                          },
                          {
                            "name": "value0",
                            "nativeSrc": "22789:6:66",
                            "nodeType": "YulTypedName",
                            "src": "22789:6:66",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "end",
                            "nativeSrc": "22800:3:66",
                            "nodeType": "YulTypedName",
                            "src": "22800:3:66",
                            "type": ""
                          }
                        ],
                        "src": "22621:496:66"
                      },
                      {
                        "body": {
                          "nativeSrc": "23351:212:66",
                          "nodeType": "YulBlock",
                          "src": "23351:212:66",
                          "statements": [
                            {
                              "nativeSrc": "23361:27:66",
                              "nodeType": "YulVariableDeclaration",
                              "src": "23361:27:66",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nativeSrc": "23381:6:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "23381:6:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nativeSrc": "23375:5:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "23375:5:66"
                                },
                                "nativeSrc": "23375:13:66",
                                "nodeType": "YulFunctionCall",
                                "src": "23375:13:66"
                              },
                              "variables": [
                                {
                                  "name": "length",
                                  "nativeSrc": "23365:6:66",
                                  "nodeType": "YulTypedName",
                                  "src": "23365:6:66",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value0",
                                        "nativeSrc": "23436:6:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "23436:6:66"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "23444:4:66",
                                        "nodeType": "YulLiteral",
                                        "src": "23444:4:66",
                                        "type": "",
                                        "value": "0x20"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "23432:3:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "23432:3:66"
                                    },
                                    "nativeSrc": "23432:17:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "23432:17:66"
                                  },
                                  {
                                    "name": "pos",
                                    "nativeSrc": "23451:3:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "23451:3:66"
                                  },
                                  {
                                    "name": "length",
                                    "nativeSrc": "23456:6:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "23456:6:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "copy_memory_to_memory_with_cleanup",
                                  "nativeSrc": "23397:34:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "23397:34:66"
                                },
                                "nativeSrc": "23397:66:66",
                                "nodeType": "YulFunctionCall",
                                "src": "23397:66:66"
                              },
                              "nativeSrc": "23397:66:66",
                              "nodeType": "YulExpressionStatement",
                              "src": "23397:66:66"
                            },
                            {
                              "nativeSrc": "23472:29:66",
                              "nodeType": "YulVariableDeclaration",
                              "src": "23472:29:66",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nativeSrc": "23489:3:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "23489:3:66"
                                  },
                                  {
                                    "name": "length",
                                    "nativeSrc": "23494:6:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "23494:6:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "23485:3:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "23485:3:66"
                                },
                                "nativeSrc": "23485:16:66",
                                "nodeType": "YulFunctionCall",
                                "src": "23485:16:66"
                              },
                              "variables": [
                                {
                                  "name": "end_1",
                                  "nativeSrc": "23476:5:66",
                                  "nodeType": "YulTypedName",
                                  "src": "23476:5:66",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "end_1",
                                    "nativeSrc": "23517:5:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "23517:5:66"
                                  },
                                  {
                                    "hexValue": "20",
                                    "kind": "string",
                                    "nativeSrc": "23524:3:66",
                                    "nodeType": "YulLiteral",
                                    "src": "23524:3:66",
                                    "type": "",
                                    "value": " "
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "23510:6:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "23510:6:66"
                                },
                                "nativeSrc": "23510:18:66",
                                "nodeType": "YulFunctionCall",
                                "src": "23510:18:66"
                              },
                              "nativeSrc": "23510:18:66",
                              "nodeType": "YulExpressionStatement",
                              "src": "23510:18:66"
                            },
                            {
                              "nativeSrc": "23537:20:66",
                              "nodeType": "YulAssignment",
                              "src": "23537:20:66",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "end_1",
                                    "nativeSrc": "23548:5:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "23548:5:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "23555:1:66",
                                    "nodeType": "YulLiteral",
                                    "src": "23555:1:66",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "23544:3:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "23544:3:66"
                                },
                                "nativeSrc": "23544:13:66",
                                "nodeType": "YulFunctionCall",
                                "src": "23544:13:66"
                              },
                              "variableNames": [
                                {
                                  "name": "end",
                                  "nativeSrc": "23537:3:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "23537:3:66"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_packed_t_string_memory_ptr_t_stringliteral_681afa780d17da29203322b473d3f210a7d621259a4e6ce9e403f5a266ff719a__to_t_string_memory_ptr_t_bytes1__nonPadded_inplace_fromStack_reversed",
                        "nativeSrc": "23122:441:66",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "pos",
                            "nativeSrc": "23327:3:66",
                            "nodeType": "YulTypedName",
                            "src": "23327:3:66",
                            "type": ""
                          },
                          {
                            "name": "value0",
                            "nativeSrc": "23332:6:66",
                            "nodeType": "YulTypedName",
                            "src": "23332:6:66",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "end",
                            "nativeSrc": "23343:3:66",
                            "nodeType": "YulTypedName",
                            "src": "23343:3:66",
                            "type": ""
                          }
                        ],
                        "src": "23122:441:66"
                      },
                      {
                        "body": {
                          "nativeSrc": "23845:352:66",
                          "nodeType": "YulBlock",
                          "src": "23845:352:66",
                          "statements": [
                            {
                              "nativeSrc": "23855:27:66",
                              "nodeType": "YulVariableDeclaration",
                              "src": "23855:27:66",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nativeSrc": "23875:6:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "23875:6:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nativeSrc": "23869:5:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "23869:5:66"
                                },
                                "nativeSrc": "23869:13:66",
                                "nodeType": "YulFunctionCall",
                                "src": "23869:13:66"
                              },
                              "variables": [
                                {
                                  "name": "length",
                                  "nativeSrc": "23859:6:66",
                                  "nodeType": "YulTypedName",
                                  "src": "23859:6:66",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value0",
                                        "nativeSrc": "23930:6:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "23930:6:66"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "23938:4:66",
                                        "nodeType": "YulLiteral",
                                        "src": "23938:4:66",
                                        "type": "",
                                        "value": "0x20"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "23926:3:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "23926:3:66"
                                    },
                                    "nativeSrc": "23926:17:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "23926:17:66"
                                  },
                                  {
                                    "name": "pos",
                                    "nativeSrc": "23945:3:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "23945:3:66"
                                  },
                                  {
                                    "name": "length",
                                    "nativeSrc": "23950:6:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "23950:6:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "copy_memory_to_memory_with_cleanup",
                                  "nativeSrc": "23891:34:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "23891:34:66"
                                },
                                "nativeSrc": "23891:66:66",
                                "nodeType": "YulFunctionCall",
                                "src": "23891:66:66"
                              },
                              "nativeSrc": "23891:66:66",
                              "nodeType": "YulExpressionStatement",
                              "src": "23891:66:66"
                            },
                            {
                              "nativeSrc": "23966:29:66",
                              "nodeType": "YulVariableDeclaration",
                              "src": "23966:29:66",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nativeSrc": "23983:3:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "23983:3:66"
                                  },
                                  {
                                    "name": "length",
                                    "nativeSrc": "23988:6:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "23988:6:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "23979:3:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "23979:3:66"
                                },
                                "nativeSrc": "23979:16:66",
                                "nodeType": "YulFunctionCall",
                                "src": "23979:16:66"
                              },
                              "variables": [
                                {
                                  "name": "end_1",
                                  "nativeSrc": "23970:5:66",
                                  "nodeType": "YulTypedName",
                                  "src": "23970:5:66",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "end_1",
                                    "nativeSrc": "24011:5:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "24011:5:66"
                                  },
                                  {
                                    "hexValue": "3a",
                                    "kind": "string",
                                    "nativeSrc": "24018:3:66",
                                    "nodeType": "YulLiteral",
                                    "src": "24018:3:66",
                                    "type": "",
                                    "value": ":"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "24004:6:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "24004:6:66"
                                },
                                "nativeSrc": "24004:18:66",
                                "nodeType": "YulFunctionCall",
                                "src": "24004:18:66"
                              },
                              "nativeSrc": "24004:18:66",
                              "nodeType": "YulExpressionStatement",
                              "src": "24004:18:66"
                            },
                            {
                              "nativeSrc": "24031:29:66",
                              "nodeType": "YulVariableDeclaration",
                              "src": "24031:29:66",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "value1",
                                    "nativeSrc": "24053:6:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "24053:6:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nativeSrc": "24047:5:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "24047:5:66"
                                },
                                "nativeSrc": "24047:13:66",
                                "nodeType": "YulFunctionCall",
                                "src": "24047:13:66"
                              },
                              "variables": [
                                {
                                  "name": "length_1",
                                  "nativeSrc": "24035:8:66",
                                  "nodeType": "YulTypedName",
                                  "src": "24035:8:66",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value1",
                                        "nativeSrc": "24108:6:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "24108:6:66"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "24116:4:66",
                                        "nodeType": "YulLiteral",
                                        "src": "24116:4:66",
                                        "type": "",
                                        "value": "0x20"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "24104:3:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "24104:3:66"
                                    },
                                    "nativeSrc": "24104:17:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "24104:17:66"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "end_1",
                                        "nativeSrc": "24127:5:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "24127:5:66"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "24134:1:66",
                                        "nodeType": "YulLiteral",
                                        "src": "24134:1:66",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "24123:3:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "24123:3:66"
                                    },
                                    "nativeSrc": "24123:13:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "24123:13:66"
                                  },
                                  {
                                    "name": "length_1",
                                    "nativeSrc": "24138:8:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "24138:8:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "copy_memory_to_memory_with_cleanup",
                                  "nativeSrc": "24069:34:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "24069:34:66"
                                },
                                "nativeSrc": "24069:78:66",
                                "nodeType": "YulFunctionCall",
                                "src": "24069:78:66"
                              },
                              "nativeSrc": "24069:78:66",
                              "nodeType": "YulExpressionStatement",
                              "src": "24069:78:66"
                            },
                            {
                              "nativeSrc": "24156:35:66",
                              "nodeType": "YulAssignment",
                              "src": "24156:35:66",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "end_1",
                                        "nativeSrc": "24171:5:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "24171:5:66"
                                      },
                                      {
                                        "name": "length_1",
                                        "nativeSrc": "24178:8:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "24178:8:66"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "24167:3:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "24167:3:66"
                                    },
                                    "nativeSrc": "24167:20:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "24167:20:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "24189:1:66",
                                    "nodeType": "YulLiteral",
                                    "src": "24189:1:66",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "24163:3:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "24163:3:66"
                                },
                                "nativeSrc": "24163:28:66",
                                "nodeType": "YulFunctionCall",
                                "src": "24163:28:66"
                              },
                              "variableNames": [
                                {
                                  "name": "end",
                                  "nativeSrc": "24156:3:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "24156:3:66"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_packed_t_string_memory_ptr_t_stringliteral_96d280011b274d9410ea6c6fc28e2bb076b01d2fac329c49c4b29a719ec4650c_t_string_memory_ptr__to_t_string_memory_ptr_t_bytes1_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed",
                        "nativeSrc": "23568:629:66",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "pos",
                            "nativeSrc": "23813:3:66",
                            "nodeType": "YulTypedName",
                            "src": "23813:3:66",
                            "type": ""
                          },
                          {
                            "name": "value1",
                            "nativeSrc": "23818:6:66",
                            "nodeType": "YulTypedName",
                            "src": "23818:6:66",
                            "type": ""
                          },
                          {
                            "name": "value0",
                            "nativeSrc": "23826:6:66",
                            "nodeType": "YulTypedName",
                            "src": "23826:6:66",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "end",
                            "nativeSrc": "23837:3:66",
                            "nodeType": "YulTypedName",
                            "src": "23837:3:66",
                            "type": ""
                          }
                        ],
                        "src": "23568:629:66"
                      },
                      {
                        "body": {
                          "nativeSrc": "24254:116:66",
                          "nodeType": "YulBlock",
                          "src": "24254:116:66",
                          "statements": [
                            {
                              "nativeSrc": "24264:20:66",
                              "nodeType": "YulAssignment",
                              "src": "24264:20:66",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "x",
                                    "nativeSrc": "24279:1:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "24279:1:66"
                                  },
                                  {
                                    "name": "y",
                                    "nativeSrc": "24282:1:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "24282:1:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "mul",
                                  "nativeSrc": "24275:3:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "24275:3:66"
                                },
                                "nativeSrc": "24275:9:66",
                                "nodeType": "YulFunctionCall",
                                "src": "24275:9:66"
                              },
                              "variableNames": [
                                {
                                  "name": "product",
                                  "nativeSrc": "24264:7:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "24264:7:66"
                                }
                              ]
                            },
                            {
                              "body": {
                                "nativeSrc": "24342:22:66",
                                "nodeType": "YulBlock",
                                "src": "24342:22:66",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [],
                                      "functionName": {
                                        "name": "panic_error_0x11",
                                        "nativeSrc": "24344:16:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "24344:16:66"
                                      },
                                      "nativeSrc": "24344:18:66",
                                      "nodeType": "YulFunctionCall",
                                      "src": "24344:18:66"
                                    },
                                    "nativeSrc": "24344:18:66",
                                    "nodeType": "YulExpressionStatement",
                                    "src": "24344:18:66"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "x",
                                            "nativeSrc": "24313:1:66",
                                            "nodeType": "YulIdentifier",
                                            "src": "24313:1:66"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "iszero",
                                          "nativeSrc": "24306:6:66",
                                          "nodeType": "YulIdentifier",
                                          "src": "24306:6:66"
                                        },
                                        "nativeSrc": "24306:9:66",
                                        "nodeType": "YulFunctionCall",
                                        "src": "24306:9:66"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "name": "y",
                                            "nativeSrc": "24320:1:66",
                                            "nodeType": "YulIdentifier",
                                            "src": "24320:1:66"
                                          },
                                          {
                                            "arguments": [
                                              {
                                                "name": "product",
                                                "nativeSrc": "24327:7:66",
                                                "nodeType": "YulIdentifier",
                                                "src": "24327:7:66"
                                              },
                                              {
                                                "name": "x",
                                                "nativeSrc": "24336:1:66",
                                                "nodeType": "YulIdentifier",
                                                "src": "24336:1:66"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "div",
                                              "nativeSrc": "24323:3:66",
                                              "nodeType": "YulIdentifier",
                                              "src": "24323:3:66"
                                            },
                                            "nativeSrc": "24323:15:66",
                                            "nodeType": "YulFunctionCall",
                                            "src": "24323:15:66"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "eq",
                                          "nativeSrc": "24317:2:66",
                                          "nodeType": "YulIdentifier",
                                          "src": "24317:2:66"
                                        },
                                        "nativeSrc": "24317:22:66",
                                        "nodeType": "YulFunctionCall",
                                        "src": "24317:22:66"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "or",
                                      "nativeSrc": "24303:2:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "24303:2:66"
                                    },
                                    "nativeSrc": "24303:37:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "24303:37:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nativeSrc": "24296:6:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "24296:6:66"
                                },
                                "nativeSrc": "24296:45:66",
                                "nodeType": "YulFunctionCall",
                                "src": "24296:45:66"
                              },
                              "nativeSrc": "24293:71:66",
                              "nodeType": "YulIf",
                              "src": "24293:71:66"
                            }
                          ]
                        },
                        "name": "checked_mul_t_uint256",
                        "nativeSrc": "24202:168:66",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "x",
                            "nativeSrc": "24233:1:66",
                            "nodeType": "YulTypedName",
                            "src": "24233:1:66",
                            "type": ""
                          },
                          {
                            "name": "y",
                            "nativeSrc": "24236:1:66",
                            "nodeType": "YulTypedName",
                            "src": "24236:1:66",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "product",
                            "nativeSrc": "24242:7:66",
                            "nodeType": "YulTypedName",
                            "src": "24242:7:66",
                            "type": ""
                          }
                        ],
                        "src": "24202:168:66"
                      },
                      {
                        "body": {
                          "nativeSrc": "24439:352:66",
                          "nodeType": "YulBlock",
                          "src": "24439:352:66",
                          "statements": [
                            {
                              "nativeSrc": "24449:16:66",
                              "nodeType": "YulVariableDeclaration",
                              "src": "24449:16:66",
                              "value": {
                                "kind": "number",
                                "nativeSrc": "24464:1:66",
                                "nodeType": "YulLiteral",
                                "src": "24464:1:66",
                                "type": "",
                                "value": "1"
                              },
                              "variables": [
                                {
                                  "name": "power_1",
                                  "nativeSrc": "24453:7:66",
                                  "nodeType": "YulTypedName",
                                  "src": "24453:7:66",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nativeSrc": "24474:10:66",
                              "nodeType": "YulAssignment",
                              "src": "24474:10:66",
                              "value": {
                                "kind": "number",
                                "nativeSrc": "24483:1:66",
                                "nodeType": "YulLiteral",
                                "src": "24483:1:66",
                                "type": "",
                                "value": "1"
                              },
                              "variableNames": [
                                {
                                  "name": "power",
                                  "nativeSrc": "24474:5:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "24474:5:66"
                                }
                              ]
                            },
                            {
                              "nativeSrc": "24493:13:66",
                              "nodeType": "YulAssignment",
                              "src": "24493:13:66",
                              "value": {
                                "name": "_base",
                                "nativeSrc": "24501:5:66",
                                "nodeType": "YulIdentifier",
                                "src": "24501:5:66"
                              },
                              "variableNames": [
                                {
                                  "name": "base",
                                  "nativeSrc": "24493:4:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "24493:4:66"
                                }
                              ]
                            },
                            {
                              "body": {
                                "nativeSrc": "24557:228:66",
                                "nodeType": "YulBlock",
                                "src": "24557:228:66",
                                "statements": [
                                  {
                                    "body": {
                                      "nativeSrc": "24602:22:66",
                                      "nodeType": "YulBlock",
                                      "src": "24602:22:66",
                                      "statements": [
                                        {
                                          "expression": {
                                            "arguments": [],
                                            "functionName": {
                                              "name": "panic_error_0x11",
                                              "nativeSrc": "24604:16:66",
                                              "nodeType": "YulIdentifier",
                                              "src": "24604:16:66"
                                            },
                                            "nativeSrc": "24604:18:66",
                                            "nodeType": "YulFunctionCall",
                                            "src": "24604:18:66"
                                          },
                                          "nativeSrc": "24604:18:66",
                                          "nodeType": "YulExpressionStatement",
                                          "src": "24604:18:66"
                                        }
                                      ]
                                    },
                                    "condition": {
                                      "arguments": [
                                        {
                                          "name": "base",
                                          "nativeSrc": "24577:4:66",
                                          "nodeType": "YulIdentifier",
                                          "src": "24577:4:66"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "arguments": [
                                                {
                                                  "kind": "number",
                                                  "nativeSrc": "24591:1:66",
                                                  "nodeType": "YulLiteral",
                                                  "src": "24591:1:66",
                                                  "type": "",
                                                  "value": "0"
                                                }
                                              ],
                                              "functionName": {
                                                "name": "not",
                                                "nativeSrc": "24587:3:66",
                                                "nodeType": "YulIdentifier",
                                                "src": "24587:3:66"
                                              },
                                              "nativeSrc": "24587:6:66",
                                              "nodeType": "YulFunctionCall",
                                              "src": "24587:6:66"
                                            },
                                            {
                                              "name": "base",
                                              "nativeSrc": "24595:4:66",
                                              "nodeType": "YulIdentifier",
                                              "src": "24595:4:66"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "div",
                                            "nativeSrc": "24583:3:66",
                                            "nodeType": "YulIdentifier",
                                            "src": "24583:3:66"
                                          },
                                          "nativeSrc": "24583:17:66",
                                          "nodeType": "YulFunctionCall",
                                          "src": "24583:17:66"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "gt",
                                        "nativeSrc": "24574:2:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "24574:2:66"
                                      },
                                      "nativeSrc": "24574:27:66",
                                      "nodeType": "YulFunctionCall",
                                      "src": "24574:27:66"
                                    },
                                    "nativeSrc": "24571:53:66",
                                    "nodeType": "YulIf",
                                    "src": "24571:53:66"
                                  },
                                  {
                                    "body": {
                                      "nativeSrc": "24663:29:66",
                                      "nodeType": "YulBlock",
                                      "src": "24663:29:66",
                                      "statements": [
                                        {
                                          "nativeSrc": "24665:25:66",
                                          "nodeType": "YulAssignment",
                                          "src": "24665:25:66",
                                          "value": {
                                            "arguments": [
                                              {
                                                "name": "power",
                                                "nativeSrc": "24678:5:66",
                                                "nodeType": "YulIdentifier",
                                                "src": "24678:5:66"
                                              },
                                              {
                                                "name": "base",
                                                "nativeSrc": "24685:4:66",
                                                "nodeType": "YulIdentifier",
                                                "src": "24685:4:66"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "mul",
                                              "nativeSrc": "24674:3:66",
                                              "nodeType": "YulIdentifier",
                                              "src": "24674:3:66"
                                            },
                                            "nativeSrc": "24674:16:66",
                                            "nodeType": "YulFunctionCall",
                                            "src": "24674:16:66"
                                          },
                                          "variableNames": [
                                            {
                                              "name": "power",
                                              "nativeSrc": "24665:5:66",
                                              "nodeType": "YulIdentifier",
                                              "src": "24665:5:66"
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    "condition": {
                                      "arguments": [
                                        {
                                          "name": "exponent",
                                          "nativeSrc": "24644:8:66",
                                          "nodeType": "YulIdentifier",
                                          "src": "24644:8:66"
                                        },
                                        {
                                          "name": "power_1",
                                          "nativeSrc": "24654:7:66",
                                          "nodeType": "YulIdentifier",
                                          "src": "24654:7:66"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "and",
                                        "nativeSrc": "24640:3:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "24640:3:66"
                                      },
                                      "nativeSrc": "24640:22:66",
                                      "nodeType": "YulFunctionCall",
                                      "src": "24640:22:66"
                                    },
                                    "nativeSrc": "24637:55:66",
                                    "nodeType": "YulIf",
                                    "src": "24637:55:66"
                                  },
                                  {
                                    "nativeSrc": "24705:23:66",
                                    "nodeType": "YulAssignment",
                                    "src": "24705:23:66",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "base",
                                          "nativeSrc": "24717:4:66",
                                          "nodeType": "YulIdentifier",
                                          "src": "24717:4:66"
                                        },
                                        {
                                          "name": "base",
                                          "nativeSrc": "24723:4:66",
                                          "nodeType": "YulIdentifier",
                                          "src": "24723:4:66"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mul",
                                        "nativeSrc": "24713:3:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "24713:3:66"
                                      },
                                      "nativeSrc": "24713:15:66",
                                      "nodeType": "YulFunctionCall",
                                      "src": "24713:15:66"
                                    },
                                    "variableNames": [
                                      {
                                        "name": "base",
                                        "nativeSrc": "24705:4:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "24705:4:66"
                                      }
                                    ]
                                  },
                                  {
                                    "nativeSrc": "24741:34:66",
                                    "nodeType": "YulAssignment",
                                    "src": "24741:34:66",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "power_1",
                                          "nativeSrc": "24757:7:66",
                                          "nodeType": "YulIdentifier",
                                          "src": "24757:7:66"
                                        },
                                        {
                                          "name": "exponent",
                                          "nativeSrc": "24766:8:66",
                                          "nodeType": "YulIdentifier",
                                          "src": "24766:8:66"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "shr",
                                        "nativeSrc": "24753:3:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "24753:3:66"
                                      },
                                      "nativeSrc": "24753:22:66",
                                      "nodeType": "YulFunctionCall",
                                      "src": "24753:22:66"
                                    },
                                    "variableNames": [
                                      {
                                        "name": "exponent",
                                        "nativeSrc": "24741:8:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "24741:8:66"
                                      }
                                    ]
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "name": "exponent",
                                    "nativeSrc": "24526:8:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "24526:8:66"
                                  },
                                  {
                                    "name": "power_1",
                                    "nativeSrc": "24536:7:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "24536:7:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nativeSrc": "24523:2:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "24523:2:66"
                                },
                                "nativeSrc": "24523:21:66",
                                "nodeType": "YulFunctionCall",
                                "src": "24523:21:66"
                              },
                              "nativeSrc": "24515:270:66",
                              "nodeType": "YulForLoop",
                              "post": {
                                "nativeSrc": "24545:3:66",
                                "nodeType": "YulBlock",
                                "src": "24545:3:66",
                                "statements": []
                              },
                              "pre": {
                                "nativeSrc": "24519:3:66",
                                "nodeType": "YulBlock",
                                "src": "24519:3:66",
                                "statements": []
                              },
                              "src": "24515:270:66"
                            }
                          ]
                        },
                        "name": "checked_exp_helper",
                        "nativeSrc": "24375:416:66",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "_base",
                            "nativeSrc": "24403:5:66",
                            "nodeType": "YulTypedName",
                            "src": "24403:5:66",
                            "type": ""
                          },
                          {
                            "name": "exponent",
                            "nativeSrc": "24410:8:66",
                            "nodeType": "YulTypedName",
                            "src": "24410:8:66",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "power",
                            "nativeSrc": "24423:5:66",
                            "nodeType": "YulTypedName",
                            "src": "24423:5:66",
                            "type": ""
                          },
                          {
                            "name": "base",
                            "nativeSrc": "24430:4:66",
                            "nodeType": "YulTypedName",
                            "src": "24430:4:66",
                            "type": ""
                          }
                        ],
                        "src": "24375:416:66"
                      },
                      {
                        "body": {
                          "nativeSrc": "24855:747:66",
                          "nodeType": "YulBlock",
                          "src": "24855:747:66",
                          "statements": [
                            {
                              "body": {
                                "nativeSrc": "24893:52:66",
                                "nodeType": "YulBlock",
                                "src": "24893:52:66",
                                "statements": [
                                  {
                                    "nativeSrc": "24907:10:66",
                                    "nodeType": "YulAssignment",
                                    "src": "24907:10:66",
                                    "value": {
                                      "kind": "number",
                                      "nativeSrc": "24916:1:66",
                                      "nodeType": "YulLiteral",
                                      "src": "24916:1:66",
                                      "type": "",
                                      "value": "1"
                                    },
                                    "variableNames": [
                                      {
                                        "name": "power",
                                        "nativeSrc": "24907:5:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "24907:5:66"
                                      }
                                    ]
                                  },
                                  {
                                    "nativeSrc": "24930:5:66",
                                    "nodeType": "YulLeave",
                                    "src": "24930:5:66"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "name": "exponent",
                                    "nativeSrc": "24875:8:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "24875:8:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nativeSrc": "24868:6:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "24868:6:66"
                                },
                                "nativeSrc": "24868:16:66",
                                "nodeType": "YulFunctionCall",
                                "src": "24868:16:66"
                              },
                              "nativeSrc": "24865:80:66",
                              "nodeType": "YulIf",
                              "src": "24865:80:66"
                            },
                            {
                              "body": {
                                "nativeSrc": "24978:52:66",
                                "nodeType": "YulBlock",
                                "src": "24978:52:66",
                                "statements": [
                                  {
                                    "nativeSrc": "24992:10:66",
                                    "nodeType": "YulAssignment",
                                    "src": "24992:10:66",
                                    "value": {
                                      "kind": "number",
                                      "nativeSrc": "25001:1:66",
                                      "nodeType": "YulLiteral",
                                      "src": "25001:1:66",
                                      "type": "",
                                      "value": "0"
                                    },
                                    "variableNames": [
                                      {
                                        "name": "power",
                                        "nativeSrc": "24992:5:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "24992:5:66"
                                      }
                                    ]
                                  },
                                  {
                                    "nativeSrc": "25015:5:66",
                                    "nodeType": "YulLeave",
                                    "src": "25015:5:66"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "name": "base",
                                    "nativeSrc": "24964:4:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "24964:4:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nativeSrc": "24957:6:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "24957:6:66"
                                },
                                "nativeSrc": "24957:12:66",
                                "nodeType": "YulFunctionCall",
                                "src": "24957:12:66"
                              },
                              "nativeSrc": "24954:76:66",
                              "nodeType": "YulIf",
                              "src": "24954:76:66"
                            },
                            {
                              "cases": [
                                {
                                  "body": {
                                    "nativeSrc": "25066:52:66",
                                    "nodeType": "YulBlock",
                                    "src": "25066:52:66",
                                    "statements": [
                                      {
                                        "nativeSrc": "25080:10:66",
                                        "nodeType": "YulAssignment",
                                        "src": "25080:10:66",
                                        "value": {
                                          "kind": "number",
                                          "nativeSrc": "25089:1:66",
                                          "nodeType": "YulLiteral",
                                          "src": "25089:1:66",
                                          "type": "",
                                          "value": "1"
                                        },
                                        "variableNames": [
                                          {
                                            "name": "power",
                                            "nativeSrc": "25080:5:66",
                                            "nodeType": "YulIdentifier",
                                            "src": "25080:5:66"
                                          }
                                        ]
                                      },
                                      {
                                        "nativeSrc": "25103:5:66",
                                        "nodeType": "YulLeave",
                                        "src": "25103:5:66"
                                      }
                                    ]
                                  },
                                  "nativeSrc": "25059:59:66",
                                  "nodeType": "YulCase",
                                  "src": "25059:59:66",
                                  "value": {
                                    "kind": "number",
                                    "nativeSrc": "25064:1:66",
                                    "nodeType": "YulLiteral",
                                    "src": "25064:1:66",
                                    "type": "",
                                    "value": "1"
                                  }
                                },
                                {
                                  "body": {
                                    "nativeSrc": "25134:123:66",
                                    "nodeType": "YulBlock",
                                    "src": "25134:123:66",
                                    "statements": [
                                      {
                                        "body": {
                                          "nativeSrc": "25169:22:66",
                                          "nodeType": "YulBlock",
                                          "src": "25169:22:66",
                                          "statements": [
                                            {
                                              "expression": {
                                                "arguments": [],
                                                "functionName": {
                                                  "name": "panic_error_0x11",
                                                  "nativeSrc": "25171:16:66",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "25171:16:66"
                                                },
                                                "nativeSrc": "25171:18:66",
                                                "nodeType": "YulFunctionCall",
                                                "src": "25171:18:66"
                                              },
                                              "nativeSrc": "25171:18:66",
                                              "nodeType": "YulExpressionStatement",
                                              "src": "25171:18:66"
                                            }
                                          ]
                                        },
                                        "condition": {
                                          "arguments": [
                                            {
                                              "name": "exponent",
                                              "nativeSrc": "25154:8:66",
                                              "nodeType": "YulIdentifier",
                                              "src": "25154:8:66"
                                            },
                                            {
                                              "kind": "number",
                                              "nativeSrc": "25164:3:66",
                                              "nodeType": "YulLiteral",
                                              "src": "25164:3:66",
                                              "type": "",
                                              "value": "255"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "gt",
                                            "nativeSrc": "25151:2:66",
                                            "nodeType": "YulIdentifier",
                                            "src": "25151:2:66"
                                          },
                                          "nativeSrc": "25151:17:66",
                                          "nodeType": "YulFunctionCall",
                                          "src": "25151:17:66"
                                        },
                                        "nativeSrc": "25148:43:66",
                                        "nodeType": "YulIf",
                                        "src": "25148:43:66"
                                      },
                                      {
                                        "nativeSrc": "25204:25:66",
                                        "nodeType": "YulAssignment",
                                        "src": "25204:25:66",
                                        "value": {
                                          "arguments": [
                                            {
                                              "name": "exponent",
                                              "nativeSrc": "25217:8:66",
                                              "nodeType": "YulIdentifier",
                                              "src": "25217:8:66"
                                            },
                                            {
                                              "kind": "number",
                                              "nativeSrc": "25227:1:66",
                                              "nodeType": "YulLiteral",
                                              "src": "25227:1:66",
                                              "type": "",
                                              "value": "1"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "shl",
                                            "nativeSrc": "25213:3:66",
                                            "nodeType": "YulIdentifier",
                                            "src": "25213:3:66"
                                          },
                                          "nativeSrc": "25213:16:66",
                                          "nodeType": "YulFunctionCall",
                                          "src": "25213:16:66"
                                        },
                                        "variableNames": [
                                          {
                                            "name": "power",
                                            "nativeSrc": "25204:5:66",
                                            "nodeType": "YulIdentifier",
                                            "src": "25204:5:66"
                                          }
                                        ]
                                      },
                                      {
                                        "nativeSrc": "25242:5:66",
                                        "nodeType": "YulLeave",
                                        "src": "25242:5:66"
                                      }
                                    ]
                                  },
                                  "nativeSrc": "25127:130:66",
                                  "nodeType": "YulCase",
                                  "src": "25127:130:66",
                                  "value": {
                                    "kind": "number",
                                    "nativeSrc": "25132:1:66",
                                    "nodeType": "YulLiteral",
                                    "src": "25132:1:66",
                                    "type": "",
                                    "value": "2"
                                  }
                                }
                              ],
                              "expression": {
                                "name": "base",
                                "nativeSrc": "25046:4:66",
                                "nodeType": "YulIdentifier",
                                "src": "25046:4:66"
                              },
                              "nativeSrc": "25039:218:66",
                              "nodeType": "YulSwitch",
                              "src": "25039:218:66"
                            },
                            {
                              "body": {
                                "nativeSrc": "25355:70:66",
                                "nodeType": "YulBlock",
                                "src": "25355:70:66",
                                "statements": [
                                  {
                                    "nativeSrc": "25369:28:66",
                                    "nodeType": "YulAssignment",
                                    "src": "25369:28:66",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "base",
                                          "nativeSrc": "25382:4:66",
                                          "nodeType": "YulIdentifier",
                                          "src": "25382:4:66"
                                        },
                                        {
                                          "name": "exponent",
                                          "nativeSrc": "25388:8:66",
                                          "nodeType": "YulIdentifier",
                                          "src": "25388:8:66"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "exp",
                                        "nativeSrc": "25378:3:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "25378:3:66"
                                      },
                                      "nativeSrc": "25378:19:66",
                                      "nodeType": "YulFunctionCall",
                                      "src": "25378:19:66"
                                    },
                                    "variableNames": [
                                      {
                                        "name": "power",
                                        "nativeSrc": "25369:5:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "25369:5:66"
                                      }
                                    ]
                                  },
                                  {
                                    "nativeSrc": "25410:5:66",
                                    "nodeType": "YulLeave",
                                    "src": "25410:5:66"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "base",
                                            "nativeSrc": "25279:4:66",
                                            "nodeType": "YulIdentifier",
                                            "src": "25279:4:66"
                                          },
                                          {
                                            "kind": "number",
                                            "nativeSrc": "25285:2:66",
                                            "nodeType": "YulLiteral",
                                            "src": "25285:2:66",
                                            "type": "",
                                            "value": "11"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "lt",
                                          "nativeSrc": "25276:2:66",
                                          "nodeType": "YulIdentifier",
                                          "src": "25276:2:66"
                                        },
                                        "nativeSrc": "25276:12:66",
                                        "nodeType": "YulFunctionCall",
                                        "src": "25276:12:66"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "name": "exponent",
                                            "nativeSrc": "25293:8:66",
                                            "nodeType": "YulIdentifier",
                                            "src": "25293:8:66"
                                          },
                                          {
                                            "kind": "number",
                                            "nativeSrc": "25303:2:66",
                                            "nodeType": "YulLiteral",
                                            "src": "25303:2:66",
                                            "type": "",
                                            "value": "78"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "lt",
                                          "nativeSrc": "25290:2:66",
                                          "nodeType": "YulIdentifier",
                                          "src": "25290:2:66"
                                        },
                                        "nativeSrc": "25290:16:66",
                                        "nodeType": "YulFunctionCall",
                                        "src": "25290:16:66"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nativeSrc": "25272:3:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "25272:3:66"
                                    },
                                    "nativeSrc": "25272:35:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "25272:35:66"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "base",
                                            "nativeSrc": "25316:4:66",
                                            "nodeType": "YulIdentifier",
                                            "src": "25316:4:66"
                                          },
                                          {
                                            "kind": "number",
                                            "nativeSrc": "25322:3:66",
                                            "nodeType": "YulLiteral",
                                            "src": "25322:3:66",
                                            "type": "",
                                            "value": "307"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "lt",
                                          "nativeSrc": "25313:2:66",
                                          "nodeType": "YulIdentifier",
                                          "src": "25313:2:66"
                                        },
                                        "nativeSrc": "25313:13:66",
                                        "nodeType": "YulFunctionCall",
                                        "src": "25313:13:66"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "name": "exponent",
                                            "nativeSrc": "25331:8:66",
                                            "nodeType": "YulIdentifier",
                                            "src": "25331:8:66"
                                          },
                                          {
                                            "kind": "number",
                                            "nativeSrc": "25341:2:66",
                                            "nodeType": "YulLiteral",
                                            "src": "25341:2:66",
                                            "type": "",
                                            "value": "32"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "lt",
                                          "nativeSrc": "25328:2:66",
                                          "nodeType": "YulIdentifier",
                                          "src": "25328:2:66"
                                        },
                                        "nativeSrc": "25328:16:66",
                                        "nodeType": "YulFunctionCall",
                                        "src": "25328:16:66"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nativeSrc": "25309:3:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "25309:3:66"
                                    },
                                    "nativeSrc": "25309:36:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "25309:36:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "or",
                                  "nativeSrc": "25269:2:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "25269:2:66"
                                },
                                "nativeSrc": "25269:77:66",
                                "nodeType": "YulFunctionCall",
                                "src": "25269:77:66"
                              },
                              "nativeSrc": "25266:159:66",
                              "nodeType": "YulIf",
                              "src": "25266:159:66"
                            },
                            {
                              "nativeSrc": "25434:57:66",
                              "nodeType": "YulVariableDeclaration",
                              "src": "25434:57:66",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "base",
                                    "nativeSrc": "25476:4:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "25476:4:66"
                                  },
                                  {
                                    "name": "exponent",
                                    "nativeSrc": "25482:8:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "25482:8:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "checked_exp_helper",
                                  "nativeSrc": "25457:18:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "25457:18:66"
                                },
                                "nativeSrc": "25457:34:66",
                                "nodeType": "YulFunctionCall",
                                "src": "25457:34:66"
                              },
                              "variables": [
                                {
                                  "name": "power_1",
                                  "nativeSrc": "25438:7:66",
                                  "nodeType": "YulTypedName",
                                  "src": "25438:7:66",
                                  "type": ""
                                },
                                {
                                  "name": "base_1",
                                  "nativeSrc": "25447:6:66",
                                  "nodeType": "YulTypedName",
                                  "src": "25447:6:66",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "body": {
                                "nativeSrc": "25536:22:66",
                                "nodeType": "YulBlock",
                                "src": "25536:22:66",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [],
                                      "functionName": {
                                        "name": "panic_error_0x11",
                                        "nativeSrc": "25538:16:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "25538:16:66"
                                      },
                                      "nativeSrc": "25538:18:66",
                                      "nodeType": "YulFunctionCall",
                                      "src": "25538:18:66"
                                    },
                                    "nativeSrc": "25538:18:66",
                                    "nodeType": "YulExpressionStatement",
                                    "src": "25538:18:66"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "name": "power_1",
                                    "nativeSrc": "25506:7:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "25506:7:66"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nativeSrc": "25523:1:66",
                                            "nodeType": "YulLiteral",
                                            "src": "25523:1:66",
                                            "type": "",
                                            "value": "0"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "not",
                                          "nativeSrc": "25519:3:66",
                                          "nodeType": "YulIdentifier",
                                          "src": "25519:3:66"
                                        },
                                        "nativeSrc": "25519:6:66",
                                        "nodeType": "YulFunctionCall",
                                        "src": "25519:6:66"
                                      },
                                      {
                                        "name": "base_1",
                                        "nativeSrc": "25527:6:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "25527:6:66"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "div",
                                      "nativeSrc": "25515:3:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "25515:3:66"
                                    },
                                    "nativeSrc": "25515:19:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "25515:19:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nativeSrc": "25503:2:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "25503:2:66"
                                },
                                "nativeSrc": "25503:32:66",
                                "nodeType": "YulFunctionCall",
                                "src": "25503:32:66"
                              },
                              "nativeSrc": "25500:58:66",
                              "nodeType": "YulIf",
                              "src": "25500:58:66"
                            },
                            {
                              "nativeSrc": "25567:29:66",
                              "nodeType": "YulAssignment",
                              "src": "25567:29:66",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "power_1",
                                    "nativeSrc": "25580:7:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "25580:7:66"
                                  },
                                  {
                                    "name": "base_1",
                                    "nativeSrc": "25589:6:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "25589:6:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "mul",
                                  "nativeSrc": "25576:3:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "25576:3:66"
                                },
                                "nativeSrc": "25576:20:66",
                                "nodeType": "YulFunctionCall",
                                "src": "25576:20:66"
                              },
                              "variableNames": [
                                {
                                  "name": "power",
                                  "nativeSrc": "25567:5:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "25567:5:66"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "checked_exp_unsigned",
                        "nativeSrc": "24796:806:66",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "base",
                            "nativeSrc": "24826:4:66",
                            "nodeType": "YulTypedName",
                            "src": "24826:4:66",
                            "type": ""
                          },
                          {
                            "name": "exponent",
                            "nativeSrc": "24832:8:66",
                            "nodeType": "YulTypedName",
                            "src": "24832:8:66",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "power",
                            "nativeSrc": "24845:5:66",
                            "nodeType": "YulTypedName",
                            "src": "24845:5:66",
                            "type": ""
                          }
                        ],
                        "src": "24796:806:66"
                      },
                      {
                        "body": {
                          "nativeSrc": "25677:61:66",
                          "nodeType": "YulBlock",
                          "src": "25677:61:66",
                          "statements": [
                            {
                              "nativeSrc": "25687:45:66",
                              "nodeType": "YulAssignment",
                              "src": "25687:45:66",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "base",
                                    "nativeSrc": "25717:4:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "25717:4:66"
                                  },
                                  {
                                    "name": "exponent",
                                    "nativeSrc": "25723:8:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "25723:8:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "checked_exp_unsigned",
                                  "nativeSrc": "25696:20:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "25696:20:66"
                                },
                                "nativeSrc": "25696:36:66",
                                "nodeType": "YulFunctionCall",
                                "src": "25696:36:66"
                              },
                              "variableNames": [
                                {
                                  "name": "power",
                                  "nativeSrc": "25687:5:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "25687:5:66"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "checked_exp_t_uint256_t_uint256",
                        "nativeSrc": "25607:131:66",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "base",
                            "nativeSrc": "25648:4:66",
                            "nodeType": "YulTypedName",
                            "src": "25648:4:66",
                            "type": ""
                          },
                          {
                            "name": "exponent",
                            "nativeSrc": "25654:8:66",
                            "nodeType": "YulTypedName",
                            "src": "25654:8:66",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "power",
                            "nativeSrc": "25667:5:66",
                            "nodeType": "YulTypedName",
                            "src": "25667:5:66",
                            "type": ""
                          }
                        ],
                        "src": "25607:131:66"
                      },
                      {
                        "body": {
                          "nativeSrc": "25790:89:66",
                          "nodeType": "YulBlock",
                          "src": "25790:89:66",
                          "statements": [
                            {
                              "body": {
                                "nativeSrc": "25817:22:66",
                                "nodeType": "YulBlock",
                                "src": "25817:22:66",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [],
                                      "functionName": {
                                        "name": "panic_error_0x11",
                                        "nativeSrc": "25819:16:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "25819:16:66"
                                      },
                                      "nativeSrc": "25819:18:66",
                                      "nodeType": "YulFunctionCall",
                                      "src": "25819:18:66"
                                    },
                                    "nativeSrc": "25819:18:66",
                                    "nodeType": "YulExpressionStatement",
                                    "src": "25819:18:66"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nativeSrc": "25810:5:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "25810:5:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nativeSrc": "25803:6:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "25803:6:66"
                                },
                                "nativeSrc": "25803:13:66",
                                "nodeType": "YulFunctionCall",
                                "src": "25803:13:66"
                              },
                              "nativeSrc": "25800:39:66",
                              "nodeType": "YulIf",
                              "src": "25800:39:66"
                            },
                            {
                              "nativeSrc": "25848:25:66",
                              "nodeType": "YulAssignment",
                              "src": "25848:25:66",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nativeSrc": "25859:5:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "25859:5:66"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nativeSrc": "25870:1:66",
                                        "nodeType": "YulLiteral",
                                        "src": "25870:1:66",
                                        "type": "",
                                        "value": "0"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "not",
                                      "nativeSrc": "25866:3:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "25866:3:66"
                                    },
                                    "nativeSrc": "25866:6:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "25866:6:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "25855:3:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "25855:3:66"
                                },
                                "nativeSrc": "25855:18:66",
                                "nodeType": "YulFunctionCall",
                                "src": "25855:18:66"
                              },
                              "variableNames": [
                                {
                                  "name": "ret",
                                  "nativeSrc": "25848:3:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "25848:3:66"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "decrement_t_uint256",
                        "nativeSrc": "25743:136:66",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "value",
                            "nativeSrc": "25772:5:66",
                            "nodeType": "YulTypedName",
                            "src": "25772:5:66",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "ret",
                            "nativeSrc": "25782:3:66",
                            "nodeType": "YulTypedName",
                            "src": "25782:3:66",
                            "type": ""
                          }
                        ],
                        "src": "25743:136:66"
                      },
                      {
                        "body": {
                          "nativeSrc": "25931:88:66",
                          "nodeType": "YulBlock",
                          "src": "25931:88:66",
                          "statements": [
                            {
                              "body": {
                                "nativeSrc": "25962:22:66",
                                "nodeType": "YulBlock",
                                "src": "25962:22:66",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [],
                                      "functionName": {
                                        "name": "panic_error_0x11",
                                        "nativeSrc": "25964:16:66",
                                        "nodeType": "YulIdentifier",
                                        "src": "25964:16:66"
                                      },
                                      "nativeSrc": "25964:18:66",
                                      "nodeType": "YulFunctionCall",
                                      "src": "25964:18:66"
                                    },
                                    "nativeSrc": "25964:18:66",
                                    "nodeType": "YulExpressionStatement",
                                    "src": "25964:18:66"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nativeSrc": "25947:5:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "25947:5:66"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nativeSrc": "25958:1:66",
                                        "nodeType": "YulLiteral",
                                        "src": "25958:1:66",
                                        "type": "",
                                        "value": "0"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "not",
                                      "nativeSrc": "25954:3:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "25954:3:66"
                                    },
                                    "nativeSrc": "25954:6:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "25954:6:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nativeSrc": "25944:2:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "25944:2:66"
                                },
                                "nativeSrc": "25944:17:66",
                                "nodeType": "YulFunctionCall",
                                "src": "25944:17:66"
                              },
                              "nativeSrc": "25941:43:66",
                              "nodeType": "YulIf",
                              "src": "25941:43:66"
                            },
                            {
                              "nativeSrc": "25993:20:66",
                              "nodeType": "YulAssignment",
                              "src": "25993:20:66",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nativeSrc": "26004:5:66",
                                    "nodeType": "YulIdentifier",
                                    "src": "26004:5:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "26011:1:66",
                                    "nodeType": "YulLiteral",
                                    "src": "26011:1:66",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "26000:3:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "26000:3:66"
                                },
                                "nativeSrc": "26000:13:66",
                                "nodeType": "YulFunctionCall",
                                "src": "26000:13:66"
                              },
                              "variableNames": [
                                {
                                  "name": "ret",
                                  "nativeSrc": "25993:3:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "25993:3:66"
                                }
                              ]
                            }
                          ]
                        },
                        "name": "increment_t_uint256",
                        "nativeSrc": "25884:135:66",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "value",
                            "nativeSrc": "25913:5:66",
                            "nodeType": "YulTypedName",
                            "src": "25913:5:66",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "ret",
                            "nativeSrc": "25923:3:66",
                            "nodeType": "YulTypedName",
                            "src": "25923:3:66",
                            "type": ""
                          }
                        ],
                        "src": "25884:135:66"
                      },
                      {
                        "body": {
                          "nativeSrc": "26056:95:66",
                          "nodeType": "YulBlock",
                          "src": "26056:95:66",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nativeSrc": "26073:1:66",
                                    "nodeType": "YulLiteral",
                                    "src": "26073:1:66",
                                    "type": "",
                                    "value": "0"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nativeSrc": "26080:3:66",
                                        "nodeType": "YulLiteral",
                                        "src": "26080:3:66",
                                        "type": "",
                                        "value": "224"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "26085:10:66",
                                        "nodeType": "YulLiteral",
                                        "src": "26085:10:66",
                                        "type": "",
                                        "value": "0x4e487b71"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nativeSrc": "26076:3:66",
                                      "nodeType": "YulIdentifier",
                                      "src": "26076:3:66"
                                    },
                                    "nativeSrc": "26076:20:66",
                                    "nodeType": "YulFunctionCall",
                                    "src": "26076:20:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "26066:6:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "26066:6:66"
                                },
                                "nativeSrc": "26066:31:66",
                                "nodeType": "YulFunctionCall",
                                "src": "26066:31:66"
                              },
                              "nativeSrc": "26066:31:66",
                              "nodeType": "YulExpressionStatement",
                              "src": "26066:31:66"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nativeSrc": "26113:1:66",
                                    "nodeType": "YulLiteral",
                                    "src": "26113:1:66",
                                    "type": "",
                                    "value": "4"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "26116:4:66",
                                    "nodeType": "YulLiteral",
                                    "src": "26116:4:66",
                                    "type": "",
                                    "value": "0x51"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "26106:6:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "26106:6:66"
                                },
                                "nativeSrc": "26106:15:66",
                                "nodeType": "YulFunctionCall",
                                "src": "26106:15:66"
                              },
                              "nativeSrc": "26106:15:66",
                              "nodeType": "YulExpressionStatement",
                              "src": "26106:15:66"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nativeSrc": "26137:1:66",
                                    "nodeType": "YulLiteral",
                                    "src": "26137:1:66",
                                    "type": "",
                                    "value": "0"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "26140:4:66",
                                    "nodeType": "YulLiteral",
                                    "src": "26140:4:66",
                                    "type": "",
                                    "value": "0x24"
                                  }
                                ],
                                "functionName": {
                                  "name": "revert",
                                  "nativeSrc": "26130:6:66",
                                  "nodeType": "YulIdentifier",
                                  "src": "26130:6:66"
                                },
                                "nativeSrc": "26130:15:66",
                                "nodeType": "YulFunctionCall",
                                "src": "26130:15:66"
                              },
                              "nativeSrc": "26130:15:66",
                              "nodeType": "YulExpressionStatement",
                              "src": "26130:15:66"
                            }
                          ]
                        },
                        "name": "panic_error_0x51",
                        "nativeSrc": "26024:127:66",
                        "nodeType": "YulFunctionDefinition",
                        "src": "26024:127:66"
                      }
                    ]
                  },
                  "contents": "{\n    { }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_stringliteral_47f5c9ccb1f88a7d09e89263cb3ed348d4673e8f555074bf0b0996dc8143e7bc__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 11)\n        mstore(add(headStart, 64), \"GOV_ADDRESS\")\n        tail := add(headStart, 96)\n    }\n    function abi_decode_tuple_t_address_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_stringliteral_2ef6555c4d06f7a53d2dd092327f3256a8d6f18aff592d5349c12226686be6c5__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 11)\n        mstore(add(headStart, 64), \"PRIVATE_KEY\")\n        tail := add(headStart, 96)\n    }\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := mload(headStart)\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function copy_memory_to_memory_with_cleanup(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n    function abi_encode_string(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), add(pos, 0x20), length)\n        end := add(add(pos, and(add(length, 31), not(31))), 0x20)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_string(value0, add(headStart, 32))\n    }\n    function abi_encode_tuple_t_address_t_bytes_memory_ptr__to_t_address_t_bytes_memory_ptr__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), 64)\n        tail := abi_encode_string(value1, add(headStart, 64))\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function allocate_memory() -> memPtr\n    {\n        memPtr := mload(64)\n        let newFreePtr := add(memPtr, 0x60)\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n    function abi_decode_available_length_bytes_fromMemory(src, length, end) -> array\n    {\n        let _1 := 0xffffffffffffffff\n        if gt(length, _1) { panic_error_0x41() }\n        let _2 := not(31)\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(and(add(length, 31), _2), 63), _2))\n        if or(gt(newFreePtr, _1), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        array := memPtr\n        mstore(memPtr, length)\n        if gt(add(src, length), end) { revert(0, 0) }\n        copy_memory_to_memory_with_cleanup(src, add(memPtr, 0x20), length)\n    }\n    function abi_decode_bytes_fromMemory(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        array := abi_decode_available_length_bytes_fromMemory(add(offset, 0x20), mload(offset), end)\n    }\n    function abi_decode_tuple_t_bytes_memory_ptr_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let offset := mload(headStart)\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        value0 := abi_decode_bytes_fromMemory(add(headStart, offset), dataEnd)\n    }\n    function abi_encode_tuple_packed_t_bytes_memory_ptr_t_bytes_memory_ptr__to_t_bytes_memory_ptr_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory_with_cleanup(add(value0, 0x20), pos, length)\n        let end_1 := add(pos, length)\n        let length_1 := mload(value1)\n        copy_memory_to_memory_with_cleanup(add(value1, 0x20), end_1, length_1)\n        end := add(end_1, length_1)\n    }\n    function abi_encode_tuple_packed_t_stringliteral_45942a044068f475a72b247d918918cfb3543fa9d2f925dce5c26b7172dbe289_t_string_memory_ptr_t_stringliteral_aa9d79cc8375f222c2818bc0c013f6b7c3934b6f21aedb1df102a8f780a1b664_t_string_memory_ptr_t_stringliteral_6e9f33448a4153023cdaf3eb759f1afdc24aba433a3e18b683f8c04a6eaa69f0__to_t_bytes26_t_string_memory_ptr_t_bytes25_t_string_memory_ptr_t_bytes1__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        mstore(pos, \"Failed to deploy contract \")\n        let length := mload(value0)\n        copy_memory_to_memory_with_cleanup(add(value0, 0x20), add(pos, 26), length)\n        let _1 := add(pos, length)\n        mstore(add(_1, 26), 0x207573696e6720636f6e7374727563746f722064617461202200000000000000)\n        let length_1 := mload(value1)\n        copy_memory_to_memory_with_cleanup(add(value1, 0x20), add(_1, 51), length_1)\n        let _2 := add(_1, length_1)\n        mstore(add(_2, 51), shl(249, 17))\n        end := add(_2, 52)\n    }\n    function abi_encode_tuple_packed_t_stringliteral_45942a044068f475a72b247d918918cfb3543fa9d2f925dce5c26b7172dbe289_t_string_memory_ptr_t_stringliteral_e64009107d042bdc478cc69a5433e4573ea2e8a23a46646c0ee241e30c888e73_t_string_memory_ptr__to_t_bytes26_t_string_memory_ptr_t_bytes2_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        mstore(pos, \"Failed to deploy contract \")\n        let length := mload(value0)\n        copy_memory_to_memory_with_cleanup(add(value0, 0x20), add(pos, 26), length)\n        let _1 := add(pos, length)\n        mstore(add(_1, 26), \": \")\n        let length_1 := mload(value1)\n        copy_memory_to_memory_with_cleanup(add(value1, 0x20), add(_1, 28), length_1)\n        end := add(add(_1, length_1), 28)\n    }\n    function abi_encode_tuple_packed_t_stringliteral_29a2b74f226f0ae680d4b1730e672f85f1c84ce9f2c45ff21557229ab3df8027_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        mstore(pos, \"Failed to run upgrade safety val\")\n        mstore(add(pos, 32), \"idation: \")\n        let length := mload(value0)\n        copy_memory_to_memory_with_cleanup(add(value0, 32), add(pos, 41), length)\n        end := add(add(pos, length), 41)\n    }\n    function abi_encode_tuple_packed_t_stringliteral_08801615ab40adc93bf881a8fa998cec8215450529dace7649c906794b645fd9_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        mstore(pos, \"Upgrade safety validation failed\")\n        mstore(add(pos, 32), shl(241, 7429))\n        let length := mload(value0)\n        copy_memory_to_memory_with_cleanup(add(value0, 32), add(pos, 34), length)\n        end := add(add(pos, length), 34)\n    }\n    function abi_encode_tuple_t_stringliteral_ae11223e55da1785bb01a018df547ee9df83f6bfc03bcf9ee05fa29541f23f06_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 64)\n        mstore(add(headStart, 64), 11)\n        mstore(add(headStart, 96), \"FOUNDRY_OUT\")\n        mstore(add(headStart, 0x20), 128)\n        tail := abi_encode_string(value0, add(headStart, 128))\n    }\n    function abi_decode_tuple_t_string_memory_ptr_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let offset := mload(headStart)\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let _1 := add(headStart, offset)\n        if iszero(slt(add(_1, 0x1f), dataEnd)) { revert(0, 0) }\n        value0 := abi_decode_available_length_bytes_fromMemory(add(_1, 32), mload(_1), dataEnd)\n    }\n    function abi_encode_tuple_packed_t_string_memory_ptr_t_stringliteral_fba9715e477e68952d3f1df7a185b3708aadad50ec10cc793973864023868527_t_string_memory_ptr_t_stringliteral_fba9715e477e68952d3f1df7a185b3708aadad50ec10cc793973864023868527_t_string_memory_ptr_t_stringliteral_fba9715e477e68952d3f1df7a185b3708aadad50ec10cc793973864023868527_t_string_memory_ptr_t_stringliteral_94311adc0a0cd4e10be11b23bd4316b8cffa4adf693e8f96f5c075aa439a7972__to_t_string_memory_ptr_t_bytes1_t_string_memory_ptr_t_bytes1_t_string_memory_ptr_t_bytes1_t_string_memory_ptr_t_bytes5__nonPadded_inplace_fromStack_reversed(pos, value3, value2, value1, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory_with_cleanup(add(value0, 0x20), pos, length)\n        let end_1 := add(pos, length)\n        let _1 := \"/\"\n        mstore(end_1, _1)\n        let length_1 := mload(value1)\n        copy_memory_to_memory_with_cleanup(add(value1, 0x20), add(end_1, 1), length_1)\n        let _2 := add(end_1, length_1)\n        mstore(add(_2, 1), _1)\n        let length_2 := mload(value2)\n        copy_memory_to_memory_with_cleanup(add(value2, 0x20), add(_2, 2), length_2)\n        let _3 := add(_2, length_2)\n        mstore(add(_3, 2), _1)\n        let length_3 := mload(value3)\n        copy_memory_to_memory_with_cleanup(add(value3, 0x20), add(_3, 3), length_3)\n        let _4 := add(_3, length_3)\n        mstore(add(_4, 3), \".json\")\n        end := add(_4, 8)\n    }\n    function abi_encode_tuple_t_string_memory_ptr_t_stringliteral_94ac7d5548e308c1d3c62d3cec2f12ac4e8340c7ba9c9bd462561ccfdd974d98__to_t_string_memory_ptr_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 64)\n        let tail_1 := abi_encode_string(value0, add(headStart, 64))\n        mstore(add(headStart, 32), sub(tail_1, headStart))\n        mstore(tail_1, 4)\n        mstore(add(tail_1, 32), \".ast\")\n        tail := add(tail_1, 64)\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_packed_t_stringliteral_3b0c29718fa0ccfd3c548e0fdf398a1d76969c362a61df53627e5e4f64fab1e8_t_string_memory_ptr_t_stringliteral_dd0e6e5fb2dfed5daf937831e40458612ea423d5675571cc5b1b64fd260d1245__to_t_bytes31_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        mstore(pos, \"Could not find AST in artifact \")\n        let length := mload(value0)\n        copy_memory_to_memory_with_cleanup(add(value0, 0x20), add(pos, 31), length)\n        let _1 := add(pos, length)\n        mstore(add(_1, 31), \". Set `ast = true` in foundry.to\")\n        mstore(add(_1, 63), \"ml\")\n        end := add(_1, 65)\n    }\n    function abi_encode_tuple_t_string_memory_ptr_t_stringliteral_0f3ac612dde053e2dba53344fdd4fdfcedab8a75b1f141a9e2889b50a75851e1__to_t_string_memory_ptr_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 64)\n        let tail_1 := abi_encode_string(value0, add(headStart, 64))\n        mstore(add(headStart, 32), sub(tail_1, headStart))\n        mstore(tail_1, 17)\n        mstore(add(tail_1, 32), \".ast.absolutePath\")\n        tail := add(tail_1, 64)\n    }\n    function abi_encode_tuple_t_string_memory_ptr_t_stringliteral_0ec1952d7acb1df54d89163ca83f1d7b360061eb9c0c5c501b4eac52c5c807e4__to_t_string_memory_ptr_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 64)\n        let tail_1 := abi_encode_string(value0, add(headStart, 64))\n        mstore(add(headStart, 32), sub(tail_1, headStart))\n        mstore(tail_1, 12)\n        mstore(add(tail_1, 32), \".ast.license\")\n        tail := add(tail_1, 64)\n    }\n    function abi_encode_tuple_packed_t_stringliteral_9acc65371218b2be388de4c512999c5773d7c7e8cfe55ef8b9c7f869e0e7945b_t_string_memory_ptr_t_stringliteral_aad8893e597421c55956295138eb041c0150d1e2975daa37e4c3a126e8685848__to_t_bytes20_t_string_memory_ptr_t_bytes12__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        mstore(pos, \".metadata.sources.['\")\n        let length := mload(value0)\n        copy_memory_to_memory_with_cleanup(add(value0, 0x20), add(pos, 20), length)\n        let _1 := add(pos, length)\n        mstore(add(_1, 20), \"'].keccak256\")\n        end := add(_1, 0x20)\n    }\n    function abi_encode_tuple_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        mstore(headStart, 64)\n        let tail_1 := abi_encode_string(value0, add(headStart, 64))\n        mstore(add(headStart, 32), sub(tail_1, headStart))\n        tail := abi_encode_string(value1, tail_1)\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function abi_encode_tuple_packed_t_stringliteral_6e9f33448a4153023cdaf3eb759f1afdc24aba433a3e18b683f8c04a6eaa69f0_t_string_memory_ptr_t_stringliteral_6e9f33448a4153023cdaf3eb759f1afdc24aba433a3e18b683f8c04a6eaa69f0__to_t_bytes1_t_string_memory_ptr_t_bytes1__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        let _1 := shl(249, 17)\n        mstore(pos, _1)\n        let length := mload(value0)\n        copy_memory_to_memory_with_cleanup(add(value0, 0x20), add(pos, 1), length)\n        let _2 := add(pos, length)\n        mstore(add(_2, 1), _1)\n        end := add(_2, 2)\n    }\n    function abi_encode_tuple_packed_t_string_memory_ptr_t_stringliteral_69ae65ff9142d8f87b3884b153358f78dcd4f6339bb046b9a6d16c966fa813af__to_t_string_memory_ptr_t_bytes11__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory_with_cleanup(add(value0, 0x20), pos, length)\n        let end_1 := add(pos, length)\n        mstore(end_1, \"/build-info\")\n        end := add(end_1, 11)\n    }\n    function abi_encode_tuple_packed_t_stringliteral_97996f6d547fd3154e3c44156fcd12ba2952d6646db5187f6bd117ff435085a8_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        mstore(pos, \"Could not find build-info file w\")\n        mstore(add(pos, 32), \"ith matching source code hash fo\")\n        mstore(add(pos, 64), \"r contract \")\n        let length := mload(value0)\n        copy_memory_to_memory_with_cleanup(add(value0, 32), add(pos, 75), length)\n        end := add(add(pos, length), 75)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function increment_t_uint8(value) -> ret\n    {\n        let value_1 := and(value, 0xff)\n        if eq(value_1, 0xff) { panic_error_0x11() }\n        ret := add(value_1, 1)\n    }\n    function abi_encode_tuple_packed_t_stringliteral_911dd02035025c2cb695e87f546c8657a33a4f437472b320b67efab6662a5c76_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        mstore(pos, \"@openzeppelin/defender-deploy-cl\")\n        mstore(add(pos, 32), \"ient-cli@\")\n        let length := mload(value0)\n        copy_memory_to_memory_with_cleanup(add(value0, 32), add(pos, 41), length)\n        end := add(add(pos, length), 41)\n    }\n    function abi_encode_tuple_t_bytes_memory_ptr__to_t_bytes_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_string(value0, add(headStart, 32))\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_stringliteral_524873d67beb7637903c52887510c8a7ea71785147c24441a8c36e6df12a4c44_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 64)\n        mstore(add(headStart, 64), 22)\n        mstore(add(headStart, 96), \"OPENZEPPELIN_BASH_PATH\")\n        mstore(add(headStart, 0x20), 128)\n        tail := abi_encode_string(value0, add(headStart, 128))\n    }\n    function abi_encode_tuple_t_array$_t_string_memory_ptr_$dyn_memory_ptr__to_t_array$_t_string_memory_ptr_$dyn_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        let _1 := 32\n        let tail_1 := add(headStart, 32)\n        mstore(headStart, 32)\n        let pos := tail_1\n        let length := mload(value0)\n        mstore(tail_1, length)\n        pos := add(headStart, 64)\n        let tail_2 := add(add(headStart, shl(5, length)), 64)\n        let srcPtr := add(value0, 32)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(pos, add(sub(tail_2, headStart), not(63)))\n            tail_2 := abi_encode_string(mload(srcPtr), tail_2)\n            srcPtr := add(srcPtr, _1)\n            pos := add(pos, _1)\n        }\n        tail := tail_2\n    }\n    function abi_decode_tuple_t_struct$_FfiResult_$8582_memory_ptr_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let offset := mload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if slt(sub(dataEnd, _2), 0x60) { revert(0, 0) }\n        let value := allocate_memory()\n        let value_1 := mload(_2)\n        if iszero(eq(value_1, signextend(3, value_1))) { revert(0, 0) }\n        mstore(value, value_1)\n        let offset_1 := mload(add(_2, 32))\n        if gt(offset_1, _1) { revert(0, 0) }\n        mstore(add(value, 32), abi_decode_bytes_fromMemory(add(_2, offset_1), dataEnd))\n        let offset_2 := mload(add(_2, 64))\n        if gt(offset_2, _1) { revert(0, 0) }\n        mstore(add(value, 64), abi_decode_bytes_fromMemory(add(_2, offset_2), dataEnd))\n        value0 := value\n    }\n    function abi_encode_tuple_packed_t_stringliteral_9645b1309bf78e4558cd11f0c8b7c479bbb946c623d04c306a8843ee1cc47506_t_string_memory_ptr_t_stringliteral_3b53890135633717feb8747563f231c42249fa1cfe7d1f04d5790e40902f3b91__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        mstore(pos, \"Failed to run bash command with \")\n        mstore(add(pos, 32), shl(249, 17))\n        let length := mload(value0)\n        copy_memory_to_memory_with_cleanup(add(value0, 32), add(pos, 33), length)\n        let _1 := add(pos, length)\n        mstore(add(_1, 33), 0x222e20496620796f7520617265207573696e672057696e646f77732c20736574)\n        mstore(add(_1, 65), \" the OPENZEPPELIN_BASH_PATH envi\")\n        mstore(add(_1, 97), \"ronment variable to the fully qu\")\n        mstore(add(_1, 129), \"alified path of the bash executa\")\n        mstore(add(_1, 161), \"ble. For example, if you are usi\")\n        mstore(add(_1, 193), \"ng Git for Windows, add the foll\")\n        mstore(add(_1, 225), \"owing line in the .env file of y\")\n        mstore(add(_1, 257), \"our project (using forward slash\")\n        mstore(add(_1, 289), 0x6573293a0a4f50454e5a455050454c494e5f424153485f504154483d22433a2f)\n        mstore(add(_1, 321), 0x50726f6772616d2046696c65732f4769742f62696e2f62617368220000000000)\n        end := add(_1, 348)\n    }\n    function abi_encode_tuple_packed_t_stringliteral_47a92f1f2e2401ec3324f84072908fea4ea6788425ad1f8f366b1db3c55810d9_t_string_memory_ptr_t_stringliteral_93bcd8f909ee99a96370a8190ddeafae0a627cb872c93cfdab495c157ddc6c8f_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_bytes13_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        mstore(pos, \"Failed to find line with prefix \")\n        mstore(add(pos, 32), \"'\")\n        let length := mload(value0)\n        copy_memory_to_memory_with_cleanup(add(value0, 32), add(pos, 33), length)\n        let _1 := add(pos, length)\n        mstore(add(_1, 33), \"' in output: \")\n        let length_1 := mload(value1)\n        copy_memory_to_memory_with_cleanup(add(value1, 32), add(_1, 46), length_1)\n        end := add(add(_1, length_1), 46)\n    }\n    function abi_encode_tuple_packed_t_stringliteral_459e684ed08b96f40b9b516154105232b46d6e25e3ebbcc2460d0ad2691a0f84_t_string_memory_ptr__to_t_bytes28_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        mstore(pos, \"@openzeppelin/upgrades-core@\")\n        let length := mload(value0)\n        copy_memory_to_memory_with_cleanup(add(value0, 0x20), add(pos, 28), length)\n        end := add(add(pos, length), 28)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_packed_t_stringliteral_3f120aa75756516f8ad13d558a5b9e5a44bb19eefe0388ce8c7f36f6df8edea5_t_string_memory_ptr_t_stringliteral_9a274a4ef728d0f993bc2f4dc24a093c4d7da9d1cb0dff5da2bf5cfca4271809__to_t_bytes14_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        mstore(pos, \"Contract name \")\n        let length := mload(value0)\n        copy_memory_to_memory_with_cleanup(add(value0, 0x20), add(pos, 14), length)\n        let _1 := add(pos, length)\n        mstore(add(_1, 14), \" must be in the format MyContrac\")\n        mstore(add(_1, 46), \"t.sol:MyContract or MyContract.s\")\n        mstore(add(_1, 78), \"ol or out/MyContract.sol/MyContr\")\n        mstore(add(_1, 110), \"act.json\")\n        end := add(_1, 118)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        sum := add(x, y)\n        if gt(x, sum) { panic_error_0x11() }\n    }\n    function panic_error_0x12()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n    function abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory_with_cleanup(add(value0, 0x20), pos, length)\n        let end_1 := add(pos, length)\n        let length_1 := mload(value1)\n        copy_memory_to_memory_with_cleanup(add(value1, 0x20), end_1, length_1)\n        end := add(end_1, length_1)\n    }\n    function abi_encode_tuple_packed_t_string_memory_ptr_t_stringliteral_681afa780d17da29203322b473d3f210a7d621259a4e6ce9e403f5a266ff719a__to_t_string_memory_ptr_t_bytes1__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory_with_cleanup(add(value0, 0x20), pos, length)\n        let end_1 := add(pos, length)\n        mstore(end_1, \" \")\n        end := add(end_1, 1)\n    }\n    function abi_encode_tuple_packed_t_string_memory_ptr_t_stringliteral_96d280011b274d9410ea6c6fc28e2bb076b01d2fac329c49c4b29a719ec4650c_t_string_memory_ptr__to_t_string_memory_ptr_t_bytes1_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory_with_cleanup(add(value0, 0x20), pos, length)\n        let end_1 := add(pos, length)\n        mstore(end_1, \":\")\n        let length_1 := mload(value1)\n        copy_memory_to_memory_with_cleanup(add(value1, 0x20), add(end_1, 1), length_1)\n        end := add(add(end_1, length_1), 1)\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        product := mul(x, y)\n        if iszero(or(iszero(x), eq(y, div(product, x)))) { panic_error_0x11() }\n    }\n    function checked_exp_helper(_base, exponent) -> power, base\n    {\n        let power_1 := 1\n        power := 1\n        base := _base\n        for { } gt(exponent, power_1) { }\n        {\n            if gt(base, div(not(0), base)) { panic_error_0x11() }\n            if and(exponent, power_1) { power := mul(power, base) }\n            base := mul(base, base)\n            exponent := shr(power_1, exponent)\n        }\n    }\n    function checked_exp_unsigned(base, exponent) -> power\n    {\n        if iszero(exponent)\n        {\n            power := 1\n            leave\n        }\n        if iszero(base)\n        {\n            power := 0\n            leave\n        }\n        switch base\n        case 1 {\n            power := 1\n            leave\n        }\n        case 2 {\n            if gt(exponent, 255) { panic_error_0x11() }\n            power := shl(exponent, 1)\n            leave\n        }\n        if or(and(lt(base, 11), lt(exponent, 78)), and(lt(base, 307), lt(exponent, 32)))\n        {\n            power := exp(base, exponent)\n            leave\n        }\n        let power_1, base_1 := checked_exp_helper(base, exponent)\n        if gt(power_1, div(not(0), base_1)) { panic_error_0x11() }\n        power := mul(power_1, base_1)\n    }\n    function checked_exp_t_uint256_t_uint256(base, exponent) -> power\n    {\n        power := checked_exp_unsigned(base, exponent)\n    }\n    function decrement_t_uint256(value) -> ret\n    {\n        if iszero(value) { panic_error_0x11() }\n        ret := add(value, not(0))\n    }\n    function increment_t_uint256(value) -> ret\n    {\n        if eq(value, not(0)) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n    function panic_error_0x51()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x51)\n        revert(0, 0x24)\n    }\n}",
                  "id": 66,
                  "language": "Yul",
                  "name": "#utility.yul"
                }
              ],
              "linkReferences": {}
            },
            "methodIdentifiers": {
              "IS_SCRIPT()": "f8ccbf47",
              "run()": "c0406226",
              "setUp()": "0a9254e4"
            }
          }
        }
      }
    }
  }
}